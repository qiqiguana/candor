/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.pkcs;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DEREncodableVector;
import org.bouncycastle.asn1.DERObjectIdentifier;
import org.bouncycastle.asn1.pkcs.AuthenticatedSafe;
import org.bouncycastle.asn1.pkcs.ContentInfo;
import org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AuthenticatedSafeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ContentInfo[] contentInfoArray0 = new ContentInfo[1];
      AuthenticatedSafe authenticatedSafe0 = new AuthenticatedSafe(contentInfoArray0);
      ContentInfo[] contentInfoArray1 = authenticatedSafe0.getContentInfo();
      assertSame(contentInfoArray0, contentInfoArray1);
  }

  @Test
  public void test1()  throws Throwable  {
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      BERSequence bERSequence0 = new BERSequence(dEREncodableVector0);
      AuthenticatedSafe authenticatedSafe0 = new AuthenticatedSafe((ASN1Sequence) bERSequence0);
      assertNotNull(authenticatedSafe0);
  }

  @Test
  public void test2()  throws Throwable  {
      DERObjectIdentifier dERObjectIdentifier0 = PKCSObjectIdentifiers.sha384WithRSAEncryption;
      BERSequence bERSequence0 = new BERSequence((DEREncodable) dERObjectIdentifier0);
      AuthenticatedSafe authenticatedSafe0 = null;
      try {
        authenticatedSafe0 = new AuthenticatedSafe((ASN1Sequence) bERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in factory
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      ContentInfo[] contentInfoArray0 = new ContentInfo[1];
      AuthenticatedSafe authenticatedSafe0 = new AuthenticatedSafe(contentInfoArray0);
      BERSequence bERSequence0 = (BERSequence)authenticatedSafe0.getDERObject();
      assertEquals("[null]", bERSequence0.toString());
      assertNotNull(bERSequence0);
  }
}
