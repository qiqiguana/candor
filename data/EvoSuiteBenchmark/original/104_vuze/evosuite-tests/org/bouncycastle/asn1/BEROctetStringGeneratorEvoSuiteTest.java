/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import org.bouncycastle.asn1.BEROctetStringGenerator;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BEROctetStringGeneratorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1267);
      BEROctetStringGenerator bEROctetStringGenerator0 = new BEROctetStringGenerator((OutputStream) byteArrayOutputStream0);
      OutputStream outputStream0 = bEROctetStringGenerator0.getOctetOutputStream();
      byteArrayOutputStream0.writeTo(outputStream0);
      assertEquals(2, byteArrayOutputStream0.size());
      assertEquals("$\uFFFD", byteArrayOutputStream0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1267);
      BEROctetStringGenerator bEROctetStringGenerator0 = new BEROctetStringGenerator((OutputStream) byteArrayOutputStream0);
      byte[] byteArray0 = new byte[2];
      OutputStream outputStream0 = bEROctetStringGenerator0.getOctetOutputStream(byteArray0);
      BEROctetStringGenerator bEROctetStringGenerator1 = new BEROctetStringGenerator(outputStream0, (int) (byte)96, true);
      assertEquals("$\uFFFD\u0004\u0002\uFFFD\uFFFD\u0004\u0002$\uFFFD", byteArrayOutputStream0.toString());
      assertEquals(10, byteArrayOutputStream0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1267);
      BEROctetStringGenerator bEROctetStringGenerator0 = new BEROctetStringGenerator((OutputStream) byteArrayOutputStream0);
      byte[] byteArray0 = new byte[2];
      OutputStream outputStream0 = bEROctetStringGenerator0.getOctetOutputStream(byteArray0);
      byteArrayOutputStream0.writeTo(outputStream0);
      assertEquals(6, byteArrayOutputStream0.size());
      assertEquals("$\uFFFD\u0004\u0002$\uFFFD", byteArrayOutputStream0.toString());
  }
}
