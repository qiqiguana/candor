/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.pkcs;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.bouncycastle.asn1.ASN1Set;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.BERSet;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DERInteger;
import org.bouncycastle.asn1.DERObjectIdentifier;
import org.bouncycastle.asn1.pkcs.ContentInfo;
import org.bouncycastle.asn1.pkcs.PKCSObjectIdentifiers;
import org.bouncycastle.asn1.pkcs.SignedData;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SignedDataEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BERSet bERSet0 = new BERSet((DEREncodable) null);
      DERObjectIdentifier dERObjectIdentifier0 = PKCSObjectIdentifiers.id_PBES2;
      ContentInfo contentInfo0 = new ContentInfo(dERObjectIdentifier0, dERObjectIdentifier0);
      SignedData signedData0 = new SignedData((DERInteger) null, (ASN1Set) bERSet0, contentInfo0, (ASN1Set) bERSet0, (ASN1Set) bERSet0, (ASN1Set) bERSet0);
      DERInteger dERInteger0 = signedData0.getVersion();
      assertNull(dERInteger0);
  }

  @Test
  public void test1()  throws Throwable  {
      BERSet bERSet0 = new BERSet((DEREncodable) null);
      DERObjectIdentifier dERObjectIdentifier0 = PKCSObjectIdentifiers.sha384WithRSAEncryption;
      ContentInfo contentInfo0 = new ContentInfo(dERObjectIdentifier0, (DEREncodable) bERSet0);
      SignedData signedData0 = new SignedData((DERInteger) null, (ASN1Set) null, contentInfo0, (ASN1Set) null, (ASN1Set) null, (ASN1Set) bERSet0);
      BERSet bERSet1 = (BERSet)signedData0.getSignerInfos();
      assertEquals(1, bERSet1.size());
  }

  @Test
  public void test2()  throws Throwable  {
      BERSet bERSet0 = new BERSet((DEREncodable) null);
      DERObjectIdentifier dERObjectIdentifier0 = PKCSObjectIdentifiers.sha384WithRSAEncryption;
      ContentInfo contentInfo0 = new ContentInfo(dERObjectIdentifier0, (DEREncodable) bERSet0);
      SignedData signedData0 = new SignedData((DERInteger) null, (ASN1Set) null, contentInfo0, (ASN1Set) null, (ASN1Set) null, (ASN1Set) bERSet0);
      ContentInfo contentInfo1 = signedData0.getContentInfo();
      assertSame(contentInfo1, contentInfo0);
  }

  @Test
  public void test3()  throws Throwable  {
      BERSet bERSet0 = new BERSet((DEREncodable) null);
      DERObjectIdentifier dERObjectIdentifier0 = PKCSObjectIdentifiers.sha384WithRSAEncryption;
      ContentInfo contentInfo0 = new ContentInfo(dERObjectIdentifier0, (DEREncodable) bERSet0);
      SignedData signedData0 = new SignedData((DERInteger) null, (ASN1Set) null, contentInfo0, (ASN1Set) null, (ASN1Set) null, (ASN1Set) bERSet0);
      BERSet bERSet1 = (BERSet)signedData0.getDigestAlgorithms();
      assertNull(bERSet1);
  }

  @Test
  public void test4()  throws Throwable  {
      BERSet bERSet0 = new BERSet((DEREncodable) null);
      DERObjectIdentifier dERObjectIdentifier0 = PKCSObjectIdentifiers.sha384WithRSAEncryption;
      ContentInfo contentInfo0 = new ContentInfo(dERObjectIdentifier0, (DEREncodable) bERSet0);
      SignedData signedData0 = new SignedData((DERInteger) null, (ASN1Set) null, contentInfo0, (ASN1Set) null, (ASN1Set) null, (ASN1Set) bERSet0);
      BERSet bERSet1 = (BERSet)signedData0.getCRLs();
      assertNull(bERSet1);
  }

  @Test
  public void test5()  throws Throwable  {
      BERSet bERSet0 = new BERSet((DEREncodable) null);
      DERObjectIdentifier dERObjectIdentifier0 = PKCSObjectIdentifiers.id_PBES2;
      ContentInfo contentInfo0 = new ContentInfo(dERObjectIdentifier0, dERObjectIdentifier0);
      SignedData signedData0 = new SignedData((DERInteger) null, (ASN1Set) bERSet0, contentInfo0, (ASN1Set) bERSet0, (ASN1Set) bERSet0, (ASN1Set) bERSet0);
      BERSet bERSet1 = (BERSet)signedData0.getCertificates();
      assertEquals(1, bERSet1.size());
  }

  @Test
  public void test6()  throws Throwable  {
      BERSet bERSet0 = new BERSet((DEREncodable) null);
      // Undeclared exception!
      try {
        SignedData.getInstance((Object) bERSet0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in factory: [null]
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      BERSet bERSet0 = new BERSet((DEREncodable) null);
      DERObjectIdentifier dERObjectIdentifier0 = PKCSObjectIdentifiers.id_PBES2;
      ContentInfo contentInfo0 = new ContentInfo(dERObjectIdentifier0, dERObjectIdentifier0);
      SignedData signedData0 = new SignedData((DERInteger) null, (ASN1Set) bERSet0, contentInfo0, (ASN1Set) bERSet0, (ASN1Set) bERSet0, (ASN1Set) bERSet0);
      SignedData signedData1 = SignedData.getInstance((Object) signedData0);
      assertSame(signedData0, signedData1);
  }

  @Test
  public void test8()  throws Throwable  {
      BERSet bERSet0 = new BERSet((DEREncodable) null);
      DERObjectIdentifier dERObjectIdentifier0 = PKCSObjectIdentifiers.id_PBES2;
      ContentInfo contentInfo0 = new ContentInfo(dERObjectIdentifier0, dERObjectIdentifier0);
      SignedData signedData0 = new SignedData((DERInteger) null, (ASN1Set) bERSet0, contentInfo0, (ASN1Set) bERSet0, (ASN1Set) bERSet0, (ASN1Set) bERSet0);
      BERSequence bERSequence0 = (BERSequence)signedData0.getDERObject();
      SignedData signedData1 = SignedData.getInstance((Object) bERSequence0);
      assertEquals(6, bERSequence0.size());
      assertNotNull(signedData1);
  }

  @Test
  public void test9()  throws Throwable  {
      BERSet bERSet0 = new BERSet((DEREncodable) null);
      DERObjectIdentifier dERObjectIdentifier0 = PKCSObjectIdentifiers.sha384WithRSAEncryption;
      ContentInfo contentInfo0 = new ContentInfo(dERObjectIdentifier0, (DEREncodable) bERSet0);
      SignedData signedData0 = new SignedData((DERInteger) null, (ASN1Set) null, contentInfo0, (ASN1Set) null, (ASN1Set) null, (ASN1Set) bERSet0);
      BERSequence bERSequence0 = (BERSequence)signedData0.getDERObject();
      assertEquals(4, bERSequence0.size());
  }
}
