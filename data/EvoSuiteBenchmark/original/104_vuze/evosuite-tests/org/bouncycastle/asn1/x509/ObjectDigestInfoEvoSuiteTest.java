/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x509;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERTaggedObject;
import org.bouncycastle.asn1.DERBitString;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DEREnumerated;
import org.bouncycastle.asn1.DERObjectIdentifier;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.asn1.x509.ObjectDigestInfo;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ObjectDigestInfoEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ObjectDigestInfo objectDigestInfo0 = new ObjectDigestInfo((int) (byte)72, "", (AlgorithmIdentifier) null, byteArray0);
      DEREnumerated dEREnumerated0 = objectDigestInfo0.getDigestedObjectType();
      assertNotNull(dEREnumerated0);
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ObjectDigestInfo objectDigestInfo0 = new ObjectDigestInfo((int) (byte)72, "", (AlgorithmIdentifier) null, byteArray0);
      DERBitString dERBitString0 = objectDigestInfo0.getObjectDigest();
      assertEquals("#03050000000000", dERBitString0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      ASN1Encodable[] aSN1EncodableArray0 = new ASN1Encodable[4];
      DERSequence dERSequence0 = new DERSequence(aSN1EncodableArray0);
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(false, 7, (DEREncodable) dERSequence0);
      ObjectDigestInfo objectDigestInfo0 = ObjectDigestInfo.getInstance((ASN1TaggedObject) bERTaggedObject0, false);
      assertNotNull(objectDigestInfo0);
  }

  @Test
  public void test3()  throws Throwable  {
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier((DERObjectIdentifier) null);
      byte[] byteArray0 = new byte[5];
      ObjectDigestInfo objectDigestInfo0 = new ObjectDigestInfo(1, "", algorithmIdentifier0, byteArray0);
      AlgorithmIdentifier algorithmIdentifier1 = objectDigestInfo0.getDigestAlgorithm();
      assertSame(algorithmIdentifier0, algorithmIdentifier1);
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ObjectDigestInfo objectDigestInfo0 = new ObjectDigestInfo(1210, "", (AlgorithmIdentifier) null, byteArray0);
      DERObjectIdentifier dERObjectIdentifier0 = objectDigestInfo0.getOtherObjectTypeID();
      assertNull(dERObjectIdentifier0);
  }

  @Test
  public void test5()  throws Throwable  {
      ObjectDigestInfo objectDigestInfo0 = ObjectDigestInfo.getInstance((Object) null);
      assertNull(objectDigestInfo0);
  }

  @Test
  public void test6()  throws Throwable  {
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier((DERObjectIdentifier) null);
      byte[] byteArray0 = new byte[5];
      ObjectDigestInfo objectDigestInfo0 = new ObjectDigestInfo(1, "", algorithmIdentifier0, byteArray0);
      ObjectDigestInfo objectDigestInfo1 = ObjectDigestInfo.getInstance((Object) objectDigestInfo0);
      assertSame(objectDigestInfo0, objectDigestInfo1);
  }

  @Test
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try {
        ObjectDigestInfo.getInstance((Object) "BER");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * illegal object in getInstance: java.lang.String
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      ASN1Encodable[] aSN1EncodableArray0 = new ASN1Encodable[9];
      DERSequence dERSequence0 = new DERSequence(aSN1EncodableArray0);
      // Undeclared exception!
      try {
        ObjectDigestInfo.getInstance((Object) dERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Bad sequence size: 9
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(0);
      // Undeclared exception!
      try {
        ObjectDigestInfo.getInstance((ASN1TaggedObject) bERTaggedObject0, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Bad sequence size: 0
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier((DERObjectIdentifier) null);
      byte[] byteArray0 = new byte[5];
      ObjectDigestInfo objectDigestInfo0 = new ObjectDigestInfo(1, "", algorithmIdentifier0, byteArray0);
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(true, (-1914), (DEREncodable) objectDigestInfo0);
      ObjectDigestInfo objectDigestInfo1 = ObjectDigestInfo.getInstance((ASN1TaggedObject) dERTaggedObject0, true);
      assertNotNull(objectDigestInfo1);
  }
}
