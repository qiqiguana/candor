/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.pkcs;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.math.BigInteger;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.pkcs.MacData;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.asn1.x509.DigestInfo;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MacDataEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      MacData macData0 = new MacData((DigestInfo) null, byteArray0, (int) (byte)0);
      byte[] byteArray1 = macData0.getSalt();
      assertSame(byteArray1, byteArray0);
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      MacData macData0 = new MacData((DigestInfo) null, byteArray0, (int) (byte)0);
      BigInteger bigInteger0 = macData0.getIterationCount();
      assertNotNull(bigInteger0);
      assertEquals(0.0F, bigInteger0.floatValue(), 0.01F);
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      MacData macData0 = new MacData((DigestInfo) null, byteArray0, (int) (byte)0);
      DERSequence dERSequence0 = (DERSequence)macData0.getDERObject();
      assertEquals("[null, #0000, 0]", dERSequence0.toString());
      assertNotNull(dERSequence0);
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      MacData macData0 = new MacData((DigestInfo) null, byteArray0, (int) (byte)0);
      DigestInfo digestInfo0 = macData0.getMac();
      assertNull(digestInfo0);
  }

  @Test
  public void test4()  throws Throwable  {
      DERSequence dERSequence0 = new DERSequence();
      // Undeclared exception!
      try {
        MacData.getInstance((Object) dERSequence0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 0 >= 0
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      DigestInfo digestInfo0 = new DigestInfo((AlgorithmIdentifier) null, byteArray0);
      MacData macData0 = new MacData(digestInfo0, byteArray0, (int) (byte)0);
      MacData macData1 = MacData.getInstance((Object) macData0);
      assertSame(macData1, macData0);
  }

  @Test
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try {
        MacData.getInstance((Object) "Korean");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in factory
         */
      }
  }
}
