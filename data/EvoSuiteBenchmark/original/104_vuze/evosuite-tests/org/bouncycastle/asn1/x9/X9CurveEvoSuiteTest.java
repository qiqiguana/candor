/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x9;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.math.BigInteger;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DERObjectIdentifier;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.x9.X9Curve;
import org.bouncycastle.asn1.x9.X9FieldID;
import org.bouncycastle.asn1.x9.X9ObjectIdentifiers;
import org.bouncycastle.math.ec.ECCurve;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class X9CurveEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      X9Curve x9Curve0 = new X9Curve((ECCurve) null, byteArray0);
      byte[] byteArray1 = x9Curve0.getSeed();
      assertSame(byteArray0, byteArray1);
  }

  @Test
  public void test1()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      ECCurve.F2m eCCurve_F2m0 = new ECCurve.F2m(1941, 1941, bigInteger0, bigInteger0);
      X9Curve x9Curve0 = new X9Curve((ECCurve) eCCurve_F2m0);
      ECCurve.F2m eCCurve_F2m1 = (ECCurve.F2m)x9Curve0.getCurve();
      assertEquals(0, eCCurve_F2m1.getK3());
  }

  @Test
  public void test2()  throws Throwable  {
      DERObjectIdentifier dERObjectIdentifier0 = X9ObjectIdentifiers.characteristic_two_field;
      BigInteger bigInteger0 = BigInteger.ZERO;
      X9FieldID x9FieldID0 = new X9FieldID(dERObjectIdentifier0, bigInteger0);
      BERSequence bERSequence0 = new BERSequence();
      X9Curve x9Curve0 = null;
      try {
        x9Curve0 = new X9Curve(x9FieldID0, (ASN1Sequence) bERSequence0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * not implemented
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      DERObjectIdentifier dERObjectIdentifier0 = X9ObjectIdentifiers.prime_field;
      BigInteger bigInteger0 = BigInteger.TEN;
      X9FieldID x9FieldID0 = new X9FieldID(dERObjectIdentifier0, bigInteger0);
      BERSequence bERSequence0 = new BERSequence((DEREncodable) x9FieldID0);
      X9Curve x9Curve0 = null;
      try {
        x9Curve0 = new X9Curve(x9FieldID0, (ASN1Sequence) bERSequence0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * org.bouncycastle.asn1.x9.X9FieldID cannot be cast to org.bouncycastle.asn1.ASN1OctetString
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      ECCurve.F2m eCCurve_F2m0 = new ECCurve.F2m(1941, 1941, bigInteger0, bigInteger0);
      X9Curve x9Curve0 = new X9Curve((ECCurve) eCCurve_F2m0);
      DERSequence dERSequence0 = (DERSequence)x9Curve0.getDERObject();
      assertEquals(2, dERSequence0.size());
      assertEquals("[#0a, #0a]", dERSequence0.toString());
      assertNotNull(dERSequence0);
  }

  @Test
  public void test5()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      ECCurve.F2m eCCurve_F2m0 = new ECCurve.F2m(36, 36, bigInteger0, bigInteger0);
      byte[] byteArray0 = new byte[5];
      X9Curve x9Curve0 = new X9Curve((ECCurve) eCCurve_F2m0, byteArray0);
      DERSequence dERSequence0 = (DERSequence)x9Curve0.getDERObject();
      assertEquals("[#01, #01, #0306000000000000]", dERSequence0.toString());
      assertNotNull(dERSequence0);
  }
}
