/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.bouncycastle.asn1.ASN1SequenceParser;
import org.bouncycastle.asn1.BERConstructedSequence;
import org.bouncycastle.asn1.DEREncodable;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DERConstructedSequenceEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      ASN1SequenceParser aSN1SequenceParser0 = bERConstructedSequence0.parser();
      bERConstructedSequence0.addObject((DEREncodable) aSN1SequenceParser0);
      // Undeclared exception!
      try {
        bERConstructedSequence0.getDEREncoded();
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      int int0 = bERConstructedSequence0.getSize();
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      byte[] byteArray0 = bERConstructedSequence0.getDEREncoded();
      assertNotNull(byteArray0);
  }
}
