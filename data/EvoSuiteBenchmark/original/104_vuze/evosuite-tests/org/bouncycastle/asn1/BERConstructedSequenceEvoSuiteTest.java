/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.io.OutputStream;
import org.bouncycastle.asn1.BERConstructedSequence;
import org.bouncycastle.asn1.BEROutputStream;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DEROutputStream;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BERConstructedSequenceEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      byte[] byteArray0 = bERConstructedSequence0.getEncoded();
      assertNotNull(byteArray0);
  }

  @Test
  public void test1()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      byte[] byteArray0 = bERConstructedSequence0.getDEREncoded();
      assertNotNull(byteArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      BEROutputStream bEROutputStream0 = new BEROutputStream((OutputStream) null);
      // Undeclared exception!
      try {
        bERConstructedSequence0.encode((DEROutputStream) bEROutputStream0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      bERConstructedSequence0.addObject((DEREncodable) bERConstructedSequence0);
      // Undeclared exception!
      try {
        bERConstructedSequence0.getEncoded("");
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }
}
