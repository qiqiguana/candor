/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x509;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERConstructedSequence;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.BERTaggedObject;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DERObjectIdentifier;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.x509.GeneralName;
import org.bouncycastle.asn1.x509.GeneralNames;
import org.bouncycastle.asn1.x509.IetfAttrSyntax;
import org.bouncycastle.asn1.x509.X509Name;
import org.evosuite.testcase.TestCaseExecutor;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class IetfAttrSyntaxEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      BERSequence bERSequence0 = new BERSequence((DEREncodable) bERConstructedSequence0);
      IetfAttrSyntax ietfAttrSyntax0 = new IetfAttrSyntax((ASN1Sequence) bERSequence0);
      assertNotNull(ietfAttrSyntax0);
      
      ietfAttrSyntax0.getPolicyAuthority();
      assertEquals((-1), ietfAttrSyntax0.valueChoice);
      assertEquals(-1, ietfAttrSyntax0.getValueType());
  }

  @Test
  public void test1()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      BERSequence bERSequence0 = new BERSequence((DEREncodable) bERConstructedSequence0);
      IetfAttrSyntax ietfAttrSyntax0 = new IetfAttrSyntax((ASN1Sequence) bERSequence0);
      assertNotNull(ietfAttrSyntax0);
      
      Object[] objectArray0 = ietfAttrSyntax0.getValues();
      assertEquals(-1, ietfAttrSyntax0.getValueType());
      assertNotNull(objectArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      DERObjectIdentifier dERObjectIdentifier0 = X509Name.OU;
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(false, 19, (DEREncodable) dERObjectIdentifier0);
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(19, (DEREncodable) dERTaggedObject0);
      BERSequence bERSequence0 = (BERSequence)ASN1Sequence.getInstance((ASN1TaggedObject) bERTaggedObject0, false);
      IetfAttrSyntax ietfAttrSyntax0 = null;
      try {
        ietfAttrSyntax0 = new IetfAttrSyntax((ASN1Sequence) bERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in getInstanceFromTagged
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      ASN1Encodable[] aSN1EncodableArray0 = new ASN1Encodable[2];
      DERSequence dERSequence0 = new DERSequence(aSN1EncodableArray0);
      IetfAttrSyntax ietfAttrSyntax0 = null;
      try {
        ietfAttrSyntax0 = new IetfAttrSyntax((ASN1Sequence) dERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Non-IetfAttrSyntax encoding
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      BERSequence bERSequence0 = new BERSequence((DEREncodable) bERConstructedSequence0);
      bERConstructedSequence0.addObject((DEREncodable) bERSequence0);
      IetfAttrSyntax ietfAttrSyntax0 = null;
      try {
        ietfAttrSyntax0 = new IetfAttrSyntax((ASN1Sequence) bERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Bad value type encoding IetfAttrSyntax
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      DERObjectIdentifier dERObjectIdentifier0 = X509Name.INITIALS;
      bERConstructedSequence0.addObject((DEREncodable) dERObjectIdentifier0);
      BERSequence bERSequence0 = new BERSequence((DEREncodable) bERConstructedSequence0);
      IetfAttrSyntax ietfAttrSyntax0 = new IetfAttrSyntax((ASN1Sequence) bERSequence0);
      assertNotNull(ietfAttrSyntax0);
      
      Object[] objectArray0 = ietfAttrSyntax0.getValues();
      assertNotNull(objectArray0);
      assertEquals(2, ietfAttrSyntax0.getValueType());
  }

  @Test
  public void test6()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      DERObjectIdentifier dERObjectIdentifier0 = X509Name.INITIALS;
      bERConstructedSequence0.addObject((DEREncodable) dERObjectIdentifier0);
      bERConstructedSequence0.addObject((DEREncodable) dERObjectIdentifier0);
      BERSequence bERSequence0 = new BERSequence((DEREncodable) bERConstructedSequence0);
      IetfAttrSyntax ietfAttrSyntax0 = new IetfAttrSyntax((ASN1Sequence) bERSequence0);
      assertEquals(2, ietfAttrSyntax0.valueChoice);
  }

  @Test
  public void test7()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      BERSequence bERSequence0 = new BERSequence((DEREncodable) bERConstructedSequence0);
      IetfAttrSyntax ietfAttrSyntax0 = new IetfAttrSyntax((ASN1Sequence) bERSequence0);
      assertEquals((-1), ietfAttrSyntax0.valueChoice);
      assertNotNull(ietfAttrSyntax0);
      
      ietfAttrSyntax0.valueChoice = 1;
      ietfAttrSyntax0.getValues();
      assertEquals(1, ietfAttrSyntax0.getValueType());
  }

  @Test
  public void test8()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      BERSequence bERSequence0 = new BERSequence((DEREncodable) bERConstructedSequence0);
      IetfAttrSyntax ietfAttrSyntax0 = new IetfAttrSyntax((ASN1Sequence) bERSequence0);
      GeneralName generalName0 = new GeneralName((-1), (ASN1Encodable) ietfAttrSyntax0);
      GeneralNames generalNames0 = new GeneralNames(generalName0);
      ietfAttrSyntax0.policyAuthority = (org.bouncycastle.asn1.x509.GeneralNames) generalNames0;
      generalNames0.toString();
  }

  @Test
  public void test9()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      DERObjectIdentifier dERObjectIdentifier0 = X509Name.INITIALS;
      bERConstructedSequence0.addObject((DEREncodable) dERObjectIdentifier0);
      BERSequence bERSequence0 = new BERSequence((DEREncodable) bERConstructedSequence0);
      IetfAttrSyntax ietfAttrSyntax0 = new IetfAttrSyntax((ASN1Sequence) bERSequence0);
      assertNotNull(ietfAttrSyntax0);
      
      DERSequence dERSequence0 = (DERSequence)ietfAttrSyntax0.toASN1Object();
      assertEquals("[[2.5.4.43]]", dERSequence0.toString());
      assertNotNull(dERSequence0);
  }
}
