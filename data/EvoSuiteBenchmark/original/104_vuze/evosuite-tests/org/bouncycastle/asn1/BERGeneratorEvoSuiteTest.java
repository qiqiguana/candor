/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import org.bouncycastle.asn1.BERGenerator;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BERGeneratorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BERGenerator bERGenerator0 = new BERGenerator((OutputStream) byteArrayOutputStream0, 0, true);
      ByteArrayOutputStream byteArrayOutputStream1 = (ByteArrayOutputStream)bERGenerator0.getRawOutputStream();
      assertEquals("", byteArrayOutputStream1.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BERGenerator bERGenerator0 = new BERGenerator((OutputStream) byteArrayOutputStream0, 3, false);
      bERGenerator0.writeBERHeader(32);
      assertEquals(2, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD", byteArrayOutputStream0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      BERGenerator bERGenerator0 = new BERGenerator((OutputStream) objectOutputStream0);
      bERGenerator0.writeBERHeader(32);
  }

  @Test
  public void test3()  throws Throwable  {
      BERGenerator bERGenerator0 = new BERGenerator((OutputStream) null, 1423, true);
      // Undeclared exception!
      try {
        bERGenerator0.writeBERHeader(0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      BERGenerator bERGenerator0 = new BERGenerator((OutputStream) null, (-2041), false);
      // Undeclared exception!
      try {
        bERGenerator0.writeBERHeader(399);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) byteArrayOutputStream0);
      BERGenerator bERGenerator0 = new BERGenerator((OutputStream) dataOutputStream0, 1, true);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      bERGenerator0.writeBERBody((InputStream) byteArrayInputStream0);
      assertEquals(-1, byteArrayInputStream0.read());
      assertEquals("\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      BERGenerator bERGenerator0 = new BERGenerator((OutputStream) objectOutputStream0);
      bERGenerator0.writeBEREnd();
  }

  @Test
  public void test7()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BERGenerator bERGenerator0 = new BERGenerator((OutputStream) byteArrayOutputStream0, 0, true);
      bERGenerator0.writeBEREnd();
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\u0000\u0000\u0000\u0000", byteArrayOutputStream0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BERGenerator bERGenerator0 = new BERGenerator((OutputStream) byteArrayOutputStream0, 3, false);
      bERGenerator0.writeBEREnd();
      assertEquals(2, byteArrayOutputStream0.size());
      assertEquals("\u0000\u0000", byteArrayOutputStream0.toString());
  }
}
