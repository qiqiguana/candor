/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x509;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Date;
import java.util.Hashtable;
import java.util.Vector;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.BERTaggedObject;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DERGeneralizedTime;
import org.bouncycastle.asn1.DERInteger;
import org.bouncycastle.asn1.DERObjectIdentifier;
import org.bouncycastle.asn1.DERUTCTime;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.asn1.x509.TBSCertList;
import org.bouncycastle.asn1.x509.Time;
import org.bouncycastle.asn1.x509.V2TBSCertListGenerator;
import org.bouncycastle.asn1.x509.X509Extensions;
import org.bouncycastle.asn1.x509.X509Name;
import org.evosuite.testcase.CodeUnderTestException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class V2TBSCertListGeneratorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      V2TBSCertListGenerator v2TBSCertListGenerator0 = new V2TBSCertListGenerator();
      Date date0 = new Date();
      DERUTCTime dERUTCTime0 = new DERUTCTime(date0);
  }

  @Test
  public void test1()  throws Throwable  {
      V2TBSCertListGenerator v2TBSCertListGenerator0 = new V2TBSCertListGenerator();
      v2TBSCertListGenerator0.setThisUpdate((Time) null);
  }

  @Test
  public void test2()  throws Throwable  {
      V2TBSCertListGenerator v2TBSCertListGenerator0 = new V2TBSCertListGenerator();
      Date date0 = new Date();
      DERUTCTime dERUTCTime0 = new DERUTCTime(date0);
      v2TBSCertListGenerator0.setThisUpdate(dERUTCTime0);
      assertEquals(1372728618066L, date0.getTime());
  }

  @Test
  public void test3()  throws Throwable  {
      V2TBSCertListGenerator v2TBSCertListGenerator0 = new V2TBSCertListGenerator();
      // Undeclared exception!
      try {
        v2TBSCertListGenerator0.setNextUpdate((DERUTCTime) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object passed to Time
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      V2TBSCertListGenerator v2TBSCertListGenerator0 = new V2TBSCertListGenerator();
      Date date0 = new Date();
      DERUTCTime dERUTCTime0 = new DERUTCTime(date0);
  }

  @Test
  public void test5()  throws Throwable  {
      V2TBSCertListGenerator v2TBSCertListGenerator0 = new V2TBSCertListGenerator();
      // Undeclared exception!
      try {
        v2TBSCertListGenerator0.generateTBSCertList();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Not all mandatory fields set in V2 TBSCertList generator.
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      V2TBSCertListGenerator v2TBSCertListGenerator0 = new V2TBSCertListGenerator();
      BERSequence bERSequence0 = new BERSequence((DEREncodable) null);
      DERObjectIdentifier dERObjectIdentifier0 = X509Name.STREET;
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier(dERObjectIdentifier0, (DEREncodable) bERSequence0);
      v2TBSCertListGenerator0.setSignature(algorithmIdentifier0);
      // Undeclared exception!
      try {
        v2TBSCertListGenerator0.generateTBSCertList();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Not all mandatory fields set in V2 TBSCertList generator.
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      V2TBSCertListGenerator v2TBSCertListGenerator0 = new V2TBSCertListGenerator();
      Hashtable<Object, Object> hashtable0 = X509Name.OIDLookUp;
      X509Name x509Name0 = new X509Name((Vector) null, (Hashtable) hashtable0);
      v2TBSCertListGenerator0.setIssuer(x509Name0);
      BERSequence bERSequence0 = new BERSequence((DEREncodable) null);
      DERObjectIdentifier dERObjectIdentifier0 = X509Name.STREET;
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier(dERObjectIdentifier0, (DEREncodable) bERSequence0);
      v2TBSCertListGenerator0.setSignature(algorithmIdentifier0);
      // Undeclared exception!
      try {
        v2TBSCertListGenerator0.generateTBSCertList();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Not all mandatory fields set in V2 TBSCertList generator.
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      V2TBSCertListGenerator v2TBSCertListGenerator0 = new V2TBSCertListGenerator();
      Hashtable<Object, Object> hashtable0 = X509Name.OIDLookUp;
      X509Name x509Name0 = new X509Name((Vector) null, (Hashtable) hashtable0);
      v2TBSCertListGenerator0.setIssuer(x509Name0);
      BERSequence bERSequence0 = new BERSequence((DEREncodable) null);
      Date date0 = new Date();
      Time time0 = new Time(date0);
      v2TBSCertListGenerator0.thisUpdate = (org.bouncycastle.asn1.x509.Time) time0;
      DERObjectIdentifier dERObjectIdentifier0 = X509Name.STREET;
      v2TBSCertListGenerator0.setNextUpdate(time0);
      assertEquals("Tue Jul 02 02:30:21 BST 2013", date0.toString());
      
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier(dERObjectIdentifier0, (DEREncodable) bERSequence0);
      v2TBSCertListGenerator0.setSignature(algorithmIdentifier0);
      TBSCertList tBSCertList0 = v2TBSCertListGenerator0.generateTBSCertList();
      assertEquals(2, tBSCertList0.getVersion());
  }

  @Test
  public void test9()  throws Throwable  {
      V2TBSCertListGenerator v2TBSCertListGenerator0 = new V2TBSCertListGenerator();
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject((int) (byte)0);
      X509Extensions x509Extensions0 = X509Extensions.getInstance((ASN1TaggedObject) bERTaggedObject0, false);
      v2TBSCertListGenerator0.setExtensions(x509Extensions0);
      Date date0 = new Date();
      Hashtable<Object, Object> hashtable0 = X509Name.OIDLookUp;
      X509Name x509Name0 = new X509Name((Vector) null, (Hashtable) hashtable0);
      v2TBSCertListGenerator0.setIssuer(x509Name0);
  }
}
