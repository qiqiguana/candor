/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x509;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.math.BigInteger;
import org.bouncycastle.asn1.ASN1Object;
import org.bouncycastle.asn1.ASN1OctetString;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.BERTaggedObject;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DERObjectIdentifier;
import org.bouncycastle.asn1.DEROctetString;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.asn1.x509.AuthorityKeyIdentifier;
import org.bouncycastle.asn1.x509.GeneralName;
import org.bouncycastle.asn1.x509.GeneralNames;
import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;
import org.bouncycastle.asn1.x509.X509Extension;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AuthorityKeyIdentifierEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo((AlgorithmIdentifier) null, byteArray0);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      AuthorityKeyIdentifier authorityKeyIdentifier0 = null;
      try {
        authorityKeyIdentifier0 = new AuthorityKeyIdentifier(subjectPublicKeyInfo0, (GeneralNames) null, bigInteger0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      GeneralNames generalNames0 = new GeneralNames((GeneralName) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      AuthorityKeyIdentifier authorityKeyIdentifier0 = new AuthorityKeyIdentifier(generalNames0, bigInteger0);
      assertNotNull(authorityKeyIdentifier0);
      
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(0, (DEREncodable) authorityKeyIdentifier0);
      AuthorityKeyIdentifier authorityKeyIdentifier1 = AuthorityKeyIdentifier.getInstance((ASN1TaggedObject) bERTaggedObject0, true);
      assertNotNull(authorityKeyIdentifier1);
      assertTrue(authorityKeyIdentifier1.equals(authorityKeyIdentifier0));
  }

  @Test
  public void test2()  throws Throwable  {
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier((DERObjectIdentifier) null, (DEREncodable) null);
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo(algorithmIdentifier0, (DEREncodable) null);
      AuthorityKeyIdentifier authorityKeyIdentifier0 = new AuthorityKeyIdentifier(subjectPublicKeyInfo0);
      assertNotNull(authorityKeyIdentifier0);
      
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(true, (-1), (DEREncodable) authorityKeyIdentifier0);
      AuthorityKeyIdentifier authorityKeyIdentifier1 = AuthorityKeyIdentifier.getInstance((ASN1TaggedObject) bERTaggedObject0, true);
      assertNotNull(authorityKeyIdentifier1);
      assertTrue(authorityKeyIdentifier1.equals(authorityKeyIdentifier0));
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      GeneralNames generalNames0 = new GeneralNames((GeneralName) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      AuthorityKeyIdentifier authorityKeyIdentifier0 = new AuthorityKeyIdentifier(byteArray0, generalNames0, bigInteger0);
      String string0 = authorityKeyIdentifier0.toString();
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      AuthorityKeyIdentifier authorityKeyIdentifier0 = new AuthorityKeyIdentifier(byteArray0);
      byte[] byteArray1 = authorityKeyIdentifier0.getKeyIdentifier();
      assertSame(byteArray0, byteArray1);
  }

  @Test
  public void test5()  throws Throwable  {
      DERSequence dERSequence0 = new DERSequence();
      AuthorityKeyIdentifier authorityKeyIdentifier0 = new AuthorityKeyIdentifier((ASN1Sequence) dERSequence0);
      GeneralNames generalNames0 = authorityKeyIdentifier0.getAuthorityCertIssuer();
      assertNull(generalNames0);
  }

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      AuthorityKeyIdentifier authorityKeyIdentifier0 = new AuthorityKeyIdentifier(byteArray0);
      AuthorityKeyIdentifier authorityKeyIdentifier1 = AuthorityKeyIdentifier.getInstance((Object) authorityKeyIdentifier0);
      assertSame(authorityKeyIdentifier1, authorityKeyIdentifier0);
  }

  @Test
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try {
        AuthorityKeyIdentifier.getInstance((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in factory
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      DEROctetString dEROctetString0 = new DEROctetString(byteArray0);
      X509Extension x509Extension0 = new X509Extension(false, (ASN1OctetString) dEROctetString0);
      // Undeclared exception!
      try {
        AuthorityKeyIdentifier.getInstance((Object) x509Extension0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * org.bouncycastle.asn1.ASN1InputStream$1 cannot be cast to org.bouncycastle.asn1.ASN1Object
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-77);
      DERTaggedObject dERTaggedObject0 = (DERTaggedObject)ASN1Object.fromByteArray(byteArray0);
      BERSequence bERSequence0 = new BERSequence((DEREncodable) dERTaggedObject0);
      AuthorityKeyIdentifier authorityKeyIdentifier0 = null;
      try {
        authorityKeyIdentifier0 = new AuthorityKeyIdentifier((ASN1Sequence) bERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * illegal tag
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      GeneralNames generalNames0 = new GeneralNames((GeneralName) null);
      BigInteger bigInteger0 = BigInteger.ZERO;
      AuthorityKeyIdentifier authorityKeyIdentifier0 = new AuthorityKeyIdentifier(generalNames0, bigInteger0);
      byte[] byteArray0 = authorityKeyIdentifier0.getKeyIdentifier();
      assertNull(byteArray0);
  }

  @Test
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      AuthorityKeyIdentifier authorityKeyIdentifier0 = new AuthorityKeyIdentifier(byteArray0);
      BigInteger bigInteger0 = authorityKeyIdentifier0.getAuthorityCertSerialNumber();
      assertNull(bigInteger0);
  }

  @Test
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      GeneralNames generalNames0 = new GeneralNames((GeneralName) null);
      BigInteger bigInteger0 = BigInteger.ONE;
      AuthorityKeyIdentifier authorityKeyIdentifier0 = new AuthorityKeyIdentifier(byteArray0, generalNames0, bigInteger0);
      BigInteger bigInteger1 = authorityKeyIdentifier0.getAuthorityCertSerialNumber();
      assertEquals(1L, bigInteger1.longValue());
  }
}
