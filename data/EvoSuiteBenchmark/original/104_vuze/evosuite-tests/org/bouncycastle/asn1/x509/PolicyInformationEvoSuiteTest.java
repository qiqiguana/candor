/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x509;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERTaggedObject;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DERObjectIdentifier;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.x509.PolicyInformation;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PolicyInformationEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DERSequence dERSequence0 = new DERSequence();
      PolicyInformation policyInformation0 = new PolicyInformation((DERObjectIdentifier) null, (ASN1Sequence) dERSequence0);
      DERSequence dERSequence1 = (DERSequence)policyInformation0.toASN1Object();
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(true, 0, (DEREncodable) dERSequence1);
      DERSequence dERSequence2 = (DERSequence)ASN1Sequence.getInstance((ASN1TaggedObject) bERTaggedObject0, true);
      PolicyInformation policyInformation1 = new PolicyInformation((ASN1Sequence) dERSequence2);
      assertEquals("[0][null, []]", bERTaggedObject0.toString());
      assertNotNull(policyInformation1);
      assertEquals(2, dERSequence2.size());
  }

  @Test
  public void test1()  throws Throwable  {
      PolicyInformation policyInformation0 = new PolicyInformation((DERObjectIdentifier) null);
      DERObjectIdentifier dERObjectIdentifier0 = policyInformation0.getPolicyIdentifier();
      assertNull(dERObjectIdentifier0);
  }

  @Test
  public void test2()  throws Throwable  {
      DERSequence dERSequence0 = new DERSequence((DEREncodable) null);
      PolicyInformation policyInformation0 = new PolicyInformation((ASN1Sequence) dERSequence0);
      ASN1Sequence aSN1Sequence0 = policyInformation0.getPolicyQualifiers();
      assertNull(aSN1Sequence0);
  }

  @Test
  public void test3()  throws Throwable  {
      DERSequence dERSequence0 = new DERSequence();
      PolicyInformation policyInformation0 = null;
      try {
        policyInformation0 = new PolicyInformation((ASN1Sequence) dERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Bad sequence size: 0
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      ASN1Encodable[] aSN1EncodableArray0 = new ASN1Encodable[4];
      DERSequence dERSequence0 = new DERSequence(aSN1EncodableArray0);
      PolicyInformation policyInformation0 = null;
      try {
        policyInformation0 = new PolicyInformation((ASN1Sequence) dERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Bad sequence size: 4
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      PolicyInformation policyInformation0 = PolicyInformation.getInstance((Object) null);
      assertNull(policyInformation0);
  }

  @Test
  public void test6()  throws Throwable  {
      DERSequence dERSequence0 = new DERSequence((DEREncodable) null);
      PolicyInformation policyInformation0 = new PolicyInformation((ASN1Sequence) dERSequence0);
      PolicyInformation policyInformation1 = PolicyInformation.getInstance((Object) policyInformation0);
      assertSame(policyInformation0, policyInformation1);
  }

  @Test
  public void test7()  throws Throwable  {
      // Undeclared exception!
      try {
        PolicyInformation.getInstance((Object) "BER");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in getInstance
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      DERSequence dERSequence0 = new DERSequence((DEREncodable) null);
      PolicyInformation policyInformation0 = new PolicyInformation((ASN1Sequence) dERSequence0);
      assertNotNull(policyInformation0);
      
      DERSequence dERSequence1 = (DERSequence)policyInformation0.getDERObject();
      assertEquals("[null]", dERSequence1.toString());
  }
}
