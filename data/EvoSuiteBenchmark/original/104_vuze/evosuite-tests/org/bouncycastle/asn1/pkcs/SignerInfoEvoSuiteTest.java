/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.pkcs;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.bouncycastle.asn1.ASN1OctetString;
import org.bouncycastle.asn1.ASN1Set;
import org.bouncycastle.asn1.BERConstructedOctetString;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DERInteger;
import org.bouncycastle.asn1.DERObjectIdentifier;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.DERSet;
import org.bouncycastle.asn1.pkcs.IssuerAndSerialNumber;
import org.bouncycastle.asn1.pkcs.SignerInfo;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.asn1.x509.X509Name;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SignerInfoEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Vector<DERInteger> vector0 = new Vector<DERInteger>();
      X509Name x509Name0 = new X509Name(vector0, vector0);
      byte[] byteArray0 = new byte[10];
      DERInteger dERInteger0 = new DERInteger(byteArray0);
      IssuerAndSerialNumber issuerAndSerialNumber0 = new IssuerAndSerialNumber(x509Name0, dERInteger0);
      DERObjectIdentifier dERObjectIdentifier0 = X509Name.COUNTRY_OF_RESIDENCE;
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier(dERObjectIdentifier0, (DEREncodable) dERInteger0);
      DERSet dERSet0 = new DERSet();
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString((DEREncodable) algorithmIdentifier0);
      SignerInfo signerInfo0 = new SignerInfo(dERInteger0, issuerAndSerialNumber0, algorithmIdentifier0, (ASN1Set) null, algorithmIdentifier0, (ASN1OctetString) bERConstructedOctetString0, (ASN1Set) dERSet0);
      IssuerAndSerialNumber issuerAndSerialNumber1 = signerInfo0.getIssuerAndSerialNumber();
      assertSame(issuerAndSerialNumber1, issuerAndSerialNumber0);
  }

  @Test
  public void test1()  throws Throwable  {
      Vector<DERInteger> vector0 = new Vector<DERInteger>();
      X509Name x509Name0 = new X509Name(vector0, vector0);
      byte[] byteArray0 = new byte[10];
      DERInteger dERInteger0 = new DERInteger(byteArray0);
      IssuerAndSerialNumber issuerAndSerialNumber0 = new IssuerAndSerialNumber(x509Name0, dERInteger0);
      DERObjectIdentifier dERObjectIdentifier0 = X509Name.COUNTRY_OF_RESIDENCE;
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier(dERObjectIdentifier0, (DEREncodable) dERInteger0);
      DERSet dERSet0 = new DERSet();
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString((DEREncodable) algorithmIdentifier0);
      SignerInfo signerInfo0 = new SignerInfo(dERInteger0, issuerAndSerialNumber0, algorithmIdentifier0, (ASN1Set) dERSet0, algorithmIdentifier0, (ASN1OctetString) bERConstructedOctetString0, (ASN1Set) dERSet0);
      AlgorithmIdentifier algorithmIdentifier1 = signerInfo0.getDigestAlgorithm();
      assertSame(algorithmIdentifier1, algorithmIdentifier0);
  }

  @Test
  public void test2()  throws Throwable  {
      Vector<DERInteger> vector0 = new Vector<DERInteger>();
      X509Name x509Name0 = new X509Name(vector0, vector0);
      byte[] byteArray0 = new byte[10];
      DERInteger dERInteger0 = new DERInteger(byteArray0);
      IssuerAndSerialNumber issuerAndSerialNumber0 = new IssuerAndSerialNumber(x509Name0, dERInteger0);
      DERObjectIdentifier dERObjectIdentifier0 = X509Name.COUNTRY_OF_RESIDENCE;
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier(dERObjectIdentifier0, (DEREncodable) dERInteger0);
      DERSet dERSet0 = new DERSet();
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString((DEREncodable) algorithmIdentifier0);
      SignerInfo signerInfo0 = new SignerInfo(dERInteger0, issuerAndSerialNumber0, algorithmIdentifier0, (ASN1Set) null, algorithmIdentifier0, (ASN1OctetString) bERConstructedOctetString0, (ASN1Set) dERSet0);
      BERConstructedOctetString bERConstructedOctetString1 = (BERConstructedOctetString)signerInfo0.getEncryptedDigest();
      assertEquals("#301606082b06010505070905020a00000000000000000000", bERConstructedOctetString1.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      Vector<DERInteger> vector0 = new Vector<DERInteger>();
      X509Name x509Name0 = new X509Name(vector0, vector0);
      byte[] byteArray0 = new byte[10];
      DERInteger dERInteger0 = new DERInteger(byteArray0);
      IssuerAndSerialNumber issuerAndSerialNumber0 = new IssuerAndSerialNumber(x509Name0, dERInteger0);
      DERObjectIdentifier dERObjectIdentifier0 = X509Name.COUNTRY_OF_RESIDENCE;
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier(dERObjectIdentifier0, (DEREncodable) dERInteger0);
      DERSet dERSet0 = new DERSet();
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString((DEREncodable) algorithmIdentifier0);
      SignerInfo signerInfo0 = new SignerInfo(dERInteger0, issuerAndSerialNumber0, algorithmIdentifier0, (ASN1Set) dERSet0, algorithmIdentifier0, (ASN1OctetString) bERConstructedOctetString0, (ASN1Set) dERSet0);
      AlgorithmIdentifier algorithmIdentifier1 = signerInfo0.getDigestEncryptionAlgorithm();
      assertSame(algorithmIdentifier1, algorithmIdentifier0);
  }

  @Test
  public void test4()  throws Throwable  {
      Vector<DERInteger> vector0 = new Vector<DERInteger>();
      X509Name x509Name0 = new X509Name(vector0, vector0);
      byte[] byteArray0 = new byte[10];
      DERInteger dERInteger0 = new DERInteger(byteArray0);
      IssuerAndSerialNumber issuerAndSerialNumber0 = new IssuerAndSerialNumber(x509Name0, dERInteger0);
      DERObjectIdentifier dERObjectIdentifier0 = X509Name.COUNTRY_OF_RESIDENCE;
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier(dERObjectIdentifier0, (DEREncodable) dERInteger0);
      DERSet dERSet0 = new DERSet();
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString((DEREncodable) algorithmIdentifier0);
      SignerInfo signerInfo0 = new SignerInfo(dERInteger0, issuerAndSerialNumber0, algorithmIdentifier0, (ASN1Set) dERSet0, algorithmIdentifier0, (ASN1OctetString) bERConstructedOctetString0, (ASN1Set) dERSet0);
      DERSet dERSet1 = (DERSet)signerInfo0.getUnauthenticatedAttributes();
      assertSame(dERSet0, dERSet1);
  }

  @Test
  public void test5()  throws Throwable  {
      Vector<DERInteger> vector0 = new Vector<DERInteger>();
      X509Name x509Name0 = new X509Name(vector0, vector0);
      byte[] byteArray0 = new byte[10];
      DERInteger dERInteger0 = new DERInteger(byteArray0);
      IssuerAndSerialNumber issuerAndSerialNumber0 = new IssuerAndSerialNumber(x509Name0, dERInteger0);
      DERObjectIdentifier dERObjectIdentifier0 = X509Name.COUNTRY_OF_RESIDENCE;
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier(dERObjectIdentifier0, (DEREncodable) dERInteger0);
      DERSet dERSet0 = new DERSet();
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString((DEREncodable) algorithmIdentifier0);
      SignerInfo signerInfo0 = new SignerInfo(dERInteger0, issuerAndSerialNumber0, algorithmIdentifier0, (ASN1Set) null, algorithmIdentifier0, (ASN1OctetString) bERConstructedOctetString0, (ASN1Set) dERSet0);
      DERSet dERSet1 = (DERSet)signerInfo0.getAuthenticatedAttributes();
      assertNull(dERSet1);
  }

  @Test
  public void test6()  throws Throwable  {
      Vector<DERInteger> vector0 = new Vector<DERInteger>();
      X509Name x509Name0 = new X509Name(vector0, vector0);
      byte[] byteArray0 = new byte[10];
      DERInteger dERInteger0 = new DERInteger(byteArray0);
      IssuerAndSerialNumber issuerAndSerialNumber0 = new IssuerAndSerialNumber(x509Name0, dERInteger0);
      DERObjectIdentifier dERObjectIdentifier0 = X509Name.COUNTRY_OF_RESIDENCE;
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier(dERObjectIdentifier0, (DEREncodable) dERInteger0);
      DERSet dERSet0 = new DERSet();
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString((DEREncodable) algorithmIdentifier0);
      SignerInfo signerInfo0 = new SignerInfo(dERInteger0, issuerAndSerialNumber0, algorithmIdentifier0, (ASN1Set) null, algorithmIdentifier0, (ASN1OctetString) bERConstructedOctetString0, (ASN1Set) dERSet0);
      DERInteger dERInteger1 = signerInfo0.getVersion();
      assertSame(dERInteger0, dERInteger1);
  }

  @Test
  public void test7()  throws Throwable  {
      BERSequence bERSequence0 = new BERSequence();
      // Undeclared exception!
      try {
        SignerInfo.getInstance((Object) bERSequence0);
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
        /*
         * Vector Enumeration
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try {
        SignerInfo.getInstance((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in factory
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      Vector<DERInteger> vector0 = new Vector<DERInteger>();
      X509Name x509Name0 = new X509Name(vector0, vector0);
      byte[] byteArray0 = new byte[10];
      DERInteger dERInteger0 = new DERInteger(byteArray0);
      IssuerAndSerialNumber issuerAndSerialNumber0 = new IssuerAndSerialNumber(x509Name0, dERInteger0);
      DERObjectIdentifier dERObjectIdentifier0 = X509Name.COUNTRY_OF_RESIDENCE;
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier(dERObjectIdentifier0, (DEREncodable) dERInteger0);
      DERSet dERSet0 = new DERSet();
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString((DEREncodable) algorithmIdentifier0);
      SignerInfo signerInfo0 = new SignerInfo(dERInteger0, issuerAndSerialNumber0, algorithmIdentifier0, (ASN1Set) null, algorithmIdentifier0, (ASN1OctetString) bERConstructedOctetString0, (ASN1Set) dERSet0);
      DERSequence dERSequence0 = (DERSequence)signerInfo0.getDERObject();
      assertEquals(6, dERSequence0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      Vector<DERInteger> vector0 = new Vector<DERInteger>();
      X509Name x509Name0 = new X509Name(vector0, vector0);
      byte[] byteArray0 = new byte[10];
      DERInteger dERInteger0 = new DERInteger(byteArray0);
      IssuerAndSerialNumber issuerAndSerialNumber0 = new IssuerAndSerialNumber(x509Name0, dERInteger0);
      DERObjectIdentifier dERObjectIdentifier0 = X509Name.COUNTRY_OF_RESIDENCE;
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier(dERObjectIdentifier0, (DEREncodable) dERInteger0);
      DERSet dERSet0 = new DERSet();
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString((DEREncodable) algorithmIdentifier0);
      SignerInfo signerInfo0 = new SignerInfo(dERInteger0, issuerAndSerialNumber0, algorithmIdentifier0, (ASN1Set) dERSet0, algorithmIdentifier0, (ASN1OctetString) bERConstructedOctetString0, (ASN1Set) dERSet0);
      DERSequence dERSequence0 = (DERSequence)signerInfo0.getDERObject();
      assertEquals(7, dERSequence0.size());
  }
}
