/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import org.bouncycastle.asn1.ASN1StreamParser;
import org.bouncycastle.asn1.BERTaggedObjectParser;
import org.bouncycastle.asn1.DERObjectIdentifier;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ASN1StreamParserEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ASN1StreamParser aSN1StreamParser0 = new ASN1StreamParser(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = (ByteArrayInputStream)aSN1StreamParser0.getParentStream();
      assertEquals(0, byteArrayInputStream0.read());
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ASN1StreamParser aSN1StreamParser0 = new ASN1StreamParser(byteArray0);
      ASN1StreamParser aSN1StreamParser1 = new ASN1StreamParser(aSN1StreamParser0._in);
      assertNotSame(aSN1StreamParser1, aSN1StreamParser0);
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ASN1StreamParser aSN1StreamParser0 = new ASN1StreamParser(byteArray0);
      aSN1StreamParser0.readObject();
      try {
        aSN1StreamParser0.readObject();
        fail("Expecting exception: EOFException");
      } catch(EOFException e) {
        /*
         * EOF found when length expected
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte) (-52);
      ASN1StreamParser aSN1StreamParser0 = new ASN1StreamParser(byteArray0);
      try {
        aSN1StreamParser0.readObject();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * DER length more than 4 bytes
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)55, (-1051));
      ASN1StreamParser aSN1StreamParser0 = new ASN1StreamParser((InputStream) byteArrayInputStream0, (int) (byte)113);
      aSN1StreamParser0.readObject();
      try {
        aSN1StreamParser0.readObject();
        fail("Expecting exception: EOFException");
      } catch(EOFException e) {
        /*
         * attempt to read past end of file.
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-1);
      ASN1StreamParser aSN1StreamParser0 = new ASN1StreamParser(byteArray0);
      BERTaggedObjectParser bERTaggedObjectParser0 = (BERTaggedObjectParser)aSN1StreamParser0.readObject();
      assertNotNull(bERTaggedObjectParser0);
      assertEquals(0, bERTaggedObjectParser0.getTagNo());
      
      BERTaggedObjectParser bERTaggedObjectParser1 = (BERTaggedObjectParser)aSN1StreamParser0.readObject();
      assertEquals(true, bERTaggedObjectParser1.isConstructed());
      assertNotNull(bERTaggedObjectParser1);
      assertEquals(0, bERTaggedObjectParser1.getTagNo());
  }

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-67);
      ASN1StreamParser aSN1StreamParser0 = new ASN1StreamParser(byteArray0);
      BERTaggedObjectParser bERTaggedObjectParser0 = (BERTaggedObjectParser)aSN1StreamParser0.readObject();
      assertEquals(29, bERTaggedObjectParser0.getTagNo());
      assertNotNull(bERTaggedObjectParser0);
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      ASN1StreamParser aSN1StreamParser0 = new ASN1StreamParser(byteArray0);
      aSN1StreamParser0.readObject();
      try {
        aSN1StreamParser0.readObject();
        fail("Expecting exception: EOFException");
      } catch(EOFException e) {
        /*
         * EOF encountered inside tag value.
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      ASN1StreamParser aSN1StreamParser0 = new ASN1StreamParser(byteArray0);
      DERObjectIdentifier dERObjectIdentifier0 = (DERObjectIdentifier)aSN1StreamParser0.readObject();
      assertNotNull(dERObjectIdentifier0);
      assertEquals("", dERObjectIdentifier0.getId());
  }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      ASN1StreamParser aSN1StreamParser0 = new ASN1StreamParser(byteArray0);
      BERTaggedObjectParser bERTaggedObjectParser0 = (BERTaggedObjectParser)aSN1StreamParser0.readObject();
      assertNotNull(bERTaggedObjectParser0);
      assertEquals(8, bERTaggedObjectParser0.getTagNo());
  }

  @Test
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)16;
      ASN1StreamParser aSN1StreamParser0 = new ASN1StreamParser(byteArray0);
      BERTaggedObjectParser bERTaggedObjectParser0 = (BERTaggedObjectParser)aSN1StreamParser0.readObject();
      assertNotNull(bERTaggedObjectParser0);
  }

  @Test
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[0] = (byte)17;
      ASN1StreamParser aSN1StreamParser0 = new ASN1StreamParser(byteArray0);
      // Undeclared exception!
      try {
        aSN1StreamParser0.readObject();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * cannot encode object added to SET
         */
      }
  }
}
