/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x509;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.math.BigInteger;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERTaggedObject;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.x509.GeneralName;
import org.bouncycastle.asn1.x509.GeneralSubtree;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class GeneralSubtreeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      GeneralSubtree generalSubtree0 = new GeneralSubtree((GeneralName) null);
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(false, (-10), (DEREncodable) generalSubtree0);
      GeneralSubtree generalSubtree1 = GeneralSubtree.getInstance((ASN1TaggedObject) bERTaggedObject0, false);
      assertNotNull(generalSubtree1);
  }

  @Test
  public void test1()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      GeneralSubtree generalSubtree0 = new GeneralSubtree((GeneralName) null, bigInteger0, bigInteger0);
      GeneralName generalName0 = generalSubtree0.getBase();
      assertNull(generalName0);
  }

  @Test
  public void test2()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      GeneralSubtree generalSubtree0 = new GeneralSubtree((GeneralName) null, bigInteger0, bigInteger0);
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(false, (-10), (DEREncodable) generalSubtree0);
      GeneralSubtree generalSubtree1 = GeneralSubtree.getInstance((ASN1TaggedObject) bERTaggedObject0, false);
      assertNotNull(generalSubtree1);
  }

  @Test
  public void test3()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      GeneralSubtree generalSubtree0 = new GeneralSubtree((GeneralName) null, bigInteger0, bigInteger0);
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(0, (DEREncodable) generalSubtree0);
      GeneralSubtree generalSubtree1 = GeneralSubtree.getInstance((ASN1TaggedObject) bERTaggedObject0, true);
      assertNotNull(generalSubtree1);
  }

  @Test
  public void test4()  throws Throwable  {
      GeneralSubtree generalSubtree0 = new GeneralSubtree((GeneralName) null);
      GeneralSubtree generalSubtree1 = GeneralSubtree.getInstance((Object) generalSubtree0);
      assertSame(generalSubtree1, generalSubtree0);
  }

  @Test
  public void test5()  throws Throwable  {
      GeneralSubtree generalSubtree0 = GeneralSubtree.getInstance((Object) null);
      assertNull(generalSubtree0);
  }

  @Test
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try {
        GeneralSubtree.getInstance((Object) "DER");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in getInstance
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      GeneralSubtree generalSubtree0 = new GeneralSubtree((GeneralName) null, bigInteger0, bigInteger0);
      BigInteger bigInteger1 = generalSubtree0.getMinimum();
      assertEquals("1", bigInteger1.toString());
      assertNotNull(bigInteger1);
  }

  @Test
  public void test8()  throws Throwable  {
      DERSequence dERSequence0 = new DERSequence((DEREncodable) null);
      GeneralSubtree generalSubtree0 = new GeneralSubtree((ASN1Sequence) dERSequence0);
      BigInteger bigInteger0 = generalSubtree0.getMinimum();
      assertEquals(0, bigInteger0.bitCount());
  }

  @Test
  public void test9()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      GeneralSubtree generalSubtree0 = new GeneralSubtree((GeneralName) null, bigInteger0, bigInteger0);
      BigInteger bigInteger1 = generalSubtree0.getMaximum();
      assertEquals(1, bigInteger1.intValue());
  }

  @Test
  public void test10()  throws Throwable  {
      DERSequence dERSequence0 = new DERSequence((DEREncodable) null);
      GeneralSubtree generalSubtree0 = new GeneralSubtree((ASN1Sequence) dERSequence0);
      BigInteger bigInteger0 = generalSubtree0.getMaximum();
      assertNull(bigInteger0);
  }
}
