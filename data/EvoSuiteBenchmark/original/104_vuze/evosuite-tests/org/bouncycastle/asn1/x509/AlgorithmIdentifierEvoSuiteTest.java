/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x509;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.BERTaggedObject;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DERObjectIdentifier;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AlgorithmIdentifierEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier((DERObjectIdentifier) null, (DEREncodable) null);
      DEREncodable dEREncodable0 = algorithmIdentifier0.getParameters();
      assertNull(dEREncodable0);
  }

  @Test
  public void test1()  throws Throwable  {
      BERSequence bERSequence0 = new BERSequence((DEREncodable) null);
      AlgorithmIdentifier algorithmIdentifier0 = AlgorithmIdentifier.getInstance((Object) bERSequence0);
      DERObjectIdentifier dERObjectIdentifier0 = algorithmIdentifier0.getObjectId();
      assertNull(dERObjectIdentifier0);
  }

  @Test
  public void test2()  throws Throwable  {
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier((DERObjectIdentifier) null);
      assertNotNull(algorithmIdentifier0);
  }

  @Test
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try {
        AlgorithmIdentifier.getInstance((Object) "DER");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * string DER not an OID
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(494);
      // Undeclared exception!
      try {
        AlgorithmIdentifier.getInstance((ASN1TaggedObject) bERTaggedObject0, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Bad sequence size: 0
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      AlgorithmIdentifier algorithmIdentifier0 = AlgorithmIdentifier.getInstance((Object) null);
      assertNull(algorithmIdentifier0);
  }

  @Test
  public void test6()  throws Throwable  {
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier((DERObjectIdentifier) null, (DEREncodable) null);
      AlgorithmIdentifier algorithmIdentifier1 = AlgorithmIdentifier.getInstance((Object) algorithmIdentifier0);
      assertSame(algorithmIdentifier0, algorithmIdentifier1);
  }

  @Test
  public void test7()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try {
        AlgorithmIdentifier.getInstance(object0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in factory
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      ASN1Encodable[] aSN1EncodableArray0 = new ASN1Encodable[3];
      DERSequence dERSequence0 = new DERSequence(aSN1EncodableArray0);
      AlgorithmIdentifier algorithmIdentifier0 = null;
      try {
        algorithmIdentifier0 = new AlgorithmIdentifier((ASN1Sequence) dERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Bad sequence size: 3
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      ASN1Encodable[] aSN1EncodableArray0 = new ASN1Encodable[2];
      DERSequence dERSequence0 = new DERSequence(aSN1EncodableArray0);
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier((ASN1Sequence) dERSequence0);
      assertNotNull(algorithmIdentifier0);
  }

  @Test
  public void test10()  throws Throwable  {
      BERSequence bERSequence0 = new BERSequence((DEREncodable) null);
      AlgorithmIdentifier algorithmIdentifier0 = AlgorithmIdentifier.getInstance((Object) bERSequence0);
      assertNotNull(algorithmIdentifier0);
      
      DERSequence dERSequence0 = (DERSequence)algorithmIdentifier0.getDERObject();
      assertEquals(1, dERSequence0.size());
  }

  @Test
  public void test11()  throws Throwable  {
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier((DERObjectIdentifier) null, (DEREncodable) null);
      byte[] byteArray0 = algorithmIdentifier0.getEncoded();
      assertNotNull(byteArray0);
  }
}
