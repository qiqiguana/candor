/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x509;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.bouncycastle.asn1.ASN1OctetString;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERConstructedOctetString;
import org.bouncycastle.asn1.BERTaggedObject;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.asn1.x509.SubjectKeyIdentifier;
import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;
import org.bouncycastle.asn1.x509.X509Extension;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SubjectKeyIdentifierEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      SubjectKeyIdentifier subjectKeyIdentifier0 = new SubjectKeyIdentifier(byteArray0);
      byte[] byteArray1 = subjectKeyIdentifier0.getKeyIdentifier();
      assertSame(byteArray0, byteArray1);
  }

  @Test
  public void test1()  throws Throwable  {
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject((-107));
      SubjectKeyIdentifier subjectKeyIdentifier0 = SubjectKeyIdentifier.getInstance((ASN1TaggedObject) bERTaggedObject0, false);
      assertNotNull(subjectKeyIdentifier0);
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      SubjectKeyIdentifier subjectKeyIdentifier0 = new SubjectKeyIdentifier(byteArray0);
      int int0 = subjectKeyIdentifier0.hashCode();
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      SubjectKeyIdentifier subjectKeyIdentifier0 = new SubjectKeyIdentifier(byteArray0);
      SubjectKeyIdentifier subjectKeyIdentifier1 = SubjectKeyIdentifier.getInstance((Object) subjectKeyIdentifier0);
      assertSame(subjectKeyIdentifier1, subjectKeyIdentifier0);
  }

  @Test
  public void test4()  throws Throwable  {
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo((AlgorithmIdentifier) null, (DEREncodable) null);
      SubjectKeyIdentifier subjectKeyIdentifier0 = SubjectKeyIdentifier.getInstance((Object) subjectPublicKeyInfo0);
      assertNotNull(subjectKeyIdentifier0);
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString(byteArray0);
      X509Extension x509Extension0 = new X509Extension(true, (ASN1OctetString) bERConstructedOctetString0);
      // Undeclared exception!
      try {
        SubjectKeyIdentifier.getInstance((Object) x509Extension0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Invalid SubjectKeyIdentifier: org.bouncycastle.asn1.DERApplicationSpecific
         */
      }
  }
}
