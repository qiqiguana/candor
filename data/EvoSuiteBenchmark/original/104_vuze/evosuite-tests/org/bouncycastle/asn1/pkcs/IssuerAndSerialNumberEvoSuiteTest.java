/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.pkcs;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.math.BigInteger;
import java.util.Hashtable;
import java.util.Vector;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.DERInteger;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.pkcs.IssuerAndSerialNumber;
import org.bouncycastle.asn1.x509.X509DefaultEntryConverter;
import org.bouncycastle.asn1.x509.X509Name;
import org.bouncycastle.asn1.x509.X509NameEntryConverter;
import org.evosuite.testcase.CodeUnderTestException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class IssuerAndSerialNumberEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Vector<ASN1Sequence> vector0 = new Vector<ASN1Sequence>();
      Hashtable<Object, Object> hashtable0 = X509Name.DefaultSymbols;
      X509DefaultEntryConverter x509DefaultEntryConverter0 = new X509DefaultEntryConverter();
      X509Name x509Name0 = new X509Name((Vector) vector0, (Hashtable) hashtable0, (X509NameEntryConverter) x509DefaultEntryConverter0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      IssuerAndSerialNumber issuerAndSerialNumber0 = new IssuerAndSerialNumber(x509Name0, bigInteger0);
      DERInteger dERInteger0 = issuerAndSerialNumber0.getCertificateSerialNumber();
      assertEquals("0", dERInteger0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      Vector<DERInteger> vector0 = new Vector<DERInteger>();
      X509DefaultEntryConverter x509DefaultEntryConverter0 = new X509DefaultEntryConverter();
      X509Name x509Name0 = new X509Name((Vector) vector0, (Vector) vector0, (X509NameEntryConverter) x509DefaultEntryConverter0);
      BigInteger bigInteger0 = BigInteger.TEN;
      IssuerAndSerialNumber issuerAndSerialNumber0 = new IssuerAndSerialNumber(x509Name0, bigInteger0);
      X509Name x509Name1 = issuerAndSerialNumber0.getName();
      assertSame(x509Name1, x509Name0);
  }

  @Test
  public void test2()  throws Throwable  {
      Vector<DERInteger> vector0 = new Vector<DERInteger>();
      X509DefaultEntryConverter x509DefaultEntryConverter0 = new X509DefaultEntryConverter();
      X509Name x509Name0 = new X509Name((Vector) vector0, (Vector) vector0, (X509NameEntryConverter) x509DefaultEntryConverter0);
      BigInteger bigInteger0 = BigInteger.TEN;
      IssuerAndSerialNumber issuerAndSerialNumber0 = new IssuerAndSerialNumber(x509Name0, bigInteger0);
      DERSequence dERSequence0 = (DERSequence)issuerAndSerialNumber0.getDERObject();
      assertEquals("[, 10]", dERSequence0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      DERSequence dERSequence0 = new DERSequence();
      // Undeclared exception!
      try {
        IssuerAndSerialNumber.getInstance((Object) dERSequence0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 0 >= 0
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Vector<DERInteger> vector0 = new Vector<DERInteger>();
      X509DefaultEntryConverter x509DefaultEntryConverter0 = new X509DefaultEntryConverter();
      X509Name x509Name0 = new X509Name((Vector) vector0, (Vector) vector0, (X509NameEntryConverter) x509DefaultEntryConverter0);
      BigInteger bigInteger0 = BigInteger.TEN;
      IssuerAndSerialNumber issuerAndSerialNumber0 = new IssuerAndSerialNumber(x509Name0, bigInteger0);
  }

  @Test
  public void test5()  throws Throwable  {
      Vector<DERInteger> vector0 = new Vector<DERInteger>();
      X509Name x509Name0 = new X509Name(vector0, vector0);
      byte[] byteArray0 = new byte[5];
      DERInteger dERInteger0 = new DERInteger(byteArray0);
      IssuerAndSerialNumber issuerAndSerialNumber0 = new IssuerAndSerialNumber(x509Name0, dERInteger0);
      IssuerAndSerialNumber issuerAndSerialNumber1 = IssuerAndSerialNumber.getInstance((Object) issuerAndSerialNumber0);
      assertSame(issuerAndSerialNumber0, issuerAndSerialNumber1);
  }

  @Test
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try {
        IssuerAndSerialNumber.getInstance((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in factory
         */
      }
  }
}
