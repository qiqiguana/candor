/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.math.BigInteger;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERConstructedOctetString;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.DERApplicationSpecific;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DEREncodableVector;
import org.bouncycastle.asn1.DEREnumerated;
import org.bouncycastle.asn1.DERObject;
import org.bouncycastle.asn1.DERTaggedObject;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DEREnumeratedEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      DEREnumerated dEREnumerated0 = new DEREnumerated(bigInteger0);
      int int0 = dEREnumerated0.hashCode();
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      DEREnumerated dEREnumerated0 = new DEREnumerated(bigInteger0);
      byte[] byteArray0 = dEREnumerated0.getEncoded("");
      assertNotNull(byteArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      DERApplicationSpecific dERApplicationSpecific0 = new DERApplicationSpecific(50, byteArray0);
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString((DEREncodable) dERApplicationSpecific0);
      DEREnumerated dEREnumerated0 = DEREnumerated.getInstance((Object) bERConstructedOctetString0);
      assertNotNull(dEREnumerated0);
  }

  @Test
  public void test3()  throws Throwable  {
      DEREnumerated dEREnumerated0 = new DEREnumerated(14);
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(14, (DEREncodable) dEREnumerated0);
      DEREnumerated dEREnumerated1 = DEREnumerated.getInstance((ASN1TaggedObject) dERTaggedObject0, true);
      assertSame(dEREnumerated1, dEREnumerated0);
  }

  @Test
  public void test4()  throws Throwable  {
      DEREnumerated dEREnumerated0 = DEREnumerated.getInstance((Object) null);
      assertNull(dEREnumerated0);
  }

  @Test
  public void test5()  throws Throwable  {
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(643);
      // Undeclared exception!
      try {
        DEREnumerated.getInstance((Object) dERTaggedObject0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * illegal object in getInstance: org.bouncycastle.asn1.DERSequence
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      DEREnumerated dEREnumerated0 = new DEREnumerated(bigInteger0);
      boolean boolean0 = dEREnumerated0.asn1Equals((DERObject) dEREnumerated0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      DEREnumerated dEREnumerated0 = new DEREnumerated(bigInteger0);
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      BERSequence bERSequence0 = new BERSequence(dEREncodableVector0);
      boolean boolean0 = dEREnumerated0.asn1Equals((DERObject) bERSequence0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      DEREnumerated dEREnumerated0 = new DEREnumerated((-1022));
      assertNotNull(dEREnumerated0);
      
      DEREnumerated dEREnumerated1 = new DEREnumerated(0);
      boolean boolean0 = dEREnumerated0.asn1Equals((DERObject) dEREnumerated1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      DEREnumerated dEREnumerated0 = new DEREnumerated(bigInteger0);
      DEREnumerated dEREnumerated1 = new DEREnumerated(102);
      assertNotNull(dEREnumerated1);
      
      boolean boolean0 = dEREnumerated1.asn1Equals((DERObject) dEREnumerated0);
      assertFalse(dEREnumerated0.equals(dEREnumerated1));
      assertEquals(false, boolean0);
  }
}
