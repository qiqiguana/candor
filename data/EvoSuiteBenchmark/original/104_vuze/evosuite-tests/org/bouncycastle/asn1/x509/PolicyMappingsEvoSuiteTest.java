/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x509;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Hashtable;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.DERConstructedSequence;
import org.bouncycastle.asn1.x509.PolicyMappings;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PolicyMappingsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DERConstructedSequence dERConstructedSequence0 = new DERConstructedSequence();
      PolicyMappings policyMappings0 = new PolicyMappings((ASN1Sequence) dERConstructedSequence0);
      DERConstructedSequence dERConstructedSequence1 = (DERConstructedSequence)policyMappings0.toASN1Object();
      assertSame(dERConstructedSequence0, dERConstructedSequence1);
  }

  @Test
  public void test1()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PolicyMappings policyMappings0 = new PolicyMappings(hashtable0);
      assertNotNull(policyMappings0);
  }

  @Test
  public void test2()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.put("", "");
      PolicyMappings policyMappings0 = null;
      try {
        policyMappings0 = new PolicyMappings(hashtable0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * string  not an OID
         */
      }
  }
}
