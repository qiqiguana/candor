/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x509;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.bouncycastle.asn1.ASN1OctetString;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERConstructedOctetString;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.BERTaggedObject;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DEREncodableVector;
import org.bouncycastle.asn1.DERGeneralizedTime;
import org.bouncycastle.asn1.DERNull;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.x509.PrivateKeyUsagePeriod;
import org.bouncycastle.asn1.x509.X509Extension;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PrivateKeyUsagePeriodEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      BERSequence bERSequence0 = new BERSequence(dEREncodableVector0);
      PrivateKeyUsagePeriod privateKeyUsagePeriod0 = PrivateKeyUsagePeriod.getInstance((Object) bERSequence0);
      DERGeneralizedTime dERGeneralizedTime0 = privateKeyUsagePeriod0.getNotAfter();
      assertNull(dERGeneralizedTime0);
  }

  @Test
  public void test1()  throws Throwable  {
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      BERSequence bERSequence0 = new BERSequence(dEREncodableVector0);
      PrivateKeyUsagePeriod privateKeyUsagePeriod0 = PrivateKeyUsagePeriod.getInstance((Object) bERSequence0);
      DERGeneralizedTime dERGeneralizedTime0 = privateKeyUsagePeriod0.getNotBefore();
      assertNull(dERGeneralizedTime0);
  }

  @Test
  public void test2()  throws Throwable  {
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(11);
      BERConstructedOctetString bERConstructedOctetString0 = (BERConstructedOctetString)ASN1OctetString.getInstance((ASN1TaggedObject) dERTaggedObject0, true);
      X509Extension x509Extension0 = new X509Extension(true, (ASN1OctetString) bERConstructedOctetString0);
      // Undeclared exception!
      try {
        PrivateKeyUsagePeriod.getInstance((Object) x509Extension0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in getInstance
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      DERNull dERNull0 = DERNull.INSTANCE;
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject((-1), (DEREncodable) dERNull0);
      BERSequence bERSequence0 = new BERSequence((DEREncodable) bERTaggedObject0);
      PrivateKeyUsagePeriod privateKeyUsagePeriod0 = PrivateKeyUsagePeriod.getInstance((Object) bERSequence0);
      assertNotNull(privateKeyUsagePeriod0);
  }

  @Test
  public void test4()  throws Throwable  {
      DERNull dERNull0 = DERNull.INSTANCE;
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(0, (DEREncodable) dERNull0);
      BERSequence bERSequence0 = new BERSequence((DEREncodable) bERTaggedObject0);
      // Undeclared exception!
      try {
        PrivateKeyUsagePeriod.getInstance((Object) bERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * illegal object in getInstance: org.bouncycastle.asn1.DERNull
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      DERNull dERNull0 = DERNull.INSTANCE;
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(1, (DEREncodable) dERNull0);
      BERSequence bERSequence0 = new BERSequence((DEREncodable) bERTaggedObject0);
      // Undeclared exception!
      try {
        PrivateKeyUsagePeriod.getInstance((Object) bERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * illegal object in getInstance: org.bouncycastle.asn1.DERNull
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      BERSequence bERSequence0 = new BERSequence(dEREncodableVector0);
      PrivateKeyUsagePeriod privateKeyUsagePeriod0 = PrivateKeyUsagePeriod.getInstance((Object) bERSequence0);
      assertNotNull(privateKeyUsagePeriod0);
      
      DERSequence dERSequence0 = (DERSequence)privateKeyUsagePeriod0.getDERObject();
      assertEquals("[]", dERSequence0.toString());
  }
}
