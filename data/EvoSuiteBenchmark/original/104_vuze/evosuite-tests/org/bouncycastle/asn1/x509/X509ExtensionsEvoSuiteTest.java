/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x509;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Vector;
import org.bouncycastle.asn1.ASN1OctetString;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERConstructedOctetString;
import org.bouncycastle.asn1.BERConstructedSequence;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.BERTaggedObject;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DERObjectIdentifier;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.x509.X509Extension;
import org.bouncycastle.asn1.x509.X509Extensions;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class X509ExtensionsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Hashtable<Object, X509Extension> hashtable0 = new Hashtable<Object, X509Extension>();
      DERObjectIdentifier dERObjectIdentifier0 = X509Extensions.DeltaCRLIndicator;
      X509Extensions x509Extensions0 = new X509Extensions(hashtable0);
      X509Extension x509Extension0 = x509Extensions0.getExtension(dERObjectIdentifier0);
      assertNull(x509Extension0);
  }

  @Test
  public void test1()  throws Throwable  {
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(1584);
      X509Extensions x509Extensions0 = X509Extensions.getInstance((Object) dERTaggedObject0);
      Enumeration<Object> enumeration0 = x509Extensions0.oids();
      assertEquals(false, enumeration0.hasMoreElements());
  }

  @Test
  public void test2()  throws Throwable  {
      X509Extensions x509Extensions0 = X509Extensions.getInstance((Object) null);
      assertNull(x509Extensions0);
  }

  @Test
  public void test3()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      X509Extensions x509Extensions0 = new X509Extensions(vector0, vector0);
      X509Extensions x509Extensions1 = X509Extensions.getInstance((Object) x509Extensions0);
      assertSame(x509Extensions0, x509Extensions1);
  }

  @Test
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try {
        X509Extensions.getInstance((Object) "DER");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * illegal object in getInstance: java.lang.String
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      BERSequence bERSequence0 = new BERSequence((DEREncodable) bERConstructedSequence0);
      X509Extensions x509Extensions0 = null;
      try {
        x509Extensions0 = new X509Extensions((ASN1Sequence) bERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Bad sequence size: 0
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      Hashtable<Object, X509Extension> hashtable0 = new Hashtable<Object, X509Extension>();
      DERObjectIdentifier dERObjectIdentifier0 = X509Extensions.DeltaCRLIndicator;
      byte[] byteArray0 = new byte[12];
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString(byteArray0);
      X509Extension x509Extension0 = new X509Extension(true, (ASN1OctetString) bERConstructedOctetString0);
      hashtable0.put((Object) dERObjectIdentifier0, x509Extension0);
      X509Extensions x509Extensions0 = new X509Extensions(hashtable0);
      assertNotNull(x509Extensions0);
      
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(true, (int) (byte)32, (DEREncodable) x509Extensions0);
      X509Extensions x509Extensions1 = X509Extensions.getInstance((ASN1TaggedObject) bERTaggedObject0, true);
      assertTrue(x509Extensions0.equals(x509Extensions1));
      assertNotNull(x509Extensions1);
  }

  @Test
  public void test7()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      Hashtable<Object, X509Extension> hashtable0 = new Hashtable<Object, X509Extension>();
      bERConstructedSequence0.addObject((DEREncodable) bERConstructedSequence0);
      X509Extensions x509Extensions0 = new X509Extensions(hashtable0);
      BERSequence bERSequence0 = new BERSequence((DEREncodable) bERConstructedSequence0);
      bERConstructedSequence0.addObject((DEREncodable) x509Extensions0);
      X509Extensions x509Extensions1 = null;
      try {
        x509Extensions1 = new X509Extensions((ASN1Sequence) bERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * illegal object in getInstance: org.bouncycastle.asn1.x509.X509Extensions
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      Vector<X509Extension> vector0 = new Vector<X509Extension>();
      Hashtable<ASN1Sequence, DERObjectIdentifier> hashtable0 = new Hashtable<ASN1Sequence, DERObjectIdentifier>();
      X509Extensions x509Extensions0 = new X509Extensions((Vector) vector0, (Hashtable) hashtable0);
      assertNotNull(x509Extensions0);
  }

  @Test
  public void test9()  throws Throwable  {
      Vector<ASN1TaggedObject> vector0 = new Vector<ASN1TaggedObject>();
      vector0.add((ASN1TaggedObject) null);
      X509Extensions x509Extensions0 = null;
      try {
        x509Extensions0 = new X509Extensions(vector0, vector0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Hashtable<Object, X509Extension> hashtable0 = new Hashtable<Object, X509Extension>();
      DERObjectIdentifier dERObjectIdentifier0 = X509Extensions.DeltaCRLIndicator;
      byte[] byteArray0 = new byte[12];
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString(byteArray0);
      X509Extension x509Extension0 = new X509Extension(true, (ASN1OctetString) bERConstructedOctetString0);
      hashtable0.put((Object) dERObjectIdentifier0, x509Extension0);
      X509Extensions x509Extensions0 = new X509Extensions(hashtable0);
      assertNotNull(x509Extensions0);
      
      Vector<ASN1TaggedObject> vector0 = new Vector<ASN1TaggedObject>();
      X509Extensions x509Extensions1 = new X509Extensions(vector0, vector0);
      assertNotNull(x509Extensions1);
      
      boolean boolean0 = x509Extensions0.equivalent(x509Extensions1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      Hashtable<Object, X509Extension> hashtable0 = new Hashtable<Object, X509Extension>();
      DERObjectIdentifier dERObjectIdentifier0 = X509Extensions.DeltaCRLIndicator;
      byte[] byteArray0 = new byte[12];
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString(byteArray0);
      X509Extension x509Extension0 = new X509Extension(true, (ASN1OctetString) bERConstructedOctetString0);
      hashtable0.put((Object) dERObjectIdentifier0, x509Extension0);
      X509Extensions x509Extensions0 = new X509Extensions(hashtable0);
      assertNotNull(x509Extensions0);
      
      boolean boolean0 = x509Extensions0.equivalent(x509Extensions0);
      assertEquals(true, boolean0);
  }
}
