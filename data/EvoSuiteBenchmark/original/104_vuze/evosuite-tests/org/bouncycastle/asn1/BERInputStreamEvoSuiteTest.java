/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import org.bouncycastle.asn1.BERInputStream;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BERInputStreamEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BERInputStream bERInputStream0 = new BERInputStream((InputStream) byteArrayInputStream0);
      bERInputStream0.readObject();
      bERInputStream0.readObject();
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-128);
      byteArray0[8] = (byte) (-128);
      byteArray0[10] = (byte) (-128);
      byteArray0[12] = (byte) (-128);
      byteArray0[14] = (byte) (-128);
      byteArray0[16] = (byte) (-128);
      bERInputStream0.read();
      byteArray0[17] = (byte)36;
      byteArray0[19] = (byte)81;
      byteArray0[21] = (byte)81;
      bERInputStream0.readObject();
      assertEquals(6, bERInputStream0.available());
      assertEquals(5, byteArrayInputStream0.available());
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BERInputStream bERInputStream0 = new BERInputStream((InputStream) byteArrayInputStream0);
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-128);
      bERInputStream0.readObject();
      assertEquals(16, byteArrayInputStream0.available());
      assertEquals(17, bERInputStream0.available());
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BERInputStream bERInputStream0 = new BERInputStream((InputStream) byteArrayInputStream0);
      byteArray0[1] = (byte) (-128);
      byteArray0[0] = (byte)36;
      byteArray0[2] = (byte)36;
      // Undeclared exception!
      try {
        bERInputStream0.readObject();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * org.bouncycastle.asn1.DERUnknownTag found in input should only contain DEROctetString
         */
      }
      assertEquals(16, byteArrayInputStream0.available());
      assertEquals(17, bERInputStream0.available());
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (int) (byte) (-1));
      BERInputStream bERInputStream0 = new BERInputStream((InputStream) byteArrayInputStream0);
      try {
        bERInputStream0.readObject();
        fail("Expecting exception: EOFException");
      } catch(EOFException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[23];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BERInputStream bERInputStream0 = new BERInputStream((InputStream) byteArrayInputStream0);
      byteArray0[1] = (byte) (-128);
      try {
        bERInputStream0.readObject();
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * unknown BER object encountered
         */
      }
      assertEquals(17, bERInputStream0.available());
      assertEquals(16, byteArrayInputStream0.available());
  }
}
