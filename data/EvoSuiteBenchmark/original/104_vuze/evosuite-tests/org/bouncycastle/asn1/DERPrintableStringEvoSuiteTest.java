/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERConstructedOctetString;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.BERTaggedObject;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DEREncodableVector;
import org.bouncycastle.asn1.DERInteger;
import org.bouncycastle.asn1.DERNull;
import org.bouncycastle.asn1.DERObject;
import org.bouncycastle.asn1.DERPrintableString;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DERPrintableStringEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DERPrintableString dERPrintableString0 = new DERPrintableString("GqkA)JW\"{7");
      assertNotNull(dERPrintableString0);
      
      String string0 = dERPrintableString0.toString();
      assertEquals("GqkA)JW\"{7", string0);
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      DERNull dERNull0 = DERNull.INSTANCE;
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(16, (DEREncodable) dERNull0);
      // Undeclared exception!
      try {
        DERPrintableString.getInstance((ASN1TaggedObject) bERTaggedObject0, true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * illegal object in getInstance: org.bouncycastle.asn1.DERNull
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      DERPrintableString dERPrintableString0 = new DERPrintableString(byteArray0);
      assertNotNull(dERPrintableString0);
      
      byte[] byteArray1 = dERPrintableString0.getDEREncoded();
      assertNotNull(byteArray1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", dERPrintableString0.toString());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", dERPrintableString0.getString());
  }

  @Test
  public void test3()  throws Throwable  {
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      BERSequence bERSequence0 = new BERSequence(dEREncodableVector0);
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString((DEREncodable) bERSequence0);
      DERPrintableString dERPrintableString0 = DERPrintableString.getInstance((Object) bERConstructedOctetString0);
      assertNotNull(dERPrintableString0);
      
      int int0 = dERPrintableString0.hashCode();
      assertEquals(1488, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(1, (DEREncodable) null);
      DERPrintableString dERPrintableString0 = DERPrintableString.getInstance((Object) bERTaggedObject0);
      assertNull(dERPrintableString0);
  }

  @Test
  public void test5()  throws Throwable  {
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      BERSequence bERSequence0 = new BERSequence(dEREncodableVector0);
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString((DEREncodable) bERSequence0);
      DERPrintableString dERPrintableString0 = DERPrintableString.getInstance((Object) bERConstructedOctetString0);
      assertNotNull(dERPrintableString0);
      
      DERPrintableString dERPrintableString1 = DERPrintableString.getInstance((Object) dERPrintableString0);
      assertEquals("0\u0000", dERPrintableString0.getString());
      assertEquals("0\u0000", dERPrintableString1.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      DERPrintableString dERPrintableString0 = new DERPrintableString("unknown object in getInstanceFromTagge'", true);
      assertNotNull(dERPrintableString0);
      assertEquals("unknown object in getInstanceFromTagge'", dERPrintableString0.getString());
  }

  @Test
  public void test7()  throws Throwable  {
      DERPrintableString dERPrintableString0 = null;
      try {
        dERPrintableString0 = new DERPrintableString("xy7`1*9w)", true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * string contains illegal characters
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      DERPrintableString dERPrintableString0 = new DERPrintableString("GqkA)JW\"{7");
      assertNotNull(dERPrintableString0);
      
      boolean boolean0 = dERPrintableString0.asn1Equals((DERObject) dERPrintableString0);
      assertEquals(true, boolean0);
      assertEquals("GqkA)JW\"{7", dERPrintableString0.getString());
  }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      DERPrintableString dERPrintableString0 = new DERPrintableString(byteArray0);
      assertNotNull(dERPrintableString0);
      
      DERInteger dERInteger0 = new DERInteger((int) (byte)0);
      boolean boolean0 = dERPrintableString0.asn1Equals((DERObject) dERInteger0);
      assertEquals(false, boolean0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", dERPrintableString0.getString());
  }

  @Test
  public void test10()  throws Throwable  {
      DERPrintableString dERPrintableString0 = null;
      try {
        dERPrintableString0 = new DERPrintableString("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00A0", true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * string contains illegal characters
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      boolean boolean0 = DERPrintableString.isPrintableString("GqkA)JW\"{7");
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      DERPrintableString dERPrintableString0 = null;
      try {
        dERPrintableString0 = new DERPrintableString("~zQ v|%-yg\"5!=", true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * string contains illegal characters
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      boolean boolean0 = DERPrintableString.isPrintableString("f:]gOx\"GJ+5");
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      boolean boolean0 = DERPrintableString.isPrintableString("rnV(m#v");
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      boolean boolean0 = DERPrintableString.isPrintableString("J`a68$t$42r?t");
      assertEquals(false, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      boolean boolean0 = DERPrintableString.isPrintableString("37:-%u");
      assertEquals(false, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      boolean boolean0 = DERPrintableString.isPrintableString("K&(QX'");
      assertEquals(false, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      DERPrintableString dERPrintableString0 = new DERPrintableString("gHSf0,NOBiRwf.", true);
      assertEquals("gHSf0,NOBiRwf.", dERPrintableString0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      boolean boolean0 = DERPrintableString.isPrintableString("WM_,:r%U-`-wdj");
      assertEquals(false, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      boolean boolean0 = DERPrintableString.isPrintableString(">E/");
      assertEquals(false, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      boolean boolean0 = DERPrintableString.isPrintableString("V=:v5v1B");
      assertEquals(true, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      DERPrintableString dERPrintableString0 = null;
      try {
        dERPrintableString0 = new DERPrintableString("Dvqj,(MaGf;'S", true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * string contains illegal characters
         */
      }
  }

  @Test
  public void test23()  throws Throwable  {
      DERPrintableString dERPrintableString0 = null;
      try {
        dERPrintableString0 = new DERPrintableString(")RRo?r}J31#fz<", true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * string contains illegal characters
         */
      }
  }
}
