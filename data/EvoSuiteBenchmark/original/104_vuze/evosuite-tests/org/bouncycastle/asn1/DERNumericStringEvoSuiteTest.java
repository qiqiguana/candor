/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Vector;
import org.bouncycastle.asn1.ASN1OctetString;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERConstructedOctetString;
import org.bouncycastle.asn1.BERTaggedObject;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DERNumericString;
import org.bouncycastle.asn1.DERObject;
import org.bouncycastle.asn1.DERTaggedObject;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DERNumericStringEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DERNumericString dERNumericString0 = new DERNumericString("yyyyMMddHHmmss.SSSS'Z'");
      assertNotNull(dERNumericString0);
      
      byte[] byteArray0 = dERNumericString0.getEncoded();
      assertNotNull(byteArray0);
      assertEquals("yyyyMMddHHmmss.SSSS'Z'", dERNumericString0.getString());
      assertEquals("yyyyMMddHHmmss.SSSS'Z'", dERNumericString0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      DERNumericString dERNumericString0 = new DERNumericString("", true);
      assertNotNull(dERNumericString0);
      
      int int0 = dERNumericString0.hashCode();
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      DERNumericString dERNumericString0 = new DERNumericString("", true);
      assertNotNull(dERNumericString0);
      
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(0, (DEREncodable) dERNumericString0);
      DERNumericString dERNumericString1 = DERNumericString.getInstance((ASN1TaggedObject) dERTaggedObject0, true);
      assertEquals("[0]", dERTaggedObject0.toString());
      assertNotNull(dERNumericString1);
      assertEquals("", dERNumericString1.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      DERNumericString dERNumericString0 = new DERNumericString("", true);
      assertNotNull(dERNumericString0);
      
      String string0 = dERNumericString0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      DERNumericString dERNumericString0 = DERNumericString.getInstance((Object) null);
      assertNull(dERNumericString0);
  }

  @Test
  public void test5()  throws Throwable  {
      LinkedList<ASN1OctetString> linkedList0 = new LinkedList<ASN1OctetString>();
      Vector<ASN1OctetString> vector0 = new Vector<ASN1OctetString>((Collection<? extends ASN1OctetString>) linkedList0);
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString(vector0);
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject((-889), (DEREncodable) bERConstructedOctetString0);
      DERNumericString dERNumericString0 = DERNumericString.getInstance((Object) bERTaggedObject0);
      assertEquals("", dERNumericString0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(1969);
      // Undeclared exception!
      try {
        DERNumericString.getInstance((ASN1TaggedObject) dERTaggedObject0, true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * illegal object in getInstance: org.bouncycastle.asn1.DERSequence
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DERNumericString dERNumericString0 = new DERNumericString("yyyyMMddHHmmss.SSSS'Z'");
      assertNotNull(dERNumericString0);
      
      boolean boolean0 = dERNumericString0.asn1Equals((DERObject) dERNumericString0);
      assertEquals(true, boolean0);
      assertEquals("yyyyMMddHHmmss.SSSS'Z'", dERNumericString0.getString());
  }

  @Test
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      DERNumericString dERNumericString0 = new DERNumericString(byteArray0);
      assertNotNull(dERNumericString0);
      
      dERNumericString0.asn1Equals((DERObject) null);
      assertEquals("\u0000\u0000", dERNumericString0.toString());
      assertEquals("\u0000\u0000", dERNumericString0.getString());
  }

  @Test
  public void test9()  throws Throwable  {
      DERNumericString dERNumericString0 = null;
      try {
        dERNumericString0 = new DERNumericString("B5\u00A8\b\u00FF", true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * string contains illegal characters
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      boolean boolean0 = DERNumericString.isNumericString("exception converting octets ");
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      boolean boolean0 = DERNumericString.isNumericString("lx=`T44V]\"3");
      assertEquals(false, boolean0);
  }
}
