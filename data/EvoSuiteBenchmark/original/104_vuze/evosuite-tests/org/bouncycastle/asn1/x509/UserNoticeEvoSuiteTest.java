/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x509;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERConstructedSequence;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DEREncodableVector;
import org.bouncycastle.asn1.DERInteger;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.x509.DisplayText;
import org.bouncycastle.asn1.x509.NoticeReference;
import org.bouncycastle.asn1.x509.UserNotice;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class UserNoticeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NoticeReference noticeReference0 = new NoticeReference("", (ASN1Sequence) null);
      UserNotice userNotice0 = new UserNotice(noticeReference0, "");
      NoticeReference noticeReference1 = userNotice0.getNoticeRef();
      assertSame(noticeReference0, noticeReference1);
  }

  @Test
  public void test1()  throws Throwable  {
      NoticeReference noticeReference0 = new NoticeReference("", (ASN1Sequence) null);
      UserNotice userNotice0 = new UserNotice(noticeReference0, "");
      DisplayText displayText0 = userNotice0.getExplicitText();
      assertEquals("", displayText0.getString());
      assertNotNull(displayText0);
  }

  @Test
  public void test2()  throws Throwable  {
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      BERSequence bERSequence0 = new BERSequence(dEREncodableVector0);
      UserNotice userNotice0 = null;
      try {
        userNotice0 = new UserNotice((ASN1Sequence) bERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Bad sequence size: 0
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      NoticeReference noticeReference0 = new NoticeReference((int) (byte)0, "", (ASN1Sequence) null);
      DisplayText displayText0 = new DisplayText("D-x");
      UserNotice userNotice0 = new UserNotice(noticeReference0, displayText0);
      DERSequence dERSequence0 = (DERSequence)userNotice0.getDERObject();
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject((int) (byte)0, (DEREncodable) dERSequence0);
      DERSequence dERSequence1 = (DERSequence)ASN1Sequence.getInstance((ASN1TaggedObject) dERTaggedObject0, true);
      UserNotice userNotice1 = new UserNotice((ASN1Sequence) dERSequence1);
      assertNotNull(userNotice1);
      assertEquals(2, dERSequence0.size());
      assertEquals(2, dERSequence1.size());
  }

  @Test
  public void test4()  throws Throwable  {
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject((-1092));
      DERSequence dERSequence0 = (DERSequence)ASN1Sequence.getInstance((ASN1TaggedObject) dERTaggedObject0, false);
      dEREncodableVector0.add((DEREncodable) dERSequence0);
      BERSequence bERSequence0 = new BERSequence(dEREncodableVector0);
      UserNotice userNotice0 = null;
      try {
        userNotice0 = new UserNotice((ASN1Sequence) bERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Bad sequence size: 0
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      DERInteger dERInteger0 = new DERInteger(byteArray0);
      BERSequence bERSequence0 = new BERSequence((DEREncodable) dERInteger0);
      UserNotice userNotice0 = null;
      try {
        userNotice0 = new UserNotice((ASN1Sequence) bERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * illegal object in getInstance
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      UserNotice userNotice0 = new UserNotice((NoticeReference) null, "pZOU`$l?SQ=Bk}Y^bYG");
      DERSequence dERSequence0 = (DERSequence)userNotice0.toASN1Object();
      assertEquals(1, dERSequence0.size());
  }

  @Test
  public void test7()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      NoticeReference noticeReference0 = new NoticeReference("illegal object in getInstance: ", (ASN1Sequence) bERConstructedSequence0);
      UserNotice userNotice0 = new UserNotice(noticeReference0, (DisplayText) null);
      DERSequence dERSequence0 = (DERSequence)userNotice0.getDERObject();
      assertEquals(1, dERSequence0.size());
  }
}
