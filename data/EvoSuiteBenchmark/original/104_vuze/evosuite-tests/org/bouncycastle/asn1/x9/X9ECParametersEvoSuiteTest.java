/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x9;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.math.BigInteger;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERNull;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.BERTaggedObject;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DERInteger;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.x9.X9ECParameters;
import org.bouncycastle.math.ec.ECConstants;
import org.bouncycastle.math.ec.ECCurve;
import org.bouncycastle.math.ec.ECFieldElement;
import org.bouncycastle.math.ec.ECPoint;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class X9ECParametersEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BigInteger bigInteger0 = ECConstants.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      ECCurve.Fp eCCurve_Fp0 = new ECCurve.Fp(bigInteger1, bigInteger0, bigInteger0);
      ECPoint.Fp eCPoint_Fp0 = (ECPoint.Fp)eCCurve_Fp0.getInfinity();
      X9ECParameters x9ECParameters0 = new X9ECParameters((ECCurve) eCCurve_Fp0, (ECPoint) eCPoint_Fp0, bigInteger0);
      assertNotNull(x9ECParameters0);
      
      BigInteger bigInteger2 = x9ECParameters0.getH();
      assertNotNull(bigInteger2);
      assertEquals(1.0F, bigInteger2.floatValue(), 0.01F);
  }

  @Test
  public void test1()  throws Throwable  {
      BigInteger bigInteger0 = ECConstants.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      ECCurve.Fp eCCurve_Fp0 = new ECCurve.Fp(bigInteger1, bigInteger0, bigInteger0);
      ECPoint.Fp eCPoint_Fp0 = (ECPoint.Fp)eCCurve_Fp0.getInfinity();
      X9ECParameters x9ECParameters0 = new X9ECParameters((ECCurve) eCCurve_Fp0, (ECPoint) eCPoint_Fp0, bigInteger0);
      assertNotNull(x9ECParameters0);
      
      BigInteger bigInteger2 = x9ECParameters0.getN();
      assertNotNull(bigInteger2);
      assertEquals(0, bigInteger2.signum());
  }

  @Test
  public void test2()  throws Throwable  {
      BigInteger bigInteger0 = ECConstants.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      ECCurve.Fp eCCurve_Fp0 = new ECCurve.Fp(bigInteger1, bigInteger0, bigInteger0);
      ECPoint.Fp eCPoint_Fp0 = (ECPoint.Fp)eCCurve_Fp0.getInfinity();
      X9ECParameters x9ECParameters0 = new X9ECParameters((ECCurve) eCCurve_Fp0, (ECPoint) eCPoint_Fp0, bigInteger0);
      byte[] byteArray0 = x9ECParameters0.getSeed();
      assertNull(byteArray0);
  }

  @Test
  public void test3()  throws Throwable  {
      BigInteger bigInteger0 = ECConstants.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      ECCurve.Fp eCCurve_Fp0 = new ECCurve.Fp(bigInteger1, bigInteger0, bigInteger0);
      ECPoint.Fp eCPoint_Fp0 = (ECPoint.Fp)eCCurve_Fp0.getInfinity();
      X9ECParameters x9ECParameters0 = new X9ECParameters((ECCurve) eCCurve_Fp0, (ECPoint) eCPoint_Fp0, bigInteger0, bigInteger0);
      assertNotNull(x9ECParameters0);
      
      DERSequence dERSequence0 = (DERSequence)x9ECParameters0.getDERObject();
      assertNotNull(dERSequence0);
      assertEquals(6, dERSequence0.size());
  }

  @Test
  public void test4()  throws Throwable  {
      BigInteger bigInteger0 = ECConstants.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      ECCurve.Fp eCCurve_Fp0 = new ECCurve.Fp(bigInteger1, bigInteger0, bigInteger0);
      ECPoint.Fp eCPoint_Fp0 = (ECPoint.Fp)eCCurve_Fp0.getInfinity();
      X9ECParameters x9ECParameters0 = new X9ECParameters((ECCurve) eCCurve_Fp0, (ECPoint) eCPoint_Fp0, bigInteger0);
      ECPoint.Fp eCPoint_Fp1 = (ECPoint.Fp)x9ECParameters0.getG();
      assertEquals(true, eCPoint_Fp1.isInfinity());
  }

  @Test
  public void test5()  throws Throwable  {
      BigInteger bigInteger0 = ECConstants.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      ECCurve.Fp eCCurve_Fp0 = new ECCurve.Fp(bigInteger1, bigInteger0, bigInteger0);
      ECPoint.Fp eCPoint_Fp0 = (ECPoint.Fp)eCCurve_Fp0.getInfinity();
      X9ECParameters x9ECParameters0 = new X9ECParameters((ECCurve) eCCurve_Fp0, (ECPoint) eCPoint_Fp0, bigInteger0);
      ECCurve.Fp eCCurve_Fp1 = (ECCurve.Fp)x9ECParameters0.getCurve();
      assertSame(eCCurve_Fp0, eCCurve_Fp1);
  }

  @Test
  public void test6()  throws Throwable  {
      BERNull bERNull0 = BERNull.INSTANCE;
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(true, 1813, (DEREncodable) bERNull0);
      BERSequence bERSequence0 = (BERSequence)ASN1Sequence.getInstance((ASN1TaggedObject) bERTaggedObject0, false);
      X9ECParameters x9ECParameters0 = null;
      try {
        x9ECParameters0 = new X9ECParameters((ASN1Sequence) bERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * bad version in X9ECParameters
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DERInteger dERInteger0 = new DERInteger((int) (byte)1);
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject((int) (byte) (-50), (DEREncodable) dERInteger0);
      BERSequence bERSequence0 = (BERSequence)ASN1Sequence.getInstance((ASN1TaggedObject) bERTaggedObject0, false);
      X9ECParameters x9ECParameters0 = null;
      try {
        x9ECParameters0 = new X9ECParameters((ASN1Sequence) bERSequence0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 1 >= 1
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      DERInteger dERInteger0 = new DERInteger((int) (byte)0);
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject((int) (byte)2, (DEREncodable) dERInteger0);
      BERSequence bERSequence0 = (BERSequence)ASN1Sequence.getInstance((ASN1TaggedObject) bERTaggedObject0, false);
      X9ECParameters x9ECParameters0 = null;
      try {
        x9ECParameters0 = new X9ECParameters((ASN1Sequence) bERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * bad version in X9ECParameters
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      ECPoint.Fp eCPoint_Fp0 = new ECPoint.Fp((ECCurve) null, (ECFieldElement) null, (ECFieldElement) null, false);
      BigInteger bigInteger0 = ECConstants.ONE;
      X9ECParameters x9ECParameters0 = null;
      try {
        x9ECParameters0 = new X9ECParameters((ECCurve) null, (ECPoint) eCPoint_Fp0, bigInteger0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      BigInteger bigInteger0 = ECConstants.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      ECCurve.Fp eCCurve_Fp0 = new ECCurve.Fp(bigInteger1, bigInteger0, bigInteger0);
      ECPoint.Fp eCPoint_Fp0 = (ECPoint.Fp)eCCurve_Fp0.getInfinity();
      X9ECParameters x9ECParameters0 = new X9ECParameters((ECCurve) eCCurve_Fp0, (ECPoint) eCPoint_Fp0, bigInteger0);
      assertNotNull(x9ECParameters0);
      
      DERSequence dERSequence0 = (DERSequence)x9ECParameters0.getDERObject();
      assertNotNull(dERSequence0);
      assertEquals(5, dERSequence0.size());
  }
}
