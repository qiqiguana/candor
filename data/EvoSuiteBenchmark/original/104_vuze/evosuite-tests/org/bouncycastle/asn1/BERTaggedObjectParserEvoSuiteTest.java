/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.bouncycastle.asn1.BERTaggedObjectParser;
import org.bouncycastle.asn1.DERTaggedObject;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BERTaggedObjectParserEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) byteArrayInputStream0);
      BERTaggedObjectParser bERTaggedObjectParser0 = new BERTaggedObjectParser((-5), (-5), (InputStream) bufferedInputStream0);
      int int0 = bERTaggedObjectParser0.getTagNo();
      assertEquals((-5), int0);
      assertEquals(true, bERTaggedObjectParser0.isConstructed());
  }

  @Test
  public void test1()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BERTaggedObjectParser bERTaggedObjectParser0 = new BERTaggedObjectParser(0, 821, (InputStream) pipedInputStream0);
      // Undeclared exception!
      try {
        bERTaggedObjectParser0.getObjectParser(18, false);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * implicit tagging not implemented
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BERTaggedObjectParser bERTaggedObjectParser0 = new BERTaggedObjectParser(19, 19, (InputStream) byteArrayInputStream0);
      bERTaggedObjectParser0.getObjectParser((int) (byte)0, true);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(19, bERTaggedObjectParser0.getTagNo());
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) byteArrayInputStream0);
      BERTaggedObjectParser bERTaggedObjectParser0 = new BERTaggedObjectParser((-5), (-5), (InputStream) bufferedInputStream0);
      DERTaggedObject dERTaggedObject0 = (DERTaggedObject)bERTaggedObjectParser0.getDERObject();
      assertEquals(-5, bERTaggedObjectParser0.getTagNo());
      assertNotNull(dERTaggedObject0);
      assertEquals(true, bERTaggedObjectParser0.isConstructed());
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-829), (int) (byte)0);
      BERTaggedObjectParser bERTaggedObjectParser0 = new BERTaggedObjectParser((-1623), (-829), (InputStream) byteArrayInputStream0);
      DERTaggedObject dERTaggedObject0 = (DERTaggedObject)bERTaggedObjectParser0.getDERObject();
      assertNotNull(dERTaggedObject0);
      assertEquals(-829, bERTaggedObjectParser0.getTagNo());
      assertEquals(true, bERTaggedObjectParser0.isConstructed());
  }
}
