/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x509;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1Object;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1SequenceParser;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERConstructedSequence;
import org.bouncycastle.asn1.BERTaggedObject;
import org.bouncycastle.asn1.DERBitString;
import org.bouncycastle.asn1.DERConstructedSequence;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DERPrintableString;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.x509.DistributionPointName;
import org.bouncycastle.asn1.x509.IssuingDistributionPoint;
import org.bouncycastle.asn1.x509.ReasonFlags;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class IssuingDistributionPointEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      IssuingDistributionPoint issuingDistributionPoint0 = new IssuingDistributionPoint((ASN1Sequence) bERConstructedSequence0);
      DistributionPointName distributionPointName0 = issuingDistributionPoint0.getDistributionPoint();
      assertNull(distributionPointName0);
  }

  @Test
  public void test1()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      IssuingDistributionPoint issuingDistributionPoint0 = new IssuingDistributionPoint((ASN1Sequence) bERConstructedSequence0);
      boolean boolean0 = issuingDistributionPoint0.onlyContainsAttributeCerts();
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      ASN1SequenceParser aSN1SequenceParser0 = bERConstructedSequence0.parser();
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject((-1), (DEREncodable) aSN1SequenceParser0);
      IssuingDistributionPoint issuingDistributionPoint0 = IssuingDistributionPoint.getInstance((ASN1TaggedObject) bERTaggedObject0, true);
      ReasonFlags reasonFlags0 = issuingDistributionPoint0.getOnlySomeReasons();
      assertNull(reasonFlags0);
  }

  @Test
  public void test3()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      IssuingDistributionPoint issuingDistributionPoint0 = new IssuingDistributionPoint((ASN1Sequence) bERConstructedSequence0);
      boolean boolean0 = issuingDistributionPoint0.onlyContainsUserCerts();
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      DERBitString dERBitString0 = new DERBitString(byteArray0);
      ReasonFlags reasonFlags0 = new ReasonFlags(dERBitString0);
      IssuingDistributionPoint issuingDistributionPoint0 = new IssuingDistributionPoint((DistributionPointName) null, true, true, reasonFlags0, true, true);
      String string0 = issuingDistributionPoint0.toString();
      assertEquals(true, issuingDistributionPoint0.isIndirectCRL());
      assertEquals("IssuingDistributionPoint: [\n    onlyContainsUserCerts:\n        true\n    onlyContainsCACerts:\n        true\n    onlySomeReasons:\n        #030700000000000000\n    onlyContainsAttributeCerts:\n        true\n    indirectCRL:\n        true\n]\n", string0);
      assertEquals(true, issuingDistributionPoint0.onlyContainsAttributeCerts());
      assertNotNull(string0);
      assertEquals(true, issuingDistributionPoint0.onlyContainsUserCerts());
      assertEquals(true, issuingDistributionPoint0.onlyContainsCACerts());
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      DERBitString dERBitString0 = new DERBitString(byteArray0);
      ReasonFlags reasonFlags0 = new ReasonFlags(dERBitString0);
      IssuingDistributionPoint issuingDistributionPoint0 = new IssuingDistributionPoint((DistributionPointName) null, true, true, reasonFlags0, true, true);
      boolean boolean0 = issuingDistributionPoint0.isIndirectCRL();
      assertEquals(true, boolean0);
      assertEquals(true, issuingDistributionPoint0.onlyContainsCACerts());
      assertEquals(true, issuingDistributionPoint0.onlyContainsAttributeCerts());
      assertEquals(true, issuingDistributionPoint0.onlyContainsUserCerts());
  }

  @Test
  public void test6()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      IssuingDistributionPoint issuingDistributionPoint0 = new IssuingDistributionPoint((ASN1Sequence) bERConstructedSequence0);
      boolean boolean0 = issuingDistributionPoint0.onlyContainsCACerts();
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      IssuingDistributionPoint issuingDistributionPoint0 = IssuingDistributionPoint.getInstance((Object) null);
      assertNull(issuingDistributionPoint0);
  }

  @Test
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try {
        IssuingDistributionPoint.getInstance((Object) "DER");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in factory
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      DERPrintableString dERPrintableString0 = new DERPrintableString(byteArray0);
      DistributionPointName distributionPointName0 = new DistributionPointName(1805, (ASN1Encodable) dERPrintableString0);
      ReasonFlags reasonFlags0 = new ReasonFlags((int) (byte) (-19));
      IssuingDistributionPoint issuingDistributionPoint0 = new IssuingDistributionPoint(distributionPointName0, false, true, reasonFlags0, false, true);
      String string0 = issuingDistributionPoint0.toString();
      assertEquals("IssuingDistributionPoint: [\n    distributionPoint:\n        DistributionPointName: [\n    nameRelativeToCRLIssuer:\n        \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n]\n\n    onlyContainsCACerts:\n        true\n    onlySomeReasons:\n        #030500EDFFFFFF\n    onlyContainsAttributeCerts:\n        true\n]\n", string0);
      assertEquals(true, issuingDistributionPoint0.onlyContainsCACerts());
      assertNotNull(string0);
      assertEquals(true, issuingDistributionPoint0.onlyContainsAttributeCerts());
  }

  @Test
  public void test10()  throws Throwable  {
      IssuingDistributionPoint issuingDistributionPoint0 = new IssuingDistributionPoint((DistributionPointName) null, false, false, (ReasonFlags) null, false, false);
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject((int) (byte) (-19), (DEREncodable) issuingDistributionPoint0);
      DERSequence dERSequence0 = (DERSequence)ASN1Sequence.getInstance((ASN1TaggedObject) bERTaggedObject0, true);
      IssuingDistributionPoint issuingDistributionPoint1 = new IssuingDistributionPoint((ASN1Sequence) dERSequence0);
      assertNotNull(issuingDistributionPoint1);
      assertEquals("IssuingDistributionPoint: [\n    onlyContainsUserCerts:\n        true\n    onlyContainsCACerts:\n        true\n    onlyContainsAttributeCerts:\n        true\n    indirectCRL:\n        true\n]\n", issuingDistributionPoint1.toString());
      assertEquals(4, dERSequence0.size());
  }

  @Test
  public void test11()  throws Throwable  {
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(0);
      BERTaggedObject bERTaggedObject1 = new BERTaggedObject(63, (DEREncodable) bERTaggedObject0);
      // Undeclared exception!
      try {
        IssuingDistributionPoint.getInstance((ASN1TaggedObject) bERTaggedObject1, false);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * org.bouncycastle.asn1.BERSequence cannot be cast to org.bouncycastle.asn1.ASN1TaggedObject
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-87);
      DERTaggedObject dERTaggedObject0 = (DERTaggedObject)ASN1Object.fromByteArray(byteArray0);
      DERTaggedObject dERTaggedObject1 = new DERTaggedObject((int) (byte) (-87), (DEREncodable) dERTaggedObject0);
      // Undeclared exception!
      try {
        IssuingDistributionPoint.getInstance((ASN1TaggedObject) dERTaggedObject1, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown tag in IssuingDistributionPoint
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-93);
      DERTaggedObject dERTaggedObject0 = (DERTaggedObject)ASN1Object.fromByteArray(byteArray0);
      DERTaggedObject dERTaggedObject1 = new DERTaggedObject((int) (byte) (-93), (DEREncodable) dERTaggedObject0);
      // Undeclared exception!
      try {
        IssuingDistributionPoint.getInstance((ASN1TaggedObject) dERTaggedObject1, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * illegal object in getInstance: org.bouncycastle.asn1.DERSequence
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      DERConstructedSequence dERConstructedSequence0 = new DERConstructedSequence();
      IssuingDistributionPoint issuingDistributionPoint0 = new IssuingDistributionPoint((ASN1Sequence) dERConstructedSequence0);
      assertNotNull(issuingDistributionPoint0);
      
      String string0 = issuingDistributionPoint0.toString();
      assertNotNull(string0);
      assertEquals("IssuingDistributionPoint: [\n]\n", string0);
  }
}
