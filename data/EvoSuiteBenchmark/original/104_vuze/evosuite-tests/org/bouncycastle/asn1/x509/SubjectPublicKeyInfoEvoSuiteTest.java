/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x509;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.DERBitString;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DERObject;
import org.bouncycastle.asn1.DERObjectIdentifier;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.asn1.x509.SubjectPublicKeyInfo;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SubjectPublicKeyInfoEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo((AlgorithmIdentifier) null, (DEREncodable) null);
      AlgorithmIdentifier algorithmIdentifier0 = subjectPublicKeyInfo0.getAlgorithmId();
      assertNull(algorithmIdentifier0);
  }

  @Test
  public void test1()  throws Throwable  {
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier((DERObjectIdentifier) null);
      byte[] byteArray0 = new byte[7];
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo(algorithmIdentifier0, byteArray0);
      DERBitString dERBitString0 = subjectPublicKeyInfo0.getPublicKeyData();
      assertEquals(0, dERBitString0.intValue());
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo((AlgorithmIdentifier) null, byteArray0);
      DERSequence dERSequence0 = (DERSequence)subjectPublicKeyInfo0.toASN1Object();
      assertEquals("[null, #030B0000000000000000000000]", dERSequence0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo((AlgorithmIdentifier) null, byteArray0);
      DERObject dERObject0 = subjectPublicKeyInfo0.getPublicKey();
      assertNotNull(dERObject0);
  }

  @Test
  public void test4()  throws Throwable  {
      AlgorithmIdentifier algorithmIdentifier0 = new AlgorithmIdentifier((DERObjectIdentifier) null, (DEREncodable) null);
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject((-1685), (DEREncodable) algorithmIdentifier0);
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = SubjectPublicKeyInfo.getInstance((ASN1TaggedObject) dERTaggedObject0, true);
      assertNotNull(subjectPublicKeyInfo0);
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = new SubjectPublicKeyInfo((AlgorithmIdentifier) null, byteArray0);
      SubjectPublicKeyInfo subjectPublicKeyInfo1 = SubjectPublicKeyInfo.getInstance((Object) subjectPublicKeyInfo0);
      assertSame(subjectPublicKeyInfo0, subjectPublicKeyInfo1);
  }

  @Test
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try {
        SubjectPublicKeyInfo.getInstance((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in factory
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DERSequence dERSequence0 = new DERSequence((DEREncodable) null);
      SubjectPublicKeyInfo subjectPublicKeyInfo0 = null;
      try {
        subjectPublicKeyInfo0 = new SubjectPublicKeyInfo((ASN1Sequence) dERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Bad sequence size: 1
         */
      }
  }
}
