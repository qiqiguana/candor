/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import org.bouncycastle.asn1.IndefiniteLengthInputStream;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class IndefiniteLengthInputStreamEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) byteArrayInputStream0);
      IndefiniteLengthInputStream indefiniteLengthInputStream0 = new IndefiniteLengthInputStream((InputStream) pushbackInputStream0);
      indefiniteLengthInputStream0.setEofOn00(false);
      int int0 = indefiniteLengthInputStream0.read();
      assertEquals(-1, pushbackInputStream0.read());
      assertEquals((-1), int0);
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-64);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IndefiniteLengthInputStream indefiniteLengthInputStream0 = new IndefiniteLengthInputStream((InputStream) byteArrayInputStream0);
      assertEquals(-1, byteArrayInputStream0.read());
      
      long long0 = indefiniteLengthInputStream0.skip(1075L);
      assertEquals(0L, long0);
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-64);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IndefiniteLengthInputStream indefiniteLengthInputStream0 = new IndefiniteLengthInputStream((InputStream) byteArrayInputStream0);
      assertEquals(-1, byteArrayInputStream0.read());
      
      IndefiniteLengthInputStream indefiniteLengthInputStream1 = new IndefiniteLengthInputStream((InputStream) byteArrayInputStream0);
      IndefiniteLengthInputStream indefiniteLengthInputStream2 = new IndefiniteLengthInputStream((InputStream) indefiniteLengthInputStream0);
      assertEquals(true, indefiniteLengthInputStream0.checkForEof());
  }
}
