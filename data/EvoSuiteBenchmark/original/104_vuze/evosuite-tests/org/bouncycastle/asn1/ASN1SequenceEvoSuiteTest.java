/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1SequenceParser;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERConstructedSequence;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.BERTaggedObject;
import org.bouncycastle.asn1.DERBMPString;
import org.bouncycastle.asn1.DERBoolean;
import org.bouncycastle.asn1.DERConstructedSequence;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DEREncodableVector;
import org.bouncycastle.asn1.DERObject;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.DERSet;
import org.bouncycastle.asn1.DERTaggedObject;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ASN1SequenceEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      ASN1SequenceParser aSN1SequenceParser0 = bERConstructedSequence0.parser();
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(0, (DEREncodable) aSN1SequenceParser0);
      BERConstructedSequence bERConstructedSequence1 = (BERConstructedSequence)ASN1Sequence.getInstance((ASN1TaggedObject) bERTaggedObject0, true);
      assertEquals(0, bERConstructedSequence1.getSize());
  }

  @Test
  public void test1()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      // Undeclared exception!
      try {
        bERConstructedSequence0.getObjectAt(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 0 >= 0
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      String string0 = bERConstructedSequence0.toString();
      assertEquals("[]", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      DERSet dERSet0 = new DERSet(dEREncodableVector0);
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject((-99), (DEREncodable) dERSet0);
      BERSequence bERSequence0 = (BERSequence)ASN1Sequence.getInstance((ASN1TaggedObject) bERTaggedObject0, false);
      assertNotNull(bERSequence0);
      assertEquals("[[]]", bERSequence0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      ASN1Sequence aSN1Sequence0 = ASN1Sequence.getInstance((Object) null);
      assertNull(aSN1Sequence0);
  }

  @Test
  public void test5()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      BERConstructedSequence bERConstructedSequence1 = (BERConstructedSequence)ASN1Sequence.getInstance((Object) bERConstructedSequence0);
      assertSame(bERConstructedSequence1, bERConstructedSequence0);
  }

  @Test
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try {
        ASN1Sequence.getInstance((Object) "[]");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in getInstance
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject((-1));
      // Undeclared exception!
      try {
        ASN1Sequence.getInstance((ASN1TaggedObject) bERTaggedObject0, true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * object implicit - explicit expected.
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      DERBoolean dERBoolean0 = new DERBoolean(false);
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(false, (-2025), (DEREncodable) dERBoolean0);
      // Undeclared exception!
      try {
        ASN1Sequence.getInstance((ASN1TaggedObject) bERTaggedObject0, false);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in getInstanceFromTagged
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(0, (DEREncodable) bERConstructedSequence0);
      DERSequence dERSequence0 = (DERSequence)ASN1Sequence.getInstance((ASN1TaggedObject) dERTaggedObject0, false);
      assertNotNull(dERSequence0);
      assertEquals("[[]]", dERSequence0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(504);
      DERSequence dERSequence0 = (DERSequence)ASN1Sequence.getInstance((ASN1TaggedObject) dERTaggedObject0, false);
      assertNotNull(dERSequence0);
      assertEquals("[]", dERSequence0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      BERSequence bERSequence0 = new BERSequence((DEREncodable) null);
      assertNotNull(bERSequence0);
      
      int int0 = bERSequence0.hashCode();
      assertEquals(0, int0);
      assertEquals(1, bERSequence0.size());
  }

  @Test
  public void test12()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      BERSequence bERSequence0 = new BERSequence((DEREncodable) bERConstructedSequence0);
      assertNotNull(bERSequence0);
      
      int int0 = bERSequence0.hashCode();
      assertEquals(1, bERSequence0.size());
      assertEquals(0, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      DERBMPString dERBMPString0 = new DERBMPString("u>Y");
      boolean boolean0 = bERConstructedSequence0.asn1Equals((DERObject) dERBMPString0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      DERConstructedSequence dERConstructedSequence0 = new DERConstructedSequence();
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      bERConstructedSequence0.addObject((DEREncodable) dERConstructedSequence0);
      BERConstructedSequence bERConstructedSequence1 = (BERConstructedSequence)bERConstructedSequence0.toASN1Object();
      BERSequence bERSequence0 = new BERSequence((DEREncodable) bERConstructedSequence1);
      boolean boolean0 = bERSequence0.asn1Equals((DERObject) bERConstructedSequence1);
      assertEquals("[[]]", bERConstructedSequence0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      DERConstructedSequence dERConstructedSequence0 = new DERConstructedSequence();
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      bERConstructedSequence0.addObject((DEREncodable) dERConstructedSequence0);
      assertEquals("[[]]", bERConstructedSequence0.toString());
      
      dERConstructedSequence0.addObject((DEREncodable) dERConstructedSequence0);
      BERSequence bERSequence0 = new BERSequence((DEREncodable) bERConstructedSequence0);
      boolean boolean0 = bERSequence0.asn1Equals((DERObject) bERConstructedSequence0);
      assertEquals(true, boolean0);
  }
}
