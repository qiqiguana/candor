/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.cms;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DERIA5String;
import org.bouncycastle.asn1.DERObjectIdentifier;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.cms.CMSObjectIdentifiers;
import org.bouncycastle.asn1.cms.ContentInfo;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ContentInfoEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DERObjectIdentifier dERObjectIdentifier0 = CMSObjectIdentifiers.encryptedData;
      ContentInfo contentInfo0 = new ContentInfo(dERObjectIdentifier0, dERObjectIdentifier0);
      DERObjectIdentifier dERObjectIdentifier1 = (DERObjectIdentifier)contentInfo0.getContent();
      assertSame(dERObjectIdentifier0, dERObjectIdentifier1);
  }

  @Test
  public void test1()  throws Throwable  {
      DERObjectIdentifier dERObjectIdentifier0 = CMSObjectIdentifiers.encryptedData;
      DERSequence dERSequence0 = new DERSequence((DEREncodable) dERObjectIdentifier0);
      ContentInfo contentInfo0 = new ContentInfo((ASN1Sequence) dERSequence0);
      assertNotNull(contentInfo0);
      
      DERObjectIdentifier dERObjectIdentifier1 = contentInfo0.getContentType();
      assertNotNull(dERObjectIdentifier1);
      assertEquals("1.2.840.113549.1.7.6", dERObjectIdentifier1.getId());
  }

  @Test
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try {
        ContentInfo.getInstance((Object) "DER");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in factory: java.lang.String
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      DERObjectIdentifier dERObjectIdentifier0 = CMSObjectIdentifiers.encryptedData;
      ContentInfo contentInfo0 = new ContentInfo(dERObjectIdentifier0, dERObjectIdentifier0);
      ContentInfo contentInfo1 = ContentInfo.getInstance((Object) contentInfo0);
      assertSame(contentInfo1, contentInfo0);
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      DERIA5String dERIA5String0 = new DERIA5String(byteArray0);
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject((-629), (DEREncodable) dERIA5String0);
      DERSequence dERSequence0 = (DERSequence)ASN1Sequence.getInstance((ASN1TaggedObject) dERTaggedObject0, false);
      // Undeclared exception!
      try {
        ContentInfo.getInstance((Object) dERSequence0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * org.bouncycastle.asn1.DERIA5String cannot be cast to org.bouncycastle.asn1.DERObjectIdentifier
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      ASN1Encodable[] aSN1EncodableArray0 = new ASN1Encodable[8];
      DERSequence dERSequence0 = new DERSequence(aSN1EncodableArray0);
      ContentInfo contentInfo0 = null;
      try {
        contentInfo0 = new ContentInfo((ASN1Sequence) dERSequence0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      DERObjectIdentifier dERObjectIdentifier0 = CMSObjectIdentifiers.encryptedData;
      DERSequence dERSequence0 = new DERSequence((DEREncodable) dERObjectIdentifier0);
      ContentInfo contentInfo0 = new ContentInfo((ASN1Sequence) dERSequence0);
      assertNotNull(contentInfo0);
      
      BERSequence bERSequence0 = (BERSequence)contentInfo0.getDERObject();
      assertEquals("[1.2.840.113549.1.7.6]", bERSequence0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      DERObjectIdentifier dERObjectIdentifier0 = CMSObjectIdentifiers.encryptedData;
      ContentInfo contentInfo0 = new ContentInfo(dERObjectIdentifier0, dERObjectIdentifier0);
      int int0 = contentInfo0.hashCode();
      assertEquals(0, int0);
  }
}
