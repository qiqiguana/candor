/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x509;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERConstructedSequence;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.x509.DisplayText;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DisplayTextEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DisplayText displayText0 = new DisplayText(3, "cB{");
      assertNotNull(displayText0);
      
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(3, (DEREncodable) displayText0);
      DisplayText displayText1 = DisplayText.getInstance((ASN1TaggedObject) dERTaggedObject0, false);
      assertTrue(displayText0.equals(displayText1));
      assertNotNull(displayText1);
      assertEquals("cB{", displayText0.getString());
      assertEquals(3, displayText0.contentType);
  }

  @Test
  public void test1()  throws Throwable  {
      DisplayText displayText0 = new DisplayText(9, " found in6input shDuld only contain DEROctetString");
      assertNotNull(displayText0);
      
      String string0 = displayText0.getString();
      assertEquals(" found in6input shDuld only contain DEROctetString", string0);
      assertNotNull(string0);
      assertEquals(9, displayText0.contentType);
  }

  @Test
  public void test2()  throws Throwable  {
      DisplayText displayText0 = new DisplayText(0, "unknown object n getnsQance");
      assertNotNull(displayText0);
      
      DisplayText displayText1 = DisplayText.getInstance((Object) displayText0);
      assertNotNull(displayText1);
      assertEquals("unknown object n getnsQance", displayText0.getString());
      assertEquals(0, displayText0.contentType);
      assertEquals(0, displayText1.contentType);
  }

  @Test
  public void test3()  throws Throwable  {
      DisplayText displayText0 = new DisplayText(1, "unknown object n getnsQance");
      assertNotNull(displayText0);
      assertEquals(1, displayText0.contentType);
      assertEquals("unknown object n getnsQance", displayText0.getString());
  }

  @Test
  public void test4()  throws Throwable  {
      DisplayText displayText0 = new DisplayText(2, "CIkdlN'");
      assertNotNull(displayText0);
      assertEquals(2, displayText0.contentType);
      assertEquals("CIkdlN'", displayText0.getString());
  }

  @Test
  public void test5()  throws Throwable  {
      DisplayText displayText0 = new DisplayText("CIkdlN'");
      assertNotNull(displayText0);
      assertEquals("CIkdlN'", displayText0.getString());
      assertEquals(2, displayText0.contentType);
  }

  @Test
  public void test6()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      // Undeclared exception!
      try {
        DisplayText.getInstance((Object) bERConstructedSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * illegal object in getInstance
         */
      }
  }
}
