/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x509;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.util.Hashtable;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.BERSet;
import org.bouncycastle.asn1.BERTaggedObject;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DEREncodableVector;
import org.bouncycastle.asn1.DERInteger;
import org.bouncycastle.asn1.DERObject;
import org.bouncycastle.asn1.DERObjectIdentifier;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.x509.GeneralName;
import org.bouncycastle.asn1.x509.X509Name;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class GeneralNameEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(true, 7, (DEREncodable) null);
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(true, 7, (DEREncodable) bERTaggedObject0);
      GeneralName generalName0 = GeneralName.getInstance((ASN1TaggedObject) dERTaggedObject0, true);
      assertNotNull(generalName0);
      
      BERSequence bERSequence0 = (BERSequence)generalName0.getName();
      assertEquals(7, generalName0.tag);
      assertNull(bERSequence0);
      assertEquals(7, generalName0.getTagNo());
  }

  @Test
  public void test1()  throws Throwable  {
      GeneralName generalName0 = new GeneralName(2, "");
      assertNotNull(generalName0);
      
      int int0 = generalName0.getTagNo();
      assertEquals("2: ", generalName0.toString());
      assertEquals(2, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      GeneralName generalName0 = new GeneralName((X509Name) null);
      GeneralName generalName1 = GeneralName.getInstance((Object) generalName0);
      assertEquals(4, generalName0.tag);
      assertNotNull(generalName1);
      assertEquals(4, generalName1.getTagNo());
  }

  @Test
  public void test3()  throws Throwable  {
      GeneralName generalName0 = new GeneralName(1, "O>N fC7j #T,8Rg3T7");
      assertNotNull(generalName0);
      
      String string0 = generalName0.toString();
      assertNotNull(string0);
      assertEquals("1: O>N fC7j #T,8Rg3T7", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      GeneralName generalName0 = null;
      try {
        generalName0 = new GeneralName(7, "");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * IP Address is invalid
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      GeneralName generalName0 = new GeneralName(6, "");
      assertEquals("6: ", generalName0.toString());
      assertEquals(6, generalName0.tag);
      assertNotNull(generalName0);
  }

  @Test
  public void test6()  throws Throwable  {
      GeneralName generalName0 = null;
      try {
        generalName0 = new GeneralName(8, "rB");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * string rB not an OID
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      GeneralName generalName0 = null;
      try {
        generalName0 = new GeneralName(4, "4: ");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * badly formated directory string
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      GeneralName generalName0 = null;
      try {
        generalName0 = new GeneralName(3, "3: []");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * can't process String for tag: 3
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      GeneralName generalName0 = new GeneralName(7, "2.5.4.16");
      assertNotNull(generalName0);
      assertEquals(7, generalName0.tag);
      assertEquals("7: #322e352e342e3136", generalName0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(4, (DEREncodable) null);
      GeneralName generalName0 = GeneralName.getInstance((ASN1TaggedObject) dERTaggedObject0, false);
      assertNull(generalName0);
  }

  @Test
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try {
        GeneralName.getInstance((Object) "1: O>N fC7j #T,8Rg3T7");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in getInstance
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      DERInteger dERInteger0 = new DERInteger(byteArray0);
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(false, 0, (DEREncodable) dERInteger0);
      // Undeclared exception!
      try {
        GeneralName.getInstance((Object) bERTaggedObject0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in getInstanceFromTagged
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(1);
      // Undeclared exception!
      try {
        GeneralName.getInstance((Object) dERTaggedObject0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * illegal object in getInstance: org.bouncycastle.asn1.DERSequence
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      GeneralName generalName0 = new GeneralName(2, "");
      assertNotNull(generalName0);
      
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(false, 2, (DEREncodable) generalName0);
      GeneralName generalName1 = GeneralName.getInstance((ASN1TaggedObject) dERTaggedObject0, false);
      assertEquals(2, generalName1.tag);
      assertNotNull(generalName1);
      assertTrue(generalName1.equals(generalName0));
  }

  @Test
  public void test15()  throws Throwable  {
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(4);
      // Undeclared exception!
      try {
        GeneralName.getInstance((Object) bERTaggedObject0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * object implicit - explicit expected.
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(true, 6, (DEREncodable) null);
      GeneralName generalName0 = GeneralName.getInstance((Object) dERTaggedObject0);
      assertNotNull(generalName0);
      
      // Undeclared exception!
      try {
        generalName0.toString();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      DERObjectIdentifier dERObjectIdentifier0 = X509Name.UnstructuredAddress;
      GeneralName generalName0 = new GeneralName((DERObject) dERObjectIdentifier0, 208);
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(true, 208, (DEREncodable) generalName0);
      // Undeclared exception!
      try {
        GeneralName.getInstance((ASN1TaggedObject) bERTaggedObject0, true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in getInstance
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(4);
      GeneralName generalName0 = new GeneralName((-1548), (ASN1Encodable) bERTaggedObject0);
      String string0 = generalName0.toString();
      assertEquals("-1548: [4][]", string0);
      assertNotNull(string0);
  }

  @Test
  public void test19()  throws Throwable  {
      GeneralName generalName0 = new GeneralName(2, "");
      assertNotNull(generalName0);
      
      String string0 = generalName0.toString();
      assertEquals("2: ", string0);
      assertNotNull(string0);
  }

  @Test
  public void test20()  throws Throwable  {
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      BERSet bERSet0 = new BERSet(dEREncodableVector0);
      GeneralName generalName0 = new GeneralName(3, (ASN1Encodable) bERSet0);
      String string0 = generalName0.toString();
      assertEquals("3: []", string0);
      assertNotNull(string0);
  }

  @Test
  public void test21()  throws Throwable  {
      Hashtable<Object, Object> hashtable0 = X509Name.RFC2253Symbols;
      X509Name x509Name0 = new X509Name(hashtable0);
      GeneralName generalName0 = new GeneralName(x509Name0);
      String string0 = generalName0.toString();
      assertEquals("4: UID=UID,STREET=STREET,OU=OU,ST=ST,L=L,O=O,C=C,CN=CN,DC=DC", string0);
      assertNotNull(string0);
  }

  @Test
  public void test22()  throws Throwable  {
      GeneralName generalName0 = new GeneralName((X509Name) null);
      generalName0.getEncoded();
      assertEquals(4, generalName0.tag);
      assertEquals(4, generalName0.getTagNo());
  }
}
