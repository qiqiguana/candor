/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x509;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERTaggedObject;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DEREnumerated;
import org.bouncycastle.asn1.DERIA5String;
import org.bouncycastle.asn1.DERInteger;
import org.bouncycastle.asn1.DERT61String;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.x509.DistributionPointName;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DistributionPointNameEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DistributionPointName distributionPointName0 = new DistributionPointName(0, (DEREncodable) null);
      distributionPointName0.getName();
      assertEquals(0, distributionPointName0.type);
      assertEquals(0, distributionPointName0.getType());
  }

  @Test
  public void test1()  throws Throwable  {
      DERInteger dERInteger0 = new DERInteger((-2038));
      DistributionPointName distributionPointName0 = new DistributionPointName(25, (ASN1Encodable) dERInteger0);
      int int0 = distributionPointName0.getType();
      assertEquals(25, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      DERT61String dERT61String0 = new DERT61String(byteArray0);
      DistributionPointName distributionPointName0 = new DistributionPointName(113, (ASN1Encodable) dERT61String0);
      distributionPointName0.getDEREncoded();
      assertEquals(113, distributionPointName0.type);
      assertEquals(113, distributionPointName0.getType());
  }

  @Test
  public void test3()  throws Throwable  {
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject((-1620));
      DistributionPointName distributionPointName0 = new DistributionPointName((ASN1TaggedObject) bERTaggedObject0);
      assertNotNull(distributionPointName0);
      
      String string0 = distributionPointName0.toString();
      assertEquals("DistributionPointName: [\n    nameRelativeToCRLIssuer:\n        []\n]\n", string0);
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      DistributionPointName distributionPointName0 = DistributionPointName.getInstance((Object) null);
      assertNull(distributionPointName0);
  }

  @Test
  public void test5()  throws Throwable  {
      DERIA5String dERIA5String0 = new DERIA5String("f9bCrAp1E ", false);
      DistributionPointName distributionPointName0 = new DistributionPointName(931, (DEREncodable) dERIA5String0);
      DistributionPointName distributionPointName1 = DistributionPointName.getInstance((Object) distributionPointName0);
      assertNotNull(distributionPointName1);
      assertEquals(931, distributionPointName1.type);
  }

  @Test
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try {
        DistributionPointName.getInstance((Object) "BER");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in factory
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DistributionPointName distributionPointName0 = new DistributionPointName(0, (DEREncodable) null);
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(0, (DEREncodable) distributionPointName0);
      // Undeclared exception!
      try {
        DistributionPointName.getInstance((ASN1TaggedObject) bERTaggedObject0, true);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in getInstanceFromTagged
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      DEREnumerated dEREnumerated0 = new DEREnumerated((-838));
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(0, (DEREncodable) dEREnumerated0);
      DistributionPointName distributionPointName0 = new DistributionPointName((ASN1TaggedObject) dERTaggedObject0);
      // Undeclared exception!
      try {
        distributionPointName0.toString();
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in getInstance
         */
      }
  }
}
