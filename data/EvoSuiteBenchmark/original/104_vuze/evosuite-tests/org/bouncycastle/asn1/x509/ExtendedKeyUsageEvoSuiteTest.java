/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x509;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Vector;
import org.bouncycastle.asn1.ASN1OctetString;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERConstructedOctetString;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.x509.ExtendedKeyUsage;
import org.bouncycastle.asn1.x509.KeyPurposeId;
import org.bouncycastle.asn1.x509.X509Extension;
import org.evosuite.testcase.CodeUnderTestException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ExtendedKeyUsageEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      KeyPurposeId keyPurposeId0 = KeyPurposeId.anyExtendedKeyUsage;
      ExtendedKeyUsage extendedKeyUsage0 = new ExtendedKeyUsage(keyPurposeId0);
      assertNotNull(extendedKeyUsage0);
      
      int int0 = extendedKeyUsage0.size();
      assertEquals(1, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      DERSequence dERSequence0 = new DERSequence();
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(1761, (DEREncodable) dERSequence0);
      ExtendedKeyUsage extendedKeyUsage0 = ExtendedKeyUsage.getInstance((ASN1TaggedObject) dERTaggedObject0, true);
      assertEquals(0, extendedKeyUsage0.size());
  }

  @Test
  public void test2()  throws Throwable  {
      KeyPurposeId keyPurposeId0 = KeyPurposeId.anyExtendedKeyUsage;
      ExtendedKeyUsage extendedKeyUsage0 = new ExtendedKeyUsage(keyPurposeId0);
  }

  @Test
  public void test3()  throws Throwable  {
      KeyPurposeId keyPurposeId0 = KeyPurposeId.anyExtendedKeyUsage;
      ExtendedKeyUsage extendedKeyUsage0 = new ExtendedKeyUsage(keyPurposeId0);
      assertNotNull(extendedKeyUsage0);
      
      ExtendedKeyUsage extendedKeyUsage1 = ExtendedKeyUsage.getInstance((Object) extendedKeyUsage0);
      assertEquals(1, extendedKeyUsage0.size());
      assertNotNull(extendedKeyUsage1);
      assertEquals(1, extendedKeyUsage1.size());
  }

  @Test
  public void test4()  throws Throwable  {
      Vector<ExtendedKeyUsage> vector0 = new Vector<ExtendedKeyUsage>();
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString(vector0);
      X509Extension x509Extension0 = new X509Extension(false, (ASN1OctetString) bERConstructedOctetString0);
      // Undeclared exception!
      try {
        ExtendedKeyUsage.getInstance((Object) x509Extension0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(true, 4, (DEREncodable) null);
      DERSequence dERSequence0 = (DERSequence)ASN1Sequence.getInstance((ASN1TaggedObject) dERTaggedObject0, false);
      ExtendedKeyUsage extendedKeyUsage0 = null;
      try {
        extendedKeyUsage0 = new ExtendedKeyUsage((ASN1Sequence) dERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Only DERObjectIdentifiers allowed in ExtendedKeyUsage.
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      KeyPurposeId keyPurposeId0 = KeyPurposeId.anyExtendedKeyUsage;
      ExtendedKeyUsage extendedKeyUsage0 = new ExtendedKeyUsage(keyPurposeId0);
      assertNotNull(extendedKeyUsage0);
      
      Vector<Object> vector0 = extendedKeyUsage0.getUsages();
      assertNotNull(vector0);
      
      ExtendedKeyUsage extendedKeyUsage1 = new ExtendedKeyUsage(vector0);
      assertTrue(extendedKeyUsage1.equals(extendedKeyUsage0));
      assertNotNull(extendedKeyUsage1);
      assertEquals(1, extendedKeyUsage1.size());
  }

  @Test
  public void test7()  throws Throwable  {
      Vector<ExtendedKeyUsage> vector0 = new Vector<ExtendedKeyUsage>();
      ExtendedKeyUsage extendedKeyUsage0 = new ExtendedKeyUsage(vector0);
      assertNotNull(extendedKeyUsage0);
      
      KeyPurposeId keyPurposeId0 = KeyPurposeId.id_kp_codeSigning;
      boolean boolean0 = extendedKeyUsage0.hasKeyPurposeId(keyPurposeId0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      KeyPurposeId keyPurposeId0 = KeyPurposeId.id_kp_codeSigning;
      ExtendedKeyUsage extendedKeyUsage0 = new ExtendedKeyUsage(keyPurposeId0);
      assertNotNull(extendedKeyUsage0);
      
      boolean boolean0 = extendedKeyUsage0.hasKeyPurposeId(keyPurposeId0);
      assertEquals(true, boolean0);
  }
}
