/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.misc;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.BERConstructedSequence;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.DERUniversalString;
import org.bouncycastle.asn1.misc.IDEACBCPar;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class IDEACBCParEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      IDEACBCPar iDEACBCPar0 = new IDEACBCPar(byteArray0);
      IDEACBCPar iDEACBCPar1 = IDEACBCPar.getInstance((Object) iDEACBCPar0);
      assertSame(iDEACBCPar1, iDEACBCPar0);
  }

  @Test
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try {
        IDEACBCPar.getInstance((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in IDEACBCPar factory
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      DERUniversalString dERUniversalString0 = new DERUniversalString(byteArray0);
      DERSequence dERSequence0 = new DERSequence((DEREncodable) dERUniversalString0);
      // Undeclared exception!
      try {
        IDEACBCPar.getInstance((Object) dERSequence0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * org.bouncycastle.asn1.DERUniversalString cannot be cast to org.bouncycastle.asn1.ASN1OctetString
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      IDEACBCPar iDEACBCPar0 = new IDEACBCPar((ASN1Sequence) bERConstructedSequence0);
      byte[] byteArray0 = iDEACBCPar0.getIV();
      assertNull(byteArray0);
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      IDEACBCPar iDEACBCPar0 = new IDEACBCPar(byteArray0);
      byte[] byteArray1 = iDEACBCPar0.getIV();
      assertSame(byteArray1, byteArray0);
  }

  @Test
  public void test5()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      IDEACBCPar iDEACBCPar0 = new IDEACBCPar((ASN1Sequence) bERConstructedSequence0);
      assertNotNull(iDEACBCPar0);
      
      DERSequence dERSequence0 = (DERSequence)iDEACBCPar0.getDERObject();
      assertEquals("[]", dERSequence0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      IDEACBCPar iDEACBCPar0 = new IDEACBCPar(byteArray0);
      DERSequence dERSequence0 = (DERSequence)iDEACBCPar0.getDERObject();
      assertEquals("[#00]", dERSequence0.toString());
  }
}
