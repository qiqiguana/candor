/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Date;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERConstructedOctetString;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DERGeneralizedTime;
import org.bouncycastle.asn1.DERObject;
import org.bouncycastle.asn1.DERTaggedObject;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DERGeneralizedTimeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Date date0 = new Date();
      DERGeneralizedTime dERGeneralizedTime0 = new DERGeneralizedTime(date0);
      String string0 = dERGeneralizedTime0.getTimeString();
      assertEquals(1372725899888L, date0.getTime());
      assertEquals("20130702004459Z", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      DERGeneralizedTime dERGeneralizedTime0 = new DERGeneralizedTime(byteArray0);
      assertNotNull(dERGeneralizedTime0);
      
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(0, (DEREncodable) dERGeneralizedTime0);
      DERGeneralizedTime dERGeneralizedTime1 = DERGeneralizedTime.getInstance((ASN1TaggedObject) dERTaggedObject0, false);
      assertNotNull(dERGeneralizedTime1);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000GMT+00:00", dERGeneralizedTime0.getTime());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", dERGeneralizedTime1.getTimeString());
  }

  @Test
  public void test2()  throws Throwable  {
      Date date0 = new Date();
      DERGeneralizedTime dERGeneralizedTime0 = new DERGeneralizedTime(date0);
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString((DEREncodable) dERGeneralizedTime0);
      DERGeneralizedTime.getInstance((Object) bERConstructedOctetString0);
      assertEquals(1372725900636L, date0.getTime());
  }

  @Test
  public void test3()  throws Throwable  {
      DERGeneralizedTime dERGeneralizedTime0 = null;
      try {
        dERGeneralizedTime0 = new DERGeneralizedTime("4\u00E644\u00E64\u00E6Z");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid date string: Unparseable date: \"4\u00E644\u00E64\u00E6Z\"
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      DERGeneralizedTime dERGeneralizedTime0 = new DERGeneralizedTime(byteArray0);
      assertNotNull(dERGeneralizedTime0);
      
      int int0 = dERGeneralizedTime0.hashCode();
      assertEquals(0, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      DERGeneralizedTime dERGeneralizedTime0 = DERGeneralizedTime.getInstance((Object) null);
      assertNull(dERGeneralizedTime0);
  }

  @Test
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try {
        DERGeneralizedTime.getInstance((Object) "BER");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * illegal object in getInstance: java.lang.String
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DERGeneralizedTime dERGeneralizedTime0 = null;
      try {
        dERGeneralizedTime0 = new DERGeneralizedTime("WYNaiNc BX$1-p'Sr");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid date string: Unparseable date: \"WYNaiNc BX$1GMT-p':Sr\"
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      Date date0 = new Date();
      DERGeneralizedTime dERGeneralizedTime0 = new DERGeneralizedTime(date0);
      String string0 = dERGeneralizedTime0.getTime();
      assertEquals(1372725904614L, date0.getTime());
      assertEquals("20130702004504GMT+00:00", string0);
  }

  @Test
  public void test9()  throws Throwable  {
      DERGeneralizedTime dERGeneralizedTime0 = null;
      try {
        dERGeneralizedTime0 = new DERGeneralizedTime("[vuqs+V#");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid date string: Unparseable date: \"[vuqsGMT+V#:00\"
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      DERGeneralizedTime dERGeneralizedTime0 = null;
      try {
        dERGeneralizedTime0 = new DERGeneralizedTime("|f5v>]NRIK+Jf,N");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid date string: Unparseable date: \"|f5v>]NRIKGMT+Jf:,N\"
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[7] = (byte)45;
      DERGeneralizedTime dERGeneralizedTime0 = new DERGeneralizedTime(byteArray0);
      assertNotNull(dERGeneralizedTime0);
      
      String string0 = dERGeneralizedTime0.getTime();
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000GMT-\u0000\u0000:00", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      DERGeneralizedTime dERGeneralizedTime0 = null;
      try {
        dERGeneralizedTime0 = new DERGeneralizedTime("DqVKb+d; ~U\"");
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      DERGeneralizedTime dERGeneralizedTime0 = new DERGeneralizedTime(byteArray0);
      assertNotNull(dERGeneralizedTime0);
      
      String string0 = dERGeneralizedTime0.getTime();
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000GMT+00:00", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      DERGeneralizedTime dERGeneralizedTime0 = null;
      try {
        dERGeneralizedTime0 = new DERGeneralizedTime("z({RP*S?&JN|VY.?1Z");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid date string: Unparseable date: \"z({RP*S?&JN|VY.?1Z\"
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      DERGeneralizedTime dERGeneralizedTime0 = null;
      try {
        dERGeneralizedTime0 = new DERGeneralizedTime("z({RP*?^JN|VY,.pMo1");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * invalid date string: Unparseable date: \"z({RP*?^JN|VY,.pMo1\"
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      Date date0 = new Date();
      DERGeneralizedTime dERGeneralizedTime0 = new DERGeneralizedTime(date0);
      boolean boolean0 = dERGeneralizedTime0.asn1Equals((DERObject) dERGeneralizedTime0);
      assertEquals(1372725936265L, date0.getTime());
      assertEquals(true, boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      DERGeneralizedTime dERGeneralizedTime0 = new DERGeneralizedTime(byteArray0);
      assertNotNull(dERGeneralizedTime0);
      
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(0, (DEREncodable) dERGeneralizedTime0);
      dERGeneralizedTime0.asn1Equals((DERObject) dERTaggedObject0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000GMT+00:00", dERGeneralizedTime0.getTime());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", dERGeneralizedTime0.getTimeString());
  }
}
