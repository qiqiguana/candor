/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x509;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.math.BigInteger;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1OctetString;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERConstructedOctetString;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.BERTaggedObject;
import org.bouncycastle.asn1.DERBoolean;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DERObject;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.x509.BasicConstraints;
import org.bouncycastle.asn1.x509.X509Extension;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class BasicConstraintsEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BasicConstraints basicConstraints0 = new BasicConstraints(0);
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(0, (DEREncodable) basicConstraints0);
      BasicConstraints basicConstraints1 = BasicConstraints.getInstance((ASN1TaggedObject) dERTaggedObject0, true);
      assertNotNull(basicConstraints1);
      assertEquals("BasicConstraints: isCa(true), pathLenConstraint = 0", basicConstraints1.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject((-452), (DEREncodable) null);
      BasicConstraints basicConstraints0 = BasicConstraints.getInstance((ASN1TaggedObject) bERTaggedObject0, true);
      assertNull(basicConstraints0);
  }

  @Test
  public void test2()  throws Throwable  {
      BasicConstraints basicConstraints0 = new BasicConstraints(5);
      BasicConstraints basicConstraints1 = BasicConstraints.getInstance((Object) basicConstraints0);
      assertNotNull(basicConstraints1);
      assertEquals("BasicConstraints: isCa(true), pathLenConstraint = 5", basicConstraints1.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      DERBoolean dERBoolean0 = DERBoolean.TRUE;
      BERConstructedOctetString bERConstructedOctetString0 = new BERConstructedOctetString((DERObject) dERBoolean0);
      X509Extension x509Extension0 = new X509Extension(dERBoolean0, (ASN1OctetString) bERConstructedOctetString0);
      // Undeclared exception!
      try {
        BasicConstraints.getInstance((Object) x509Extension0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in factory
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(17);
      BasicConstraints basicConstraints0 = BasicConstraints.getInstance((ASN1TaggedObject) dERTaggedObject0, false);
      assertEquals(false, basicConstraints0.isCA());
  }

  @Test
  public void test5()  throws Throwable  {
      ASN1Encodable[] aSN1EncodableArray0 = new ASN1Encodable[2];
      DERSequence dERSequence0 = new DERSequence(aSN1EncodableArray0);
      BasicConstraints basicConstraints0 = null;
      try {
        basicConstraints0 = new BasicConstraints((ASN1Sequence) dERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * wrong sequence in constructor
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject((-452), (DEREncodable) null);
      BERSequence bERSequence0 = (BERSequence)ASN1Sequence.getInstance((ASN1TaggedObject) bERTaggedObject0, false);
      BasicConstraints basicConstraints0 = new BasicConstraints((ASN1Sequence) bERSequence0);
      assertEquals(false, basicConstraints0.isCA());
  }

  @Test
  public void test7()  throws Throwable  {
      BasicConstraints basicConstraints0 = new BasicConstraints(false);
      String string0 = basicConstraints0.toString();
      assertEquals("BasicConstraints: isCa(false)", string0);
      assertNotNull(string0);
  }

  @Test
  public void test8()  throws Throwable  {
      BasicConstraints basicConstraints0 = new BasicConstraints(true);
      basicConstraints0.getPathLenConstraint();
      assertEquals(true, basicConstraints0.isCA());
      assertEquals("BasicConstraints: isCa(true)", basicConstraints0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      BasicConstraints basicConstraints0 = new BasicConstraints(false, (-6));
      boolean boolean0 = basicConstraints0.isCA();
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      BasicConstraints basicConstraints0 = new BasicConstraints(5);
      assertEquals(true, basicConstraints0.isCA());
      
      DERBoolean dERBoolean0 = DERBoolean.FALSE;
      basicConstraints0.cA = (org.bouncycastle.asn1.DERBoolean) dERBoolean0;
      String string0 = basicConstraints0.toString();
      assertNotNull(string0);
      assertEquals("BasicConstraints: isCa(false), pathLenConstraint = 5", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      BasicConstraints basicConstraints0 = new BasicConstraints(0);
      BigInteger bigInteger0 = basicConstraints0.getPathLenConstraint();
      assertNotNull(bigInteger0);
      assertEquals("BasicConstraints: isCa(true), pathLenConstraint = 0", basicConstraints0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      BasicConstraints basicConstraints0 = new BasicConstraints(false, (-452));
      byte[] byteArray0 = basicConstraints0.getEncoded();
      assertNotNull(byteArray0);
  }

  @Test
  public void test13()  throws Throwable  {
      BasicConstraints basicConstraints0 = new BasicConstraints(true);
      String string0 = basicConstraints0.toString();
      assertNotNull(string0);
      assertEquals("BasicConstraints: isCa(true)", string0);
  }
}
