/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x509;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1Object;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.ASN1TaggedObject;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.BERTaggedObject;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DERInteger;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.x509.AlgorithmIdentifier;
import org.bouncycastle.asn1.x509.GeneralNames;
import org.bouncycastle.asn1.x509.Holder;
import org.bouncycastle.asn1.x509.IssuerSerial;
import org.bouncycastle.asn1.x509.ObjectDigestInfo;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class HolderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Holder holder0 = new Holder((IssuerSerial) null, 0);
      holder0.getBaseCertificateID();
      assertEquals(0, holder0.getVersion());
  }

  @Test
  public void test1()  throws Throwable  {
      Holder holder0 = new Holder((IssuerSerial) null, 0);
      holder0.getEntityName();
      assertEquals(0, holder0.getVersion());
  }

  @Test
  public void test2()  throws Throwable  {
      Holder holder0 = new Holder((GeneralNames) null, 0);
      assertEquals(0, holder0.getVersion());
  }

  @Test
  public void test3()  throws Throwable  {
      Holder holder0 = new Holder((IssuerSerial) null);
      int int0 = holder0.getVersion();
      assertEquals(1, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      Holder holder0 = new Holder((IssuerSerial) null, 0);
      holder0.getObjectDigestInfo();
      assertEquals(0, holder0.getVersion());
  }

  @Test
  public void test5()  throws Throwable  {
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject((-285));
      // Undeclared exception!
      try {
        Holder.getInstance((Object) bERTaggedObject0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown tag in Holder
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      Holder holder0 = new Holder((IssuerSerial) null, 0);
      Holder holder1 = Holder.getInstance((Object) holder0);
      assertNotNull(holder1);
      assertEquals(0, holder0.getVersion());
      assertEquals(0, holder1.getVersion());
  }

  @Test
  public void test7()  throws Throwable  {
      BERSequence bERSequence0 = new BERSequence();
      Holder holder0 = Holder.getInstance((Object) bERSequence0);
      assertEquals(1, holder0.getVersion());
  }

  @Test
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try {
        Holder.getInstance((Object) "/");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in factory
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      BERTaggedObject bERTaggedObject0 = new BERTaggedObject(0);
      Holder holder0 = null;
      try {
        holder0 = new Holder((ASN1TaggedObject) bERTaggedObject0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Bad sequence size: 0
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(1, (DEREncodable) null);
      Holder holder0 = new Holder((ASN1TaggedObject) dERTaggedObject0);
      assertNotNull(holder0);
      
      holder0.getEncoded("");
      assertEquals(0, holder0.getVersion());
  }

  @Test
  public void test11()  throws Throwable  {
      ASN1Encodable[] aSN1EncodableArray0 = new ASN1Encodable[7];
      DERSequence dERSequence0 = new DERSequence(aSN1EncodableArray0);
      Holder holder0 = null;
      try {
        holder0 = new Holder((ASN1Sequence) dERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Bad sequence size: 7
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(0);
      DERSequence dERSequence0 = new DERSequence((DEREncodable) dERTaggedObject0);
      Holder holder0 = null;
      try {
        holder0 = new Holder((ASN1Sequence) dERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Bad sequence size: 0
         */
      }
  }

  @Test
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-95);
      DERTaggedObject dERTaggedObject0 = (DERTaggedObject)ASN1Object.fromByteArray(byteArray0);
      BERSequence bERSequence0 = new BERSequence((DEREncodable) dERTaggedObject0);
      Holder holder0 = new Holder((ASN1Sequence) bERSequence0);
      assertEquals(1, holder0.getVersion());
  }

  @Test
  public void test14()  throws Throwable  {
      Holder holder0 = new Holder((IssuerSerial) null, 0);
      int int0 = holder0.hashCode();
      assertEquals(0, int0);
      assertEquals(0, holder0.getVersion());
  }

  @Test
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ObjectDigestInfo objectDigestInfo0 = new ObjectDigestInfo(458, "1EbN*&VkQr&mN^_", (AlgorithmIdentifier) null, byteArray0);
      Holder holder0 = new Holder(objectDigestInfo0);
      holder0.getDEREncoded();
      assertEquals(1, holder0.getVersion());
  }

  @Test
  public void test16()  throws Throwable  {
      IssuerSerial issuerSerial0 = new IssuerSerial((GeneralNames) null, (DERInteger) null);
      Holder holder0 = new Holder(issuerSerial0);
      DERSequence dERSequence0 = (DERSequence)holder0.toASN1Object();
      assertEquals(1, dERSequence0.size());
      assertEquals(1, holder0.getVersion());
  }

  @Test
  public void test17()  throws Throwable  {
      BERSequence bERSequence0 = new BERSequence();
      GeneralNames generalNames0 = new GeneralNames((ASN1Sequence) bERSequence0);
      Holder holder0 = new Holder(generalNames0);
      DERSequence dERSequence0 = (DERSequence)holder0.toASN1Object();
      assertEquals(1, holder0.getVersion());
      assertEquals("[[1]GeneralNames:\n]", dERSequence0.toString());
  }
}
