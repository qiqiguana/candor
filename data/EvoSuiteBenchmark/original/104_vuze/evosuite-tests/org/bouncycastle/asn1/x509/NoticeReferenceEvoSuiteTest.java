/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x509;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.util.Vector;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.asn1.BERConstructedSequence;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DEREncodableVector;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.x509.DisplayText;
import org.bouncycastle.asn1.x509.NoticeReference;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class NoticeReferenceEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      DERSequence dERSequence0 = new DERSequence(dEREncodableVector0);
      NoticeReference noticeReference0 = new NoticeReference("=?kti|~", (ASN1Sequence) dERSequence0);
      DERSequence dERSequence1 = (DERSequence)noticeReference0.getNoticeNumbers();
      assertSame(dERSequence0, dERSequence1);
  }

  @Test
  public void test1()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      NoticeReference noticeReference0 = new NoticeReference(0, "", (ASN1Sequence) bERConstructedSequence0);
      byte[] byteArray0 = noticeReference0.getEncoded("");
      assertNotNull(byteArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      DERSequence dERSequence0 = new DERSequence(dEREncodableVector0);
      NoticeReference noticeReference0 = new NoticeReference("=?kti|~", (ASN1Sequence) dERSequence0);
      DisplayText displayText0 = noticeReference0.getOrganization();
      assertEquals("=?kti|~", displayText0.getString());
      assertNotNull(displayText0);
  }

  @Test
  public void test3()  throws Throwable  {
      Vector<NoticeReference> vector0 = new Vector<NoticeReference>();
      DERSequence dERSequence0 = new DERSequence();
      NoticeReference noticeReference0 = new NoticeReference("{`Rli`SF`5;C`D[w1", (ASN1Sequence) dERSequence0);
      vector0.add(noticeReference0);
      NoticeReference noticeReference1 = new NoticeReference("{`Rli`SF`5;C`D[w1", (Vector) vector0);
      assertNotNull(noticeReference1);
      assertTrue(noticeReference1.equals(noticeReference0));
  }

  @Test
  public void test4()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer(215);
      vector0.add(integer0);
      NoticeReference noticeReference0 = new NoticeReference("2'S<sM_<+^##TN)", (Vector) vector0);
      assertNotNull(noticeReference0);
  }

  @Test
  public void test5()  throws Throwable  {
      ASN1Encodable[] aSN1EncodableArray0 = new ASN1Encodable[2];
      DERSequence dERSequence0 = new DERSequence(aSN1EncodableArray0);
      NoticeReference noticeReference0 = null;
      try {
        noticeReference0 = new NoticeReference((ASN1Sequence) dERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * illegal object in getInstance
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      BERConstructedSequence bERConstructedSequence0 = new BERConstructedSequence();
      BERSequence bERSequence0 = new BERSequence((DEREncodable) bERConstructedSequence0);
      // Undeclared exception!
      try {
        NoticeReference.getInstance((Object) bERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Bad sequence size: 1
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      NoticeReference noticeReference0 = new NoticeReference("exception converting octets ", (ASN1Sequence) null);
      NoticeReference noticeReference1 = NoticeReference.getInstance((Object) noticeReference0);
      assertSame(noticeReference0, noticeReference1);
  }

  @Test
  public void test8()  throws Throwable  {
      // Undeclared exception!
      try {
        NoticeReference.getInstance((Object) "[]");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * unknown object in getInstance.
         */
      }
  }
}
