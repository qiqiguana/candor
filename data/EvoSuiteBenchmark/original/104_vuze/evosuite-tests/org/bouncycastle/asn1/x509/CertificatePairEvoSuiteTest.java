/*
 * This file was automatically generated by EvoSuite
 */

package org.bouncycastle.asn1.x509;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import org.bouncycastle.asn1.BERSequence;
import org.bouncycastle.asn1.DEREncodable;
import org.bouncycastle.asn1.DEREncodableVector;
import org.bouncycastle.asn1.DERSequence;
import org.bouncycastle.asn1.DERTaggedObject;
import org.bouncycastle.asn1.x509.CertificatePair;
import org.bouncycastle.asn1.x509.X509CertificateStructure;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class CertificatePairEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CertificatePair certificatePair0 = new CertificatePair((X509CertificateStructure) null, (X509CertificateStructure) null);
      X509CertificateStructure x509CertificateStructure0 = certificatePair0.getForward();
      assertNull(x509CertificateStructure0);
  }

  @Test
  public void test1()  throws Throwable  {
      CertificatePair certificatePair0 = new CertificatePair((X509CertificateStructure) null, (X509CertificateStructure) null);
      X509CertificateStructure x509CertificateStructure0 = certificatePair0.getReverse();
      assertNull(x509CertificateStructure0);
  }

  @Test
  public void test2()  throws Throwable  {
      CertificatePair certificatePair0 = CertificatePair.getInstance((Object) null);
      assertNull(certificatePair0);
  }

  @Test
  public void test3()  throws Throwable  {
      BERSequence bERSequence0 = new BERSequence();
      // Undeclared exception!
      try {
        CertificatePair.getInstance((Object) bERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Bad sequence size: 0
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      CertificatePair certificatePair0 = new CertificatePair((X509CertificateStructure) null, (X509CertificateStructure) null);
      CertificatePair certificatePair1 = CertificatePair.getInstance((Object) certificatePair0);
      assertSame(certificatePair1, certificatePair0);
  }

  @Test
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try {
        CertificatePair.getInstance((Object) "BER");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * illegal object in getInstance: java.lang.String
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(0);
      dEREncodableVector0.add((DEREncodable) dERTaggedObject0);
      DERSequence dERSequence0 = new DERSequence(dEREncodableVector0);
      // Undeclared exception!
      try {
        CertificatePair.getInstance((Object) dERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * object implicit - explicit expected.
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject((-672));
      dEREncodableVector0.add((DEREncodable) dERTaggedObject0);
      dEREncodableVector0.add((DEREncodable) null);
      DERSequence dERSequence0 = new DERSequence(dEREncodableVector0);
      // Undeclared exception!
      try {
        CertificatePair.getInstance((Object) dERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Bad tag number: -672
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      DEREncodableVector dEREncodableVector0 = new DEREncodableVector();
      DERTaggedObject dERTaggedObject0 = new DERTaggedObject(1);
      dEREncodableVector0.add((DEREncodable) dERTaggedObject0);
      DERSequence dERSequence0 = new DERSequence(dEREncodableVector0);
      // Undeclared exception!
      try {
        CertificatePair.getInstance((Object) dERSequence0);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * object implicit - explicit expected.
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      CertificatePair certificatePair0 = new CertificatePair((X509CertificateStructure) null, (X509CertificateStructure) null);
      byte[] byteArray0 = certificatePair0.getEncoded();
      assertNotNull(byteArray0);
  }
}
