/*
 * This file was automatically generated by EvoSuite
 */

package org.pf.text;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import org.pf.text.StringExaminer;
import org.pf.text.StringPattern;

@RunWith(EvoSuiteRunner.class)
public class StringPatternEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      boolean boolean0 = StringPattern.match("", "");
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      boolean boolean0 = StringPattern.matchIgnoreCase(">%*/)</NUo/p", ">%*/)</NUo/p");
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      StringPattern stringPattern0 = new StringPattern("N%'Y!?Z}I");
      String string0 = stringPattern0.toString();
      assertNotNull(string0);
      assertEquals(false, stringPattern0.getIgnoreCase());
      assertEquals(true, stringPattern0.hasWildcard());
  }

  @Test
  public void test3()  throws Throwable  {
      StringPattern stringPattern0 = new StringPattern("sYi(g/s]u$oxl?g", '(');
      boolean boolean0 = stringPattern0.hasWildcard();
      assertEquals(false, stringPattern0.getIgnoreCase());
      assertEquals('(', stringPattern0.digitWildcardChar());
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      boolean boolean0 = StringPattern.matchIgnoreCase((String) null, (String) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      boolean boolean0 = StringPattern.matchIgnoreCase("K?1gD'|mC]o\">", "K?1gD'|mC]o\">");
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      StringPattern stringPattern0 = new StringPattern("p&8w:SVh_");
      StringExaminer stringExaminer0 = stringPattern0.newExaminer("p&8w:SVh_");
      boolean boolean0 = stringPattern0.matchReverse("p&8w:SVh_", stringExaminer0);
      assertEquals(false, stringPattern0.hasDigitWildcard());
      assertEquals(false, stringPattern0.getIgnoreCase());
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      StringExaminer stringExaminer0 = new StringExaminer(">%*/)</NUo/p", true);
      StringPattern stringPattern0 = new StringPattern(">%*/)</NUo/p", true, '*');
      boolean boolean0 = stringPattern0.matchReverse(">%*/)</NUo/p", stringExaminer0);
      assertEquals('*', stringPattern0.digitWildcardChar());
      assertEquals(false, boolean0);
      assertEquals(true, stringPattern0.getIgnoreCase());
      assertEquals(true, stringPattern0.hasWildcard());
  }

  @Test
  public void test8()  throws Throwable  {
      StringPattern stringPattern0 = new StringPattern("he{*>}ZX", true, 'h');
      StringExaminer stringExaminer0 = new StringExaminer("he{*>}ZX", true);
      boolean boolean0 = stringPattern0.matchReverse("he{*>}ZX", stringExaminer0);
      assertEquals(true, stringPattern0.hasWildcard());
      assertEquals('h', stringPattern0.digitWildcardChar());
      assertEquals(false, boolean0);
      assertEquals(true, stringPattern0.getIgnoreCase());
  }

  @Test
  public void test9()  throws Throwable  {
      boolean boolean0 = StringPattern.match(".", "5AO$^EHJO++J");
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      boolean boolean0 = StringPattern.matchIgnoreCase("org.pf.text.StringPattern@38b01d43", "");
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      StringPattern stringPattern0 = new StringPattern((String) null);
      String string0 = stringPattern0.toString();
      assertNotNull(string0);
      assertEquals(false, stringPattern0.getIgnoreCase());
  }

  @Test
  public void test12()  throws Throwable  {
      StringPattern stringPattern0 = new StringPattern("N%'Y!?Z}I");
      boolean boolean0 = stringPattern0.hasWildcard();
      assertEquals(true, boolean0);
      assertEquals(false, stringPattern0.hasDigitWildcard());
      assertEquals(false, stringPattern0.getIgnoreCase());
  }

  @Test
  public void test13()  throws Throwable  {
      StringPattern stringPattern0 = new StringPattern((String) null);
      boolean boolean0 = stringPattern0.hasWildcard();
      assertEquals(false, boolean0);
      assertEquals(false, stringPattern0.getIgnoreCase());
  }

  @Test
  public void test14()  throws Throwable  {
      StringPattern stringPattern0 = new StringPattern("ho", '7');
      boolean boolean0 = stringPattern0.hasWildcard();
      assertEquals('7', stringPattern0.digitWildcardChar());
      assertEquals(false, stringPattern0.getIgnoreCase());
      assertEquals(false, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      StringPattern stringPattern0 = new StringPattern("he{*>}ZX");
      boolean boolean0 = stringPattern0.hasWildcard();
      assertEquals(false, stringPattern0.getIgnoreCase());
      assertEquals(false, stringPattern0.hasDigitWildcard());
      assertEquals(true, boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      StringPattern stringPattern0 = new StringPattern("", '\u0000');
      assertEquals(false, stringPattern0.getIgnoreCase());
      assertEquals(false, stringPattern0.hasDigitWildcard());
  }

  @Test
  public void test17()  throws Throwable  {
      StringPattern stringPattern0 = new StringPattern((String) null);
      char char0 = stringPattern0.digitWildcardChar();
      assertEquals(false, stringPattern0.hasDigitWildcard());
      assertEquals('\u0000', char0);
      assertEquals(false, stringPattern0.getIgnoreCase());
  }

  @Test
  public void test18()  throws Throwable  {
      StringPattern stringPattern0 = new StringPattern("K?1gD'|mC]o\">", true, '6');
      StringExaminer stringExaminer0 = new StringExaminer("K?1gD'|mC]o\">");
      stringPattern0.skipWildcards(stringExaminer0);
      char char0 = stringPattern0.skipWildcards(stringExaminer0);
      assertEquals('\uFFFF', char0);
      assertEquals(true, stringPattern0.hasWildcard());
      assertEquals(true, stringPattern0.getIgnoreCase());
      assertEquals('6', stringPattern0.digitWildcardChar());
  }

  @Test
  public void test19()  throws Throwable  {
      StringPattern stringPattern0 = new StringPattern((String) null);
      boolean boolean0 = stringPattern0.skipAfter((StringExaminer) null, (String) null);
      assertEquals(false, stringPattern0.getIgnoreCase());
      assertEquals(false, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      StringPattern stringPattern0 = new StringPattern("", false);
      StringExaminer stringExaminer0 = stringPattern0.newExaminer("");
      boolean boolean0 = stringPattern0.skipAfter(stringExaminer0, "");
      assertEquals(false, stringPattern0.getIgnoreCase());
      assertEquals(false, boolean0);
  }
}
