/*
 * This file was automatically generated by EvoSuite
 */

package org.pf.text;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Map;
import java.util.Properties;
import org.junit.BeforeClass;
import org.pf.text.StringPattern;
import org.pf.text.StringUtil;

@RunWith(EvoSuiteRunner.class)
public class StringUtilEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String string0 = stringUtil0.suffix("]5j$`('wd(", "]5j$`('wd(");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      // Undeclared exception!
      try {
        stringUtil0.stackTrace((Throwable) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String string0 = stringUtil0.prefix("", "UG8ErbP@z{t)");
      assertNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String[] stringArray0 = stringUtil0.substrings(";)}eZ +", ";)}eZ +");
      assertNotNull(stringArray0);
  }

  @Test
  public void test4()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String string0 = stringUtil0.getDelimitedSubstring("&L# X-zbY%9H'=\r<", "&L# X-zbY%9H'=\r<");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test5()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String[] stringArray0 = new String[6];
      String[] stringArray1 = stringUtil0.remove(stringArray0, "\"9v");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test
  public void test6()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String string0 = stringUtil0.upTo("bCjU<b`OEnu@v)@j<", (String) null);
      assertNotNull(string0);
      assertEquals("bCjU<b`OEnu@v)@j<", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String string0 = stringUtil0.leftPad(3, (-892));
      assertNotNull(string0);
      assertEquals("3", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String[] stringArray0 = stringUtil0.allParts("", "");
      assertNotNull(stringArray0);
      
      String[] stringArray1 = stringUtil0.appendIfNotThere(stringArray0, stringArray0);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test
  public void test9()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      Properties properties0 = stringUtil0.asProperties((String) null);
      Properties properties1 = stringUtil0.toProperties((String) null, properties0);
      assertSame(properties0, properties1);
  }

  @Test
  public void test10()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      Map<Object, Object> map0 = stringUtil0.asMap("}5/9~D-ub3y5yf", "}5/9~D-ub3y5yf", "}5/9~D-ub3y5yf");
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      stringUtil0.toMap("}5/9~D-ub3y5yf", (Map) map0);
      assertEquals(1, map0.size());
      assertEquals(false, map0.isEmpty());
  }

  @Test
  public void test11()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String string0 = stringUtil0.startingFrom("}5/9~D-ub3y5yf", (String) null);
      assertEquals("}5/9~D-ub3y5yf", string0);
      assertNotNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String string0 = stringUtil0.rightPad(1, 1);
      assertEquals("1", string0);
      assertNotNull(string0);
  }

  @Test
  public void test13()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      Map<Object, Object> map0 = stringUtil0.asMap("");
      assertNotNull(map0);
      assertEquals(true, map0.isEmpty());
  }

  @Test
  public void test14()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String[] stringArray0 = stringUtil0.words("");
      assertNotNull(stringArray0);
  }

  @Test
  public void test15()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String[] stringArray0 = stringUtil0.allSubstrings("lib", "i");
      assertNotNull(stringArray0);
  }

  @Test
  public void test16()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String string0 = stringUtil0.center(":V*u=1LWI", 1643);
      assertEqualsustring0);
      assertNotNull(string0);
  }

  @Test
  public void test17()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String[] stringArray0 = stringUtil0.substrings((String) null, (String) null, false);
      String string0 = stringUtil0.asString(stringArray0);
      assertEquals("", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String string0 = stringUtil0.rightPad("v", 1);
      assertEquals("v", string0);
      assertNotNull(string0);
  }

  @Test
  public void test19()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String string0 = stringUtil0.leftPad("z(u^2#+xts6282\"q+>=", 1471);
      assertNotNull(string0);
      assertEqualsz(u^2#+xts6282\"q+>=", string0);
  }

  @Test
  public void test20()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      Map<Object, Object> map0 = stringUtil0.asMap("&L# X-zbY%9H'=\r<", "");
      assertEquals(1, map0.size());
      assertNotNull(map0);
  }

  @Test
  public void test21()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      Properties properties0 = new Properties();
      Map<Object, Object> map0 = stringUtil0.toMap("EkUS@,", "EkUS@,", (Map) properties0);
      assertNotNull(map0);
      assertEquals(true, map0.isEmpty());
  }

  @Test
  public void test22()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String[] stringArray0 = stringUtil0.appendIfNotThere((String[]) null, "");
      assertNotNull(stringArray0);
  }

  @Test
  public void test23()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String string0 = stringUtil0.replaceAll("\"9v", "\"9v", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test24()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String string0 = stringUtil0.replaceAll("*", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test25()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String string0 = stringUtil0.replaceAll("log", "5>=T&b_Bna0\"!%", "");
      assertEquals("log", string0);
      assertNotNull(string0);
  }

  @Test
  public void test26()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String string0 = stringUtil0.repeat('W', 'W');
      assertNotNull(string0);
      assertEquals("WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW", string0);
  }

  @Test
  public void test27()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String string0 = stringUtil0.getDelimitedSubstring((String) null, (String) null, (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test28()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String string0 = stringUtil0.getDelimitedSubstring("0# !yNv*x^", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test29()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String string0 = stringUtil0.getDelimitedSubstring("]5J$`('Wd(", ";)}eZ +", "");
      assertEquals("", string0);
  }

  @Test
  public void test30()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String string0 = stringUtil0.getDelimitedSubstring("]5J$`('Wd(", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test31()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String string0 = stringUtil0.center("nEZs2vLuG+;2", (-1188));
      assertEquals("nEZs2vLuG+;2", string0);
      assertNotNull(string0);
  }

  @Test
  public void test32()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String[] stringArray0 = new String[2];
      String[] stringArray1 = stringUtil0.append(stringArray0, stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test
  public void test33()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String[] stringArray0 = new String[2];
      String[] stringArray1 = stringUtil0.appendIfNotThere(stringArray0, (String) null);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test
  public void test34()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String[] stringArray0 = stringUtil0.remove((String[]) null, "&L# X-zbY%9H'=\r<");
      assertNull(stringArray0);
  }

  @Test
  public void test35()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String[] stringArray0 = stringUtil0.substrings("&L# X-zbY%9H'=\r<", "&L# X-zbY%9H'=\r<", true);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = stringUtil0.removeNull(stringArray0);
      assertNotNull(stringArray1);
      
      String[] stringArray2 = stringUtil0.remove(stringArray1, "UG8ErbP@z{t)");
      assertNotNull(stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertSame(stringArray1, stringArray2);
  }

  @Test
  public void test36()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String[] stringArray0 = stringUtil0.removeNull((String[]) null);
      assertNull(stringArray0);
  }

  @Test
  public void test37()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "crash";
      stringArray0[2] = "=Q;";
      String string0 = stringUtil0.asString(stringArray0, "d");
      assertNotNull(string0);
      assertEquals("crashdd=Q;d", string0);
  }

  @Test
  public void test38()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      StringPattern stringPattern0 = new StringPattern((String) null, '5');
      boolean boolean0 = stringUtil0.contains((String[]) null, stringPattern0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test39()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String[] stringArray0 = stringUtil0.parts("H", "H", false);
      assertNotNull(stringArray0);
      
      StringPattern stringPattern0 = new StringPattern("1");
      boolean boolean0 = stringUtil0.contains(stringArray0, stringPattern0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test40()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String[] stringArray0 = new String[3];
      stringArray0[2] = "xQ|zM\"^=";
      StringPattern stringPattern0 = new StringPattern("+^eD#'jv", false);
      int int0 = stringUtil0.indexOf(stringArray0, stringPattern0);
      assertEquals((-1), int0);
  }

  @Test
  public void test41()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String[] stringArray0 = new String[8];
      int int0 = stringUtil0.indexOf(stringArray0, (StringPattern) null);
      assertEquals(0, int0);
  }

  @Test
  public void test42()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String[] stringArray0 = stringUtil0.parts("", (String) null, true);
      assertNotNull(stringArray0);
      
      int int0 = stringUtil0.indexOf(stringArray0, (StringPattern) null);
      assertEquals((-1), int0);
  }

  @Test
  public void test43()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      assertNotNull(stringUtil0);
      
      String[] stringArray0 = new String[5];
      boolean boolean0 = stringUtil0.contains(stringArray0, "&L# X-zbY%9H'=\r<", false);
      assertEquals(false, boolean0);
  }

  @Test
  public void test44()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "`m%)55@,h;'t.1 a";
      StringPattern stringPattern0 = new StringPattern("`m%)55@,h;'t.1 a", true, 'D');
      boolean boolean0 = stringUtil0.contains(stringArray0, stringPattern0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test45()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String[] stringArray0 = new String[8];
      boolean boolean0 = stringUtil0.containsIgnoreCase(stringArray0, (String) null);
      assertEquals(true, boolean0);
  }

  @Test
  public void test46()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String[] stringArray0 = new String[6];
      String[] stringArray1 = stringUtil0.copyFrom(stringArray0, 0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
  }

  @Test
  public void test47()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String[] stringArray0 = stringUtil0.copyFrom((String[]) null, (-1));
      assertNull(stringArray0);
  }

  @Test
  public void test48()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String[] stringArray0 = new String[6];
      String[] stringArray1 = stringUtil0.copyFrom(stringArray0, 0, 1874);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test
  public void test49()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String[] stringArray0 = new String[15];
      String[] stringArray1 = stringUtil0.copyFrom(stringArray0, 0, (-1));
      assertFalse(stringArray1.equals(stringArray0));
  }

  @Test
  public void test50()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String string0 = stringUtil0.cutTail((String) null, "+^ed#'jv");
      assertNull(string0);
  }

  @Test
  public void test51()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String string0 = stringUtil0.cutTail("UCx]Tzi1W|", "6cZh<<`wU^/p");
      assertNotNull(string0);
      assertEquals("UCx]Tzi1W|", string0);
  }

  @Test
  public void test52()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String string0 = stringUtil0.cutTail("8:EhahAdNh~", (String) null);
      assertEquals("8:EhahAdNh~", string0);
      assertNotNull(string0);
  }

  @Test
  public void test53()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String string0 = stringUtil0.cutTail("", "");
      assertEquals("", string0);
  }

  @Test
  public void test54()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String string0 = stringUtil0.cutHead((String) null, (String) null);
      assertNull(string0);
  }

  @Test
  public void test55()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String string0 = stringUtil0.cutHead("crash", (String) null);
      assertEquals("crash", string0);
      assertNotNull(string0);
  }

  @Test
  public void test56()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String string0 = stringUtil0.cutHead(".,^:I|r[\u0000", ".,^:I|r[\u0000");
      assertNotNull(string0);
      assertEquals(",^:I|r[\u0000", string0);
  }

  @Test
  public void test57()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String string0 = stringUtil0.cutHead("\ru/;FNBaIq<-r9*", "~ri");
      assertEquals("\ru/;FNBaIq<-r9*", string0);
  }

  @Test
  public void test58()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String[] stringArray0 = stringUtil0.splitNameValue((String) null, (String) null);
      assertNotNull(stringArray0);
  }

  @Test
  public void test59()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String string0 = stringUtil0.reverse(".torrnt");
      assertEquals("tnrrot.", string0);
      assertNotNull(string0);
  }

  @Test
  public void test60()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String string0 = stringUtil0.reverse((String) null);
      assertNull(string0);
  }

  @Test
  public void test61()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      Map<Object, Object> map0 = stringUtil0.asMap("", "", "]5j$`('wd(");
      assertEquals(0, map0.size());
      assertNotNull(map0);
  }

  @Test
  public void test62()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String[] stringArray0 = stringUtil0.allParts((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test
  public void test63()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String[] stringArray0 = stringUtil0.parts("O^'-5>5A`", "^'-5>5A`", true);
      assertNotNull(stringArray0);
  }

  @Test
  public void test64()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String[] stringArray0 = stringUtil0.substrings("0# !yNv*x^", (String) null, false);
      assertNotNull(stringArray0);
  }

  @Test
  public void test65()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String[] stringArray0 = stringUtil0.substrings("", "");
      assertNotNull(stringArray0);
  }

  @Test
  public void test66()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String[] stringArray0 = stringUtil0.substrings("&L# X-zbY%9H'=\r<", "&L# X-zbY%9H'=\r<", true);
      assertNotNull(stringArray0);
      
      int int0 = stringUtil0.indexOfIgnoreCase(stringArray0, "&L# X-zbY%9H'=\r<");
      assertEquals((-1), int0);
  }

  @Test
  public void test67()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      assertNotNull(stringUtil0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-f*a')RcD(";
      boolean boolean0 = stringUtil0.contains(stringArray0, "~RI", true);
      assertEquals(false, boolean0);
  }

  @Test
  public void test68()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String string0 = stringUtil0.prefix((String) null, (String) null);
      assertNull(string0);
  }

  @Test
  public void test69()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String string0 = stringUtil0.prefix("8:EhahAdNh~", (String) null);
      assertNull(string0);
  }

  @Test
  public void test70()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String string0 = stringUtil0.prefix("", "", true);
      assertEquals("", string0);
  }

  @Test
  public void test71()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String string0 = stringUtil0.upTo("^'-5>5A`", "O^'-5>5A`");
      assertNotNull(string0);
      assertEquals("^'-5>5A`", string0);
  }

  @Test
  public void test72()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String string0 = stringUtil0.suffix((String) null, (String) null);
      assertNull(string0);
  }

  @Test
  public void test73()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String string0 = stringUtil0.suffix("uT4]", (String) null);
      assertNull(string0);
  }

  @Test
  public void test74()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String string0 = stringUtil0.suffix("", "&L# X-zbY%9H'=\r<", true);
      assertNull(string0);
  }

  @Test
  public void test75()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String string0 = stringUtil0.suffix("t*)X`1~A", "gg=U4bK=>?sQIP", false);
      assertNotNull(string0);
      assertEquals("t*)X`1~A", string0);
  }

  @Test
  public void test76()  throws Throwable  {
      StringUtil stringUtil0 = new StringUtil();
      String[] stringArray0 = new String[6];
      stringArray0[2] = "]5j$`('wd(";
      String[] stringArray1 = stringUtil0.removeNull(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test
  public void test77()  throws Throwable  {
      StringUtil stringUtil0 = StringUtil.current();
      String[] stringArray0 = new String[6];
      String[] stringArray1 = stringUtil0.remove(stringArray0, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
  }
}
