/*
 * This file was automatically generated by EvoSuite
 */

package org.pf.file;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.zip.ZipFile;
import org.junit.BeforeClass;
import org.pf.file.FileLocator;

@RunWith(EvoSuiteRunner.class)
public class FileLocatorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      FileLocator fileLocator0 = FileLocator.create("A");
      assertNotNull(fileLocator0);
      
      fileLocator0.setZipFile((ZipFile) null);
      assertEquals(false, fileLocator0.isInArchive());
      assertEquals(false, fileLocator0.exists());
      assertEquals(false, fileLocator0.getExists());
  }

  @Test
  public void test1()  throws Throwable  {
      File file0 = new File("file://mnt/fastdata/ac1gf/SF110/dist/104_vuze/V");
      FileLocator fileLocator0 = FileLocator.create(file0);
      assertNotNull(fileLocator0);
      
      URL uRL0 = fileLocator0.toURL();
      assertNotNull(uRL0);
      assertEquals(false, fileLocator0.getExists());
      assertEquals("/mnt/fastdata/ac1gf/SF110/dist/104_vuze/V", uRL0.getFile());
  }

  @Test
  public void test2()  throws Throwable  {
      File file0 = new File("file://mnt/fastdata/ac1gf/SF110/dist/104_vuze/V");
      FileLocator fileLocator0 = FileLocator.create(file0);
      assertNotNull(fileLocator0);
      
      fileLocator0.setExists(true);
      fileLocator0.setParent(fileLocator0);
      // Undeclared exception!
      try {
        fileLocator0.isFile();
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      FileLocator fileLocator0 = FileLocator.create("=");
      assertNotNull(fileLocator0);
      
      String string0 = fileLocator0.getStandardizedAbsolutePath();
      assertEquals(false, fileLocator0.exists());
      assertNotNull(string0);
      assertEquals("/mnt/fastdata/ac1gf/SF110/dist/104_vuze/=", string0);
      assertEquals("=", fileLocator0.getStandardizedPath());
  }

  @Test
  public void test4()  throws Throwable  {
      FileLocator fileLocator0 = FileLocator.create("A");
      assertNotNull(fileLocator0);
      
      File file0 = fileLocator0.realFile();
      assertNotNull(file0);
      assertEquals(false, fileLocator0.isDirectory());
      assertEquals(false, fileLocator0.exists());
  }

  @Test
  public void test5()  throws Throwable  {
      FileLocator fileLocator0 = FileLocator.create("A");
      assertNotNull(fileLocator0);
      
      String string0 = fileLocator0.getStandardizedPath();
      assertEquals(false, fileLocator0.isDirectory());
      assertNotNull(string0);
      assertEquals("A", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      FileLocator fileLocator0 = FileLocator.create("=");
      assertNotNull(fileLocator0);
      
      boolean boolean0 = fileLocator0.isFile();
      assertEquals(false, boolean0);
      assertEquals(false, fileLocator0.isInArchive());
      assertEquals(false, fileLocator0.exists());
  }

  @Test
  public void test7()  throws Throwable  {
      FileLocator fileLocator0 = FileLocator.create("=");
      assertNotNull(fileLocator0);
      
      boolean boolean0 = fileLocator0.isDirectory();
      assertEquals(false, fileLocator0.isInArchive());
      assertEquals(false, fileLocator0.exists());
      assertEquals(false, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      FileLocator fileLocator0 = FileLocator.create("crash");
      assertNotNull(fileLocator0);
      assertEquals(false, fileLocator0.getExists());
      
      fileLocator0.setExists(true);
      boolean boolean0 = fileLocator0.isDirectory();
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      FileLocator fileLocator0 = FileLocator.create("=");
      assertNotNull(fileLocator0);
      
      fileLocator0.size();
      assertEquals(false, fileLocator0.isInArchive());
      assertEquals(false, fileLocator0.getExists());
      assertEquals(false, fileLocator0.exists());
  }

  @Test
  public void test10()  throws Throwable  {
      FileLocator fileLocator0 = FileLocator.create("!d;)+)PrsTfx");
      assertNotNull(fileLocator0);
      assertEquals(false, fileLocator0.isInArchive());
      
      fileLocator0.setParent(fileLocator0);
      // Undeclared exception!
      try {
        fileLocator0.size();
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      FileLocator fileLocator0 = FileLocator.create("A");
      assertNotNull(fileLocator0);
      
      fileLocator0.lastModified();
      assertEquals(false, fileLocator0.isInArchive());
      assertEquals(false, fileLocator0.exists());
      assertEquals(false, fileLocator0.isDirectory());
  }

  @Test
  public void test12()  throws Throwable  {
      File file0 = new File("file://mnt/fastdata/ac1gf/SF110/dist/104_vuze/V");
      FileLocator fileLocator0 = FileLocator.create(file0);
      assertEquals(false, fileLocator0.isInArchive());
      assertNotNull(fileLocator0);
      
      fileLocator0.setParent(fileLocator0);
      // Undeclared exception!
      try {
        fileLocator0.lastModified();
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      File file0 = new File("[*Feo3\"|JM>r", "[*Feo3\"|JM>r");
      FileLocator fileLocator0 = FileLocator.create(file0);
      assertNotNull(fileLocator0);
      
      try {
        fileLocator0.getInputStream();
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * [*Feo3\"|JM>r/[*Feo3\"|JM>r (No such file or directory)
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      FileLocator fileLocator0 = FileLocator.create("");
      assertNotNull(fileLocator0);
      
      fileLocator0.setParent(fileLocator0);
      try {
        fileLocator0.getInputStream();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      FileLocator fileLocator0 = FileLocator.create("*,DeD(fVYRGe5");
      assertEquals(false, fileLocator0.isInArchive());
      assertNotNull(fileLocator0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "*,DeD(fVYRGe5";
      fileLocator0.setParent(fileLocator0);
      // Undeclared exception!
      try {
        fileLocator0.initFromPath(stringArray0, false);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      FileLocator fileLocator0 = FileLocator.create("/e%#[.8.n:U5E1~@1=");
      assertEquals(false, fileLocator0.isInArchive());
      assertNotNull(fileLocator0);
      
      fileLocator0.setParent(fileLocator0);
      // Undeclared exception!
      try {
        fileLocator0.getAbsolutePath();
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      File file0 = new File("file://mnt/fastdata/ac1gf/SF110/dist/104_vuze/V");
      FileLocator fileLocator0 = FileLocator.create(file0);
      assertEquals(false, fileLocator0.isInArchive());
      assertNotNull(fileLocator0);
      
      fileLocator0.setParent(fileLocator0);
      // Undeclared exception!
      try {
        fileLocator0.toURL();
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      FileLocator fileLocator0 = FileLocator.create("=");
      assertNotNull(fileLocator0);
      
      fileLocator0.container();
      assertEquals(false, fileLocator0.isInArchive());
      assertEquals(false, fileLocator0.exists());
      assertEquals(false, fileLocator0.getExists());
  }
}
