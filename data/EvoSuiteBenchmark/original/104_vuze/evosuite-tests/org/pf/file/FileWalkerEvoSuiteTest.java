/*
 * This file was automatically generated by EvoSuite
 */

package org.pf.file;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.FilenameFilter;
import org.junit.BeforeClass;
import org.pf.file.ExtendedFileFilter;
import org.pf.file.FileHandler;
import org.pf.file.FileWalker;

@RunWith(EvoSuiteRunner.class)
public class FileWalkerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      FileWalker fileWalker0 = new FileWalker((FileHandler) null, 'F');
      long long0 = fileWalker0.walkThrough("RY)n(0&", "RY)n(0&", true);
      assertEquals(true, fileWalker0.getGoOn());
      assertEquals('F', fileWalker0.getDigitWildcardChar());
      assertEquals(0L, long0);
  }

  @Test
  public void test1()  throws Throwable  {
      FileWalker fileWalker0 = new FileWalker((FileHandler) null);
      long long0 = fileWalker0.walkThrough("RY)n(0&", "RY)n(0&", true);
      assertEquals(0L, long0);
      assertEquals(true, fileWalker0.getGoOn());
      assertEquals(false, fileWalker0.hasDigitWildcard());
  }

  @Test
  public void test2()  throws Throwable  {
      FileWalker fileWalker0 = new FileWalker((FileHandler) null);
      boolean boolean0 = fileWalker0.getGoOn();
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      FileWalker fileWalker0 = new FileWalker((FileHandler) null);
      ExtendedFileFilter extendedFileFilter0 = new ExtendedFileFilter();
      // Undeclared exception!
      try {
        fileWalker0.walkThrough(".", (FilenameFilter) extendedFileFilter0, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      FileWalker fileWalker0 = new FileWalker((FileHandler) null);
      long long0 = fileWalker0.walkThrough("RY)n(0&", "RY)n(0&", false);
      assertEquals(0L, long0);
      assertEquals(false, fileWalker0.hasDigitWildcard());
      assertEquals(true, fileWalker0.getGoOn());
  }

  @Test
  public void test5()  throws Throwable  {
      FileWalker fileWalker0 = new FileWalker((FileHandler) null);
      fileWalker0.setDigitWildcardChar('\u0000');
      assertEquals(false, fileWalker0.hasDigitWildcard());
      assertEquals(true, fileWalker0.getGoOn());
  }

  @Test
  public void test6()  throws Throwable  {
      FileWalker fileWalker0 = new FileWalker((FileHandler) null);
      char char0 = fileWalker0.getDigitWildcardChar();
      assertEquals(false, fileWalker0.hasDigitWildcard());
      assertEquals(true, fileWalker0.getGoOn());
      assertEquals('\u0000', char0);
  }
}
