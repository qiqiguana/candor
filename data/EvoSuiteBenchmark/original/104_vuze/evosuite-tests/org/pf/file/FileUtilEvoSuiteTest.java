/*
 * This file was automatically generated by EvoSuite
 */

package org.pf.file;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import org.junit.BeforeClass;
import org.pf.file.FileUtil;
import org.pf.file.LineProcessor;

@RunWith(EvoSuiteRunner.class)
public class FileUtilEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      FileUtil fileUtil0 = FileUtil.current();
      StringReader stringReader0 = new StringReader("eU");
      StringWriter stringWriter0 = new StringWriter(775);
      fileUtil0.copyText((Reader) stringReader0, stringWriter0);
      assertEquals("U", stringWriter0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      FileUtil fileUtil0 = FileUtil.current();
      try {
        fileUtil0.readTextFrom("F QAv<'L]{");
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * F QAv<'L]{ (No such file or directory)
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      FileUtil fileUtil0 = FileUtil.current();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) byteArrayInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PrintStream printStream0 = new PrintStream((OutputStream) pipedOutputStream0, false);
      fileUtil0.copyStream((InputStream) bufferedInputStream0, (OutputStream) printStream0);
      assertEquals(true, printStream0.checkError());
  }

  @Test
  public void test3()  throws Throwable  {
      FileUtil fileUtil0 = FileUtil.current();
      // Undeclared exception!
      try {
        fileUtil0.readTextFrom((InputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      FileUtil fileUtil0 = FileUtil.current();
      File file0 = new File("9xfkc7%3Q.X0Cd]");
      try {
        fileUtil0.readTextFrom(file0);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * 9xfkc7%3Q.X0Cd] (No such file or directory)
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      FileUtil fileUtil0 = FileUtil.current();
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      fileUtil0.copyText((InputStream) byteArrayInputStream0, stringWriter0);
      assertEquals(-1, byteArrayInputStream0.read());
      assertEquals("\u0000\u0000\u0000\u0000\n\u0000", stringWriter0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      FileUtil fileUtil0 = FileUtil.current();
      try {
        fileUtil0.processTextLines("YO}CP.OQn<q", (LineProcessor) null);
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * YO}CP.OQn<q (No such file or directory)
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      FileUtil fileUtil0 = FileUtil.current();
      // Undeclared exception!
      try {
        fileUtil0.processTextLines((String) null, (LineProcessor) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * filename must not be null
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      FileUtil fileUtil0 = FileUtil.current();
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)0, (int) (byte) (-60));
      // Undeclared exception!
      try {
        fileUtil0.processTextLines((InputStream) byteArrayInputStream0, (LineProcessor) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * processor must not be null
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      FileUtil fileUtil0 = FileUtil.current();
      // Undeclared exception!
      try {
        fileUtil0.processTextLines((InputStream) null, (LineProcessor) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * inStream must not be null
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      FileUtil fileUtil0 = FileUtil.current();
      // Undeclared exception!
      try {
        fileUtil0.copyStream((InputStream) null, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      FileUtil fileUtil0 = FileUtil.current();
      String string0 = fileUtil0.standardize((String) null);
      assertNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      FileUtil fileUtil0 = FileUtil.current();
      // Undeclared exception!
      try {
        fileUtil0.standardizeFilename((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      FileUtil fileUtil0 = FileUtil.current();
      String string0 = fileUtil0.standardizeFilename("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      FileUtil fileUtil0 = FileUtil.current();
      String string0 = fileUtil0.standardize("4{d[zUHyH`M#[)=e:");
      assertEquals("4{D[ZUHYH`M#[)=E:", string0);
      assertNotNull(string0);
  }

  @Test
  public void test15()  throws Throwable  {
      FileUtil fileUtil0 = FileUtil.current();
      String string0 = fileUtil0.standardizeFilename("/4{d[zUHyH`M#[)=eJ3");
      assertEquals("/4{d[zUHyH`M#[)=eJ3", string0);
      assertNotNull(string0);
  }

  @Test
  public void test16()  throws Throwable  {
      FileUtil fileUtil0 = FileUtil.current();
      String string0 = fileUtil0.standardizeFilename(".");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test17()  throws Throwable  {
      FileUtil fileUtil0 = FileUtil.current();
      String string0 = fileUtil0.standardizeFilename("..");
      assertNotNull(string0);
      assertEquals("..", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      FileUtil fileUtil0 = FileUtil.current();
      assertNotNull(fileUtil0);
      
      String[] stringArray0 = new String[9];
      int int0 = fileUtil0.indexOfPreceedingNotNullElement(stringArray0, 1);
      assertEquals((-1), int0);
  }

  @Test
  public void test19()  throws Throwable  {
      FileUtil fileUtil0 = FileUtil.current();
      assertNotNull(fileUtil0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "w";
      int int0 = fileUtil0.indexOfPreceedingNotNullElement(stringArray0, 1);
      assertEquals(0, int0);
  }

  @Test
  public void test20()  throws Throwable  {
      FileUtil fileUtil0 = FileUtil.current();
      assertNotNull(fileUtil0);
      
      String[] stringArray0 = new String[15];
      stringArray0[0] = "..";
      int int0 = fileUtil0.indexOfPreceedingNotNullElement(stringArray0, 1);
      assertEquals((-1), int0);
  }
}
