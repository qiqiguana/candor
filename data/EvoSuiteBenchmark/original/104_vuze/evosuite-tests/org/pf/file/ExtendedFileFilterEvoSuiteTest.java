/*
 * This file was automatically generated by EvoSuite
 */

package org.pf.file;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.File;
import java.util.LinkedList;
import java.util.List;
import org.junit.BeforeClass;
import org.pf.file.ExtendedFileFilter;
import org.pf.text.StringPattern;

@RunWith(EvoSuiteRunner.class)
public class ExtendedFileFilterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ExtendedFileFilter extendedFileFilter0 = new ExtendedFileFilter();
      extendedFileFilter0.addPattern("", '4');
      assertEquals(1, extendedFileFilter0.getDirHandling());
  }

  @Test
  public void test1()  throws Throwable  {
      ExtendedFileFilter extendedFileFilter0 = new ExtendedFileFilter();
      extendedFileFilter0.checkNameOfDirectories();
      assertEquals(1, extendedFileFilter0.getDirHandling());
  }

  @Test
  public void test2()  throws Throwable  {
      ExtendedFileFilter extendedFileFilter0 = new ExtendedFileFilter();
      extendedFileFilter0.addPattern("6X>Pkb");
      assertEquals(1, extendedFileFilter0.getDirHandling());
  }

  @Test
  public void test3()  throws Throwable  {
      ExtendedFileFilter extendedFileFilter0 = new ExtendedFileFilter();
      extendedFileFilter0.addPattern("", true);
      boolean boolean0 = extendedFileFilter0.checkAgainstPatterns("");
      assertEquals(1, extendedFileFilter0.getDirHandling());
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      ExtendedFileFilter extendedFileFilter0 = new ExtendedFileFilter();
      File file0 = new File("", "");
      boolean boolean0 = extendedFileFilter0.accept(file0, "");
      assertEquals(1, extendedFileFilter0.getDirHandling());
      assertEquals(false, extendedFileFilter0.mustExcludeDirectories());
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      ExtendedFileFilter extendedFileFilter0 = new ExtendedFileFilter();
      LinkedList<StringPattern> linkedList0 = new LinkedList<StringPattern>();
      extendedFileFilter0.setStringPatterns((List) linkedList0);
      assertEquals(1, extendedFileFilter0.getDirHandling());
  }

  @Test
  public void test6()  throws Throwable  {
      ExtendedFileFilter extendedFileFilter0 = new ExtendedFileFilter();
      extendedFileFilter0.addPattern("", true, '>');
      assertEquals(1, extendedFileFilter0.getDirHandling());
  }

  @Test
  public void test7()  throws Throwable  {
      ExtendedFileFilter extendedFileFilter0 = new ExtendedFileFilter();
      boolean boolean0 = extendedFileFilter0.accept((File) null, "0p!k2=YPaf");
      assertEquals(false, boolean0);
      assertEquals(1, extendedFileFilter0.getDirHandling());
  }

  @Test
  public void test8()  throws Throwable  {
      ExtendedFileFilter extendedFileFilter0 = new ExtendedFileFilter();
      extendedFileFilter0.alwaysIncludeDirectories();
      File file0 = new File("");
      boolean boolean0 = extendedFileFilter0.accept(file0, "");
      assertEquals(2, extendedFileFilter0.getDirHandling());
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      ExtendedFileFilter extendedFileFilter0 = new ExtendedFileFilter();
      extendedFileFilter0.alwaysExcludeDirectories();
      File file0 = new File("", "");
      boolean boolean0 = extendedFileFilter0.accept(file0, "");
      assertEquals(3, extendedFileFilter0.getDirHandling());
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      ExtendedFileFilter extendedFileFilter0 = new ExtendedFileFilter();
      extendedFileFilter0.addPattern("0p!k2=YPaf", false);
      boolean boolean0 = extendedFileFilter0.checkAgainstPatterns("0p!k2=YPaf");
      assertEquals(true, boolean0);
      assertEquals(1, extendedFileFilter0.getDirHandling());
  }
}
