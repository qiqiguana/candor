/*
 * This file was automatically generated by EvoSuite
 */

package org.gudy.azureus2.pluginsimpl.local.utils.resourcedownloader;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.apple.net.protocol.archiveresource.Handler;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import org.gudy.azureus2.plugins.utils.resourcedownloader.ResourceDownloader;
import org.gudy.azureus2.plugins.utils.resourcedownloader.ResourceDownloaderDelayedFactory;
import org.gudy.azureus2.pluginsimpl.local.utils.resourcedownloader.ResourceDownloaderAlternateImpl;
import org.gudy.azureus2.pluginsimpl.local.utils.resourcedownloader.ResourceDownloaderDelayedImpl;
import org.gudy.azureus2.pluginsimpl.local.utils.resourcedownloader.ResourceDownloaderFactoryImpl;
import org.gudy.azureus2.pluginsimpl.local.utils.resourcedownloader.ResourceDownloaderFileImpl;
import org.gudy.azureus2.pluginsimpl.local.utils.resourcedownloader.ResourceDownloaderMetaRefreshImpl;
import org.gudy.azureus2.pluginsimpl.local.utils.resourcedownloader.ResourceDownloaderTimeoutImpl;
import org.gudy.azureus2.pluginsimpl.local.utils.resourcedownloader.ResourceDownloaderURLImpl;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ResourceDownloaderFactoryImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ResourceDownloaderFactoryImpl resourceDownloaderFactoryImpl0 = new ResourceDownloaderFactoryImpl();
      ResourceDownloaderAlternateImpl resourceDownloaderAlternateImpl0 = (ResourceDownloaderAlternateImpl)resourceDownloaderFactoryImpl0.getSourceforgeDownloader("3ou ", "3ou ");
      assertNotNull(resourceDownloaderAlternateImpl0);
      
      resourceDownloaderFactoryImpl0.getRetryDownloader((ResourceDownloader) resourceDownloaderAlternateImpl0, 1587);
      assertEquals("[http://cogent.dl.sourceforge.net/sourceforge/3ou /3ou,http://switch.dl.sourceforge.net/sourceforge/3ou /3ou,http://mesh.dl.sourceforge.net/sourceforge/3ou /3ou,http://peterhost.dl.sourceforge.net/sourceforge/3ou /3ou,http://internap.dl.sourceforge.net/sourceforge/3ou /3ou,http://ufpr.dl.sourceforge.net/sourceforge/3ou /3ou,http://keihanna.dl.sourceforge.net/sourceforge/3ou /3ou,http://umn.dl.sourceforge.net/sourceforge/3ou /3ou,http://ovh.dl.sourceforge.net/sourceforge/3ou /3ou,http://optusnet.dl.sourceforge.net/sourceforge/3ou /3ou,http://citkit.dl.sourceforge.net/sourceforge/3ou /3ou,http://jaist.dl.sourceforge.net/sourceforge/3ou /3ou,http://kent.dl.sourceforge.net/sourceforge/3ou /3ou,http://surfnet.dl.sourceforge.net/sourceforge/3ou /3ou,http://puzzle.dl.sourceforge.net/sourceforge/3ou /3ou,http://heanet.dl.sourceforge.net/sourceforge/3ou /3ou,http://nchc.dl.sourceforge.net/sourceforge/3ou /3ou,http://easynews.dl.sourceforge.net/sourceforge/3ou /3ou]", resourceDownloaderAlternateImpl0.getName());
  }

  @Test
  public void test1()  throws Throwable  {
      ResourceDownloaderFactoryImpl resourceDownloaderFactoryImpl0 = (ResourceDownloaderFactoryImpl)ResourceDownloaderFactoryImpl.getSingleton();
      assertNotNull(resourceDownloaderFactoryImpl0);
  }

  @Test
  public void test2()  throws Throwable  {
      ResourceDownloaderFactoryImpl resourceDownloaderFactoryImpl0 = new ResourceDownloaderFactoryImpl();
      Handler handler0 = new Handler();
      URL uRL0 = new URL("/sourceforge/@ngxc8_sc0c|iqrr/@ngxc8_sc0c|iqrr.torrent", "/sourceforge/@ngxc8_sc0c|iqrr/@ngxc8_sc0c|iqrr.torrent", 0, "/sourceforge/@ngxc8_sc0c|iqrr/@ngxc8_sc0c|iqrr.torrent", (URLStreamHandler) handler0);
      ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = (ResourceDownloaderURLImpl)resourceDownloaderFactoryImpl0.create(uRL0, true);
      // Undeclared exception!
      try {
        resourceDownloaderFactoryImpl0.getSuffixBasedDownloader((ResourceDownloader) resourceDownloaderURLImpl0);
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class org.gudy.azureus2.pluginsimpl.local.PluginInitializer
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      ResourceDownloaderFactoryImpl resourceDownloaderFactoryImpl0 = new ResourceDownloaderFactoryImpl();
      ResourceDownloaderDelayedImpl resourceDownloaderDelayedImpl0 = (ResourceDownloaderDelayedImpl)resourceDownloaderFactoryImpl0.create((ResourceDownloaderDelayedFactory) null);
      assertEquals("<...>", resourceDownloaderDelayedImpl0.getName());
  }

  @Test
  public void test4()  throws Throwable  {
      ResourceDownloaderFactoryImpl resourceDownloaderFactoryImpl0 = new ResourceDownloaderFactoryImpl();
      ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = (ResourceDownloaderURLImpl)resourceDownloaderFactoryImpl0.create((URL) null, "}K#/ ", "}K#/ ");
      ResourceDownloaderMetaRefreshImpl resourceDownloaderMetaRefreshImpl0 = (ResourceDownloaderMetaRefreshImpl)resourceDownloaderFactoryImpl0.getMetaRefreshDownloader((ResourceDownloader) resourceDownloaderURLImpl0);
      assertEquals(false, resourceDownloaderMetaRefreshImpl0.isCancelled());
  }

  @Test
  public void test5()  throws Throwable  {
      ResourceDownloaderFactoryImpl resourceDownloaderFactoryImpl0 = new ResourceDownloaderFactoryImpl();
      ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = (ResourceDownloaderURLImpl)resourceDownloaderFactoryImpl0.create((URL) null, "wb-p5r[<l");
      ResourceDownloaderURLImpl resourceDownloaderURLImpl1 = (ResourceDownloaderURLImpl)resourceDownloaderFactoryImpl0.getSuffixBasedDownloader((ResourceDownloader) resourceDownloaderURLImpl0);
      assertEquals((-1L), resourceDownloaderURLImpl1.getSize());
  }

  @Test
  public void test6()  throws Throwable  {
      ResourceDownloaderFactoryImpl resourceDownloaderFactoryImpl0 = new ResourceDownloaderFactoryImpl();
      ResourceDownloader[] resourceDownloaderArray0 = new ResourceDownloader[6];
      // Undeclared exception!
      try {
        resourceDownloaderFactoryImpl0.getRandomDownloader(resourceDownloaderArray0, (-1));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      ResourceDownloaderFactoryImpl resourceDownloaderFactoryImpl0 = new ResourceDownloaderFactoryImpl();
      ResourceDownloader[] resourceDownloaderArray0 = new ResourceDownloader[2];
      // Undeclared exception!
      try {
        resourceDownloaderFactoryImpl0.getAlternateDownloader(resourceDownloaderArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      ResourceDownloaderFactoryImpl resourceDownloaderFactoryImpl0 = new ResourceDownloaderFactoryImpl();
      ResourceDownloader[] resourceDownloaderArray0 = new ResourceDownloader[8];
      // Undeclared exception!
      try {
        resourceDownloaderFactoryImpl0.getAlternateDownloader(resourceDownloaderArray0, (-6));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      ResourceDownloaderFactoryImpl resourceDownloaderFactoryImpl0 = new ResourceDownloaderFactoryImpl();
      ResourceDownloaderFileImpl resourceDownloaderFileImpl0 = (ResourceDownloaderFileImpl)resourceDownloaderFactoryImpl0.create((File) null);
      assertEquals(false, resourceDownloaderFileImpl0.isCancelled());
  }

  @Test
  public void test10()  throws Throwable  {
      ResourceDownloaderFactoryImpl resourceDownloaderFactoryImpl0 = new ResourceDownloaderFactoryImpl();
      ResourceDownloaderAlternateImpl resourceDownloaderAlternateImpl0 = (ResourceDownloaderAlternateImpl)resourceDownloaderFactoryImpl0.getSourceforgeDownloader("3ou ", "3ou ");
      assertNotNull(resourceDownloaderAlternateImpl0);
      
      ResourceDownloaderTimeoutImpl resourceDownloaderTimeoutImpl0 = (ResourceDownloaderTimeoutImpl)resourceDownloaderFactoryImpl0.getTimeoutDownloader((ResourceDownloader) resourceDownloaderAlternateImpl0, 1587);
      assertEquals("[http://ovh.dl.sourceforge.net/sourceforge/3ou /3ou,http://umn.dl.sourceforge.net/sourceforge/3ou /3ou,http://nchc.dl.sourceforge.net/sourceforge/3ou /3ou,http://easynews.dl.sourceforge.net/sourceforge/3ou /3ou,http://cogent.dl.sourceforge.net/sourceforge/3ou /3ou,http://switch.dl.sourceforge.net/sourceforge/3ou /3ou,http://optusnet.dl.sourceforge.net/sourceforge/3ou /3ou,http://surfnet.dl.sourceforge.net/sourceforge/3ou /3ou,http://citkit.dl.sourceforge.net/sourceforge/3ou /3ou,http://peterhost.dl.sourceforge.net/sourceforge/3ou /3ou,http://internap.dl.sourceforge.net/sourceforge/3ou /3ou,http://kent.dl.sourceforge.net/sourceforge/3ou /3ou,http://mesh.dl.sourceforge.net/sourceforge/3ou /3ou,http://jaist.dl.sourceforge.net/sourceforge/3ou /3ou,http://keihanna.dl.sourceforge.net/sourceforge/3ou /3ou,http://puzzle.dl.sourceforge.net/sourceforge/3ou /3ou,http://ufpr.dl.sourceforge.net/sourceforge/3ou /3ou,http://heanet.dl.sourceforge.net/sourceforge/3ou /3ou]", resourceDownloaderAlternateImpl0.getName());
      assertEquals("[http://ovh.dl.sourceforge.net/sourceforge/3ou /3ou,http://umn.dl.sourceforge.net/sourceforge/3ou /3ou,http://nchc.dl.sourceforge.net/sourceforge/3ou /3ou,http://easynews.dl.sourceforge.net/sourceforge/3ou /3ou,http://cogent.dl.sourceforge.net/sourceforge/3ou /3ou,http://switch.dl.sourceforge.net/sourceforge/3ou /3ou,http://optusnet.dl.sourceforge.net/sourceforge/3ou /3ou,http://surfnet.dl.sourceforge.net/sourceforge/3ou /3ou,http://citkit.dl.sourceforge.net/sourceforge/3ou /3ou,http://peterhost.dl.sourceforge.net/sourceforge/3ou /3ou,http://internap.dl.sourceforge.net/sourceforge/3ou /3ou,http://kent.dl.sourceforge.net/sourceforge/3ou /3ou,http://mesh.dl.sourceforge.net/sourceforge/3ou /3ou,http://jaist.dl.sourceforge.net/sourceforge/3ou /3ou,http://keihanna.dl.sourceforge.net/sourceforge/3ou /3ou,http://puzzle.dl.sourceforge.net/sourceforge/3ou /3ou,http://ufpr.dl.sourceforge.net/sourceforge/3ou /3ou,http://heanet.dl.sourceforge.net/sourceforge/3ou /3ou]: timeout=1587", resourceDownloaderTimeoutImpl0.getName());
  }

  @Test
  public void test11()  throws Throwable  {
      ResourceDownloaderFactoryImpl resourceDownloaderFactoryImpl0 = new ResourceDownloaderFactoryImpl();
      File file0 = new File("");
      URI uRI0 = file0.toURI();
      URL uRL0 = uRI0.toURL();
      ResourceDownloaderFileImpl resourceDownloaderFileImpl0 = (ResourceDownloaderFileImpl)resourceDownloaderFactoryImpl0.create(uRL0, true);
      assertEquals(false, resourceDownloaderFileImpl0.isCancelled());
  }

  @Test
  public void test12()  throws Throwable  {
      ResourceDownloaderFactoryImpl resourceDownloaderFactoryImpl0 = new ResourceDownloaderFactoryImpl();
      Handler handler0 = new Handler();
      URL uRL0 = new URL("/sourceforge/@ngxc8_sc0c|iqrr/@ngxc8_sc0c|iqrr.torrent", "/sourceforge/@ngxc8_sc0c|iqrr/@ngxc8_sc0c|iqrr.torrent", 0, "/sourceforge/@ngxc8_sc0c|iqrr/@ngxc8_sc0c|iqrr.torrent", (URLStreamHandler) handler0);
      ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = (ResourceDownloaderURLImpl)resourceDownloaderFactoryImpl0.create(uRL0, false);
      assertEquals("/sourceforge/@ngxc8_sc0c|iqrr/@ngxc8_sc0c|iqrr.torrent:///sourceforge/@ngxc8_sc0c|iqrr/@ngxc8_sc0c|iqrr.torrent:0/sourceforge/@ngxc8_sc0c|iqrr/@ngxc8_sc0c|iqrr.torrent", resourceDownloaderURLImpl0.getName());
  }

  @Test
  public void test13()  throws Throwable  {
      ResourceDownloaderFactoryImpl resourceDownloaderFactoryImpl0 = new ResourceDownloaderFactoryImpl();
      ResourceDownloaderAlternateImpl resourceDownloaderAlternateImpl0 = (ResourceDownloaderAlternateImpl)resourceDownloaderFactoryImpl0.getSourceforgeDownloader("}K#/ ", "}K#/ ");
      assertNotNull(resourceDownloaderAlternateImpl0);
      
      resourceDownloaderFactoryImpl0.getSuffixBasedDownloader((ResourceDownloader) resourceDownloaderAlternateImpl0);
      assertEquals("[http://mesh.dl.sourceforge.net/sourceforge/}K#/ /}K#/,http://switch.dl.sourceforge.net/sourceforge/}K#/ /}K#/,http://easynews.dl.sourceforge.net/sourceforge/}K#/ /}K#/,http://citkit.dl.sourceforge.net/sourceforge/}K#/ /}K#/,http://kent.dl.sourceforge.net/sourceforge/}K#/ /}K#/,http://ufpr.dl.sourceforge.net/sourceforge/}K#/ /}K#/,http://puzzle.dl.sourceforge.net/sourceforge/}K#/ /}K#/,http://jaist.dl.sourceforge.net/sourceforge/}K#/ /}K#/,http://cogent.dl.sourceforge.net/sourceforge/}K#/ /}K#/,http://peterhost.dl.sourceforge.net/sourceforge/}K#/ /}K#/,http://keihanna.dl.sourceforge.net/sourceforge/}K#/ /}K#/,http://umn.dl.sourceforge.net/sourceforge/}K#/ /}K#/,http://ovh.dl.sourceforge.net/sourceforge/}K#/ /}K#/,http://optusnet.dl.sourceforge.net/sourceforge/}K#/ /}K#/,http://nchc.dl.sourceforge.net/sourceforge/}K#/ /}K#/,http://surfnet.dl.sourceforge.net/sourceforge/}K#/ /}K#/,http://heanet.dl.sourceforge.net/sourceforge/}K#/ /}K#/,http://internap.dl.sourceforge.net/sourceforge/}K#/ /}K#/]", resourceDownloaderAlternateImpl0.getName());
  }
}
