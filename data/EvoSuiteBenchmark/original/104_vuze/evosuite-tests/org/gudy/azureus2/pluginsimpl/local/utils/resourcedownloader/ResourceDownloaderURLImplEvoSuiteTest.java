/*
 * This file was automatically generated by EvoSuite
 */

package org.gudy.azureus2.pluginsimpl.local.utils.resourcedownloader;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.apple.net.protocol.archiveresource.Handler;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.PasswordAuthentication;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLStreamHandler;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.gudy.azureus2.plugins.utils.resourcedownloader.ResourceDownloaderException;
import org.gudy.azureus2.pluginsimpl.local.utils.resourcedownloader.ResourceDownloaderBaseImpl;
import org.gudy.azureus2.pluginsimpl.local.utils.resourcedownloader.ResourceDownloaderURLImpl;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ResourceDownloaderURLImplEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      Handler handler0 = new Handler();
      URL uRL0 = new URL("AbFQ,:z", "AbFQ,:z", 82, "AbFQ,:z", (URLStreamHandler) handler0);
      ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl((ResourceDownloaderBaseImpl) null, uRL0);
      URL uRL1 = resourceDownloaderURLImpl0.getURL();
      assertEquals((-1L), resourceDownloaderURLImpl0.getSize());
      assertNotNull(uRL1);
  }

  @Test
  public void test1()  throws Throwable  {
      Handler handler0 = new Handler();
      URL uRL0 = new URL("b;K(=}-=/jaqNCq?", "b;K(=}-=/jaqNCq?", 67, "b;K(=}-=/jaqNCq?", (URLStreamHandler) handler0);
      ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl((ResourceDownloaderBaseImpl) null, uRL0, true, "b;K(=}-=/jaqNCq?", "b;K(=}-=/jaqNCq?");
      try {
        resourceDownloaderURLImpl0.download();
        fail("Expecting exception: ResourceDownloaderException");
      } catch(ResourceDownloaderException e) {
        /*
         * b;k(=}-=/jaqncq?://b;K(=}-=/jaqNCq?:67b;K(=}-=/jaqNCq?: Exception while parsing URL 'b;k(=}-=/jaqncq':no protocol: b;k(=}-=/jaqncq?://b;K(=}-=/jaqNCq?:67b;K(=}-=/jaqNCq?
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Handler handler0 = new Handler();
      URL uRL0 = new URL("mB*!", "mB*!", 56, "mB*!", (URLStreamHandler) handler0);
      ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl((ResourceDownloaderBaseImpl) null, uRL0, "mB*!", "mB*!");
      long long0 = 0L;
      try {
        long0 = resourceDownloaderURLImpl0.getSize();
        fail("Expecting exception: ResourceDownloaderException");
      } catch(ResourceDownloaderException e) {
        /*
         * mb*!://mB*!:56mB*!: Exception while parsing URL 'mb*!://mB*!:56mB*!':no protocol: mb*!://mB*!:56mB*!
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl((ResourceDownloaderBaseImpl) null, (URL) null, "", "");
      // Undeclared exception!
      try {
        resourceDownloaderURLImpl0.setProperty("", (Object) resourceDownloaderURLImpl0);
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class org.gudy.azureus2.core3.internat.MessageText
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      URL uRL0 = new URL("file", "file", 0, "file");
      ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl((ResourceDownloaderBaseImpl) null, uRL0, false, "file", "file");
      resourceDownloaderURLImpl0.setAuthenticationOutcome("file", uRL0, false);
      assertEquals((-1L), resourceDownloaderURLImpl0.getSize());
  }

  @Test
  public void test5()  throws Throwable  {
      Handler handler0 = new Handler();
      URL uRL0 = new URL("vuze", "vuze", 661, "vuze", (URLStreamHandler) handler0);
      ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl((ResourceDownloaderBaseImpl) null, uRL0, "vuze", false, "vuze", "vuze");
      resourceDownloaderURLImpl0.clearPasswords();
      assertEquals((-1L), resourceDownloaderURLImpl0.getSize());
  }

  @Test
  public void test6()  throws Throwable  {
      URL uRL0 = new URL("file", "file", 0, "file");
      ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl((ResourceDownloaderBaseImpl) null, uRL0, false, "file", "file");
      // Undeclared exception!
      try {
        resourceDownloaderURLImpl0.asyncDownload();
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * Could not initialize class org.gudy.azureus2.core3.util.TorrentUtils
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      URL uRL0 = new URL("ftp", "ftp", "ftp");
      ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl((ResourceDownloaderBaseImpl) null, uRL0, true, "ftp", "ftp");
      resourceDownloaderURLImpl0.getSize();
      long long0 = resourceDownloaderURLImpl0.getSize();
      assertEquals((-1L), long0);
  }

  @Test
  public void test8()  throws Throwable  {
      URL uRL0 = new URL("dht", "dht", "dht");
      ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl((ResourceDownloaderBaseImpl) null, uRL0, "dht", false, "dht", "dht");
      long long0 = resourceDownloaderURLImpl0.getSize();
      assertEquals((-1L), long0);
  }

  @Test
  public void test9()  throws Throwable  {
      Handler handler0 = new Handler();
      URL uRL0 = new URL("vuze", "vuze", 661, "vuze", (URLStreamHandler) handler0);
      ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl((ResourceDownloaderBaseImpl) null, uRL0, "vuze", false, "vuze", "vuze");
      long long0 = resourceDownloaderURLImpl0.getSizeSupport();
      assertEquals((-1L), resourceDownloaderURLImpl0.getSize());
      assertEquals((-1L), long0);
  }

  @Test
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          URL uRL0 = new URL("file", "file", 0, "file");
          ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl((ResourceDownloaderBaseImpl) null, uRL0, false, "file", "file");
          long long0 = 0L;
          try {
            long0 = resourceDownloaderURLImpl0.getSize();
            fail("Expecting exception: ResourceDownloaderException");
          } catch(ResourceDownloaderException e) {
            /*
             * file://file:0file: Unexpected error
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          URL uRL0 = new URL("dht", "dht", "dht");
          ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl((ResourceDownloaderBaseImpl) null, uRL0, "dht", false, "dht", "dht");
          try {
            resourceDownloaderURLImpl0.download();
            fail("Expecting exception: ResourceDownloaderException");
          } catch(ResourceDownloaderException e) {
            /*
             * dht://dhtdht: Unexpected error
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          URL uRL0 = new URL("ftp", "ftp", "ftp");
          ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl((ResourceDownloaderBaseImpl) null, uRL0, true, "ftp", "ftp");
          try {
            resourceDownloaderURLImpl0.download();
            fail("Expecting exception: ResourceDownloaderException");
          } catch(ResourceDownloaderException e) {
            /*
             * ftp://ftpftp: Unexpected error
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test13()  throws Throwable  {
      Handler handler0 = new Handler();
      URL uRL0 = new URL("vuze", "vuze", 661, "vuze", (URLStreamHandler) handler0);
      ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl((ResourceDownloaderBaseImpl) null, uRL0, "vuze", false, "vuze", "vuze");
      resourceDownloaderURLImpl0.cancel();
      assertEquals(true, resourceDownloaderURLImpl0.isCancelled());
      assertEquals((-1L), resourceDownloaderURLImpl0.getSize());
  }

  @Test
  public void test14()  throws Throwable  {
      URL uRL0 = new URL("file", "file", 0, "file");
      ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl((ResourceDownloaderBaseImpl) null, uRL0, false, "file", "file");
      URLConnection uRLConnection0 = uRL0.openConnection();
      resourceDownloaderURLImpl0.setRequestProperties(uRLConnection0, false);
      assertEquals((-1L), resourceDownloaderURLImpl0.getSize());
  }

  @Test
  public void test15()  throws Throwable  {
      Handler handler0 = new Handler();
      URL uRL0 = new URL("AbFQ,:z", "AbFQ,:z", 82, "AbFQ,:z", (URLStreamHandler) handler0);
      ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl((ResourceDownloaderBaseImpl) null, uRL0);
      resourceDownloaderURLImpl0.getAuthentication("AbFQ,:z", uRL0);
      assertEquals((-1L), resourceDownloaderURLImpl0.getSize());
  }

  @Test
  public void test16()  throws Throwable  {
      Handler handler0 = new Handler();
      URL uRL0 = new URL("AbFQ,:z", "AbFQ,:z", 82, "AbFQ,:z", (URLStreamHandler) handler0);
      ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl((ResourceDownloaderBaseImpl) null, uRL0, true, "AbFQ,:z", (String) null);
      PasswordAuthentication passwordAuthentication0 = resourceDownloaderURLImpl0.getAuthentication("AbFQ,:z", uRL0);
      assertNull(passwordAuthentication0);
      assertEquals((-1L), resourceDownloaderURLImpl0.getSize());
  }

  @Test
  public void test17()  throws Throwable  {
      Handler handler0 = new Handler();
      URL uRL0 = new URL("b;K(=}-=/jaqNCq?", "b;K(=}-=/jaqNCq?", 67, "b;K(=}-=/jaqNCq?", (URLStreamHandler) handler0);
      ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl((ResourceDownloaderBaseImpl) null, uRL0, true, "b;K(=}-=/jaqNCq?", "b;K(=}-=/jaqNCq?");
      PasswordAuthentication passwordAuthentication0 = resourceDownloaderURLImpl0.getAuthentication("b;K(=}-=/jaqNCq?", uRL0);
      assertNotNull(passwordAuthentication0);
      assertEquals((-1L), resourceDownloaderURLImpl0.getSize());
      assertEquals("b;K(=}-=/jaqNCq?", passwordAuthentication0.getUserName());
  }

  @Test
  public void test18()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          URL uRL0 = new URL("ftp", "ftp", "ftp");
          ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl((ResourceDownloaderBaseImpl) null, uRL0, true, "ftp", "ftp");
          resourceDownloaderURLImpl0.setForceNoProxy(true);
          try {
            resourceDownloaderURLImpl0.download();
            fail("Expecting exception: ResourceDownloaderException");
          } catch(ResourceDownloaderException e) {
            /*
             * ftp://ftpftp: Unexpected error
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
