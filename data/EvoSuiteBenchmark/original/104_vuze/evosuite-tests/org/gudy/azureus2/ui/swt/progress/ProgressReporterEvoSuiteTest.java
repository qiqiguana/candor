/*
 * This file was automatically generated by EvoSuite
 */

package org.gudy.azureus2.ui.swt.progress;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.aelitis.azureus.core.peermanager.messaging.bittorrent.BTMessage;
import com.aelitis.azureus.core.peermanager.messaging.bittorrent.BTRejectRequest;
import java.util.List;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.layout.FillLayout;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.testcase.TestCaseExecutor;
import org.gudy.azureus2.core3.download.DownloadManagerState;
import org.gudy.azureus2.plugins.torrent.TorrentAttribute;
import org.gudy.azureus2.ui.swt.progress.IProgressReporter;
import org.gudy.azureus2.ui.swt.progress.IProgressReporterListener;
import org.gudy.azureus2.ui.swt.progress.IProgressReportingListener;
import org.gudy.azureus2.ui.swt.progress.ProgressReporter;
import org.gudy.azureus2.ui.swt.progress.ProgressReportingManager;
import org.gudy.azureus2.ui.swt.views.columnsetup.ColumnTC_ChosenColumn;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ProgressReporterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ProgressReportingManager progressReportingManager0 = ProgressReportingManager.getInstance();
      ProgressReporter progressReporter0 = (ProgressReporter)progressReportingManager0.getNextActiveReporter();
      assertNull(progressReporter0);
  }

  @Test
  public void test1()  throws Throwable  {
      ProgressReportingManager progressReportingManager0 = ProgressReportingManager.getInstance();
      progressReportingManager0.getNextActiveReporter();
      ProgressReporter progressReporter0 = new ProgressReporter(progressReportingManager0, "Z.");
      progressReporter0.setName("Z.");
      ProgressReporter progressReporter1 = new ProgressReporter(progressReportingManager0, "VC.SDx3g1:HE");
      progressReporter1.setMaximum((-1));
      ColumnTC_ChosenColumn columnTC_ChosenColumn0 = new ColumnTC_ChosenColumn("VC.SDx3g1:HE");
      columnTC_ChosenColumn0.isSortAscending();
      columnTC_ChosenColumn0.getTitleLanguageKey();
      progressReporter1.equals((Object) "TableColumn.header.TableColumnChosenColumn");
      ProgressReporter progressReporter2 = new ProgressReporter(progressReportingManager0, "VC.SDx3g1:HE");
      progressReporter2.setPercentage(1, "VC.SDx3g1:HE");
      progressReportingManager0.getReporters(false);
      progressReporter2.setRetryAllowed(false);
      Random.setNextRandom(1);
  }

  @Test
  public void test2()  throws Throwable  {
      ProgressReportingManager progressReportingManager0 = ProgressReportingManager.getInstance();
      ProgressReporter progressReporter0 = new ProgressReporter(progressReportingManager0);
      progressReporter0.appendDetailMessage("");
      progressReporter0.setMessage("");
      progressReportingManager0.addReporter("");
      progressReporter0.appendDetailMessage("");
      ProgressReportingManager progressReportingManager1 = ProgressReportingManager.getInstance();
      progressReporter0.setCancelAllowed(true);
      ProgressReporter progressReporter1 = new ProgressReporter(progressReportingManager1);
      progressReporter0.setRetryAllowed(false);
      progressReporter1.setTitle("\"rN");
      assertFalse(progressReporter1.equals(progressReporter0));
  }

  @Test
  public void test3()  throws Throwable  {
      ProgressReportingManager progressReportingManager0 = ProgressReportingManager.getInstance();
      ProgressReporter progressReporter0 = new ProgressReporter(progressReportingManager0);
      progressReporter0.setIndeterminate(false);
      ProgressReportingManager progressReportingManager1 = ProgressReportingManager.getInstance();
      progressReportingManager1.hasMultipleActive();
      ProgressReporter progressReporter1 = (ProgressReporter)progressReportingManager1.addReporter("starts/games.start");
      ProgressReporter progressReporter2 = new ProgressReporter(progressReportingManager1);
      progressReporter2.dispose();
      progressReportingManager0.getReportersArray(false);
      progressReporter2.appendDetailMessage(".debug");
      assertFalse(progressReporter2.equals(progressReporter1));
      assertFalse(progressReporter2.equals(progressReporter0));
  }

  @Test
  public void test4()  throws Throwable  {
      ProgressReportingManager progressReportingManager0 = ProgressReportingManager.getInstance();
      ProgressReporter progressReporter0 = new ProgressReporter(progressReportingManager0);
      progressReporter0.setIndeterminate(true);
      progressReporter0.cancel();
      progressReportingManager0.getReporters(false);
      progressReportingManager0.remove((IProgressReporter) progressReporter0);
      progressReporter0.setCancelAllowed(true);
      ProgressReporter progressReporter1 = (ProgressReporter)progressReportingManager0.addReporter();
      progressReporter0.removeListener((IProgressReporterListener) null);
      progressReporter0.cancel();
      ProgressReporter progressReporter2 = new ProgressReporter(progressReportingManager0, "^MB[Sf ");
      List<Object> list0 = progressReportingManager0.getReporters(false);
      assertEquals(629, list0.size());
      
      progressReporter0.retry();
      progressReporter0.setDone();
      assertFalse(progressReporter0.equals(progressReporter1));
  }

  @Test
  public void test5()  throws Throwable  {
      ProgressReportingManager progressReportingManager0 = ProgressReportingManager.getInstance();
      ProgressReporter progressReporter0 = new ProgressReporter(progressReportingManager0);
      progressReporter0.setImage((Image) null);
      progressReporter0.setIndeterminate(true);
      progressReporter0.setPercentage(1622, "");
      progressReportingManager0.getReporters(true);
      progressReportingManager0.remove((IProgressReporter) progressReporter0);
      progressReporter0.setCancelAllowed(true);
      progressReporter0.cancel();
      progressReporter0.setImage((Image) null);
      ProgressReporter progressReporter1 = new ProgressReporter(progressReportingManager0, "^MB[Sf ");
      List<Object> list0 = progressReportingManager0.getReporters(false);
      assertEquals(781, list0.size());
      
      progressReporter0.retry();
      progressReporter0.setDone();
      assertEquals(true, progressReportingManager0.hasMultipleActive());
  }

  @Test
  public void test6()  throws Throwable  {
      ProgressReportingManager progressReportingManager0 = ProgressReportingManager.getInstance();
      ProgressReporter progressReporter0 = new ProgressReporter(progressReportingManager0);
      progressReporter0.hashCode();
      String string0 = BTMessage.ID_BT_CANCEL;
      progressReporter0.equals((Object) "BT_CANCEL");
      ProgressReportingManager progressReportingManager1 = ProgressReportingManager.getInstance();
      progressReporter0.setSelection(1858, (String) null);
      int int0 = progressReporter0.hashCode();
      assertEquals((-2147482282), int0);
      
      String string1 = BTMessage.ID_BT_BITFIELD;
      progressReporter0.equals((Object) "BT_BITFIELD");
      progressReporter0.setErrorMessage("BT_CANCEL");
      progressReportingManager0.getCurrentReporter();
      ProgressReporter progressReporter1 = new ProgressReporter(progressReportingManager1, ",retrans=");
      progressReporter1.setPercentage(0, ",retrans=");
      progressReporter1.getProgressReport();
      progressReporter1.setSelection(0, "BT_BITFIELD");
      assertFalse(progressReporter1.equals(progressReporter0));
  }

  @Test
  public void test7()  throws Throwable  {
      ProgressReportingManager progressReportingManager0 = ProgressReportingManager.getInstance();
      String string0 = BTMessage.ID_BT_CANCEL;
      ProgressReportingManager progressReportingManager1 = ProgressReportingManager.getInstance();
      String string1 = BTMessage.ID_BT_BITFIELD;
      ProgressReporter progressReporter0 = (ProgressReporter)progressReportingManager0.getCurrentReporter();
      ProgressReporter progressReporter1 = new ProgressReporter(progressReportingManager1, ",retrans=");
      progressReporter1.setPercentage(0, ",retrans=");
      progressReporter1.getProgressReport();
      progressReporter1.setSelection(0, "BT_BITFIELD");
      assertFalse(progressReporter1.equals(progressReporter0));
  }

  @Test
  public void test8()  throws Throwable  {
      ProgressReportingManager progressReportingManager0 = ProgressReportingManager.getInstance();
      ProgressReporter progressReporter0 = new ProgressReporter(progressReportingManager0, (String) null);
      progressReporter0.dispose();
      progressReporter0.setErrorMessage("|MEr!");
      String string0 = DownloadManagerState.PARAM_MAX_UPLOADS_WHEN_SEEDING_ENABLED;
      progressReporter0.setObjectData((Object) "max.uploads.when.seeding.enabled");
      progressReporter0.setMinimum(0);
      ProgressReportingManager progressReportingManager1 = ProgressReportingManager.getInstance();
      ProgressReporter progressReporter1 = new ProgressReporter(progressReportingManager1);
      assertFalse(progressReporter1.equals(progressReporter0));
      
      progressReporter0.setCancelAllowed(false);
      progressReporter0.setIndeterminate(false);
      progressReporter0.setName("GcaW|TRvpGV7");
      assertFalse(progressReporter0.equals(progressReporter1));
      
      boolean boolean0 = progressReportingManager0.hasMultipleActive();
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      ProgressReportingManager progressReportingManager0 = ProgressReportingManager.getInstance();
      ProgressReporter progressReporter0 = new ProgressReporter(progressReportingManager0, "fifc");
      progressReporter0.retry();
      ProgressReportingManager progressReportingManager1 = ProgressReportingManager.getInstance();
      progressReportingManager1.removeListener((IProgressReportingListener) null);
      progressReporter0.getMessageHistory();
      ProgressReporter progressReporter1 = new ProgressReporter(progressReportingManager1, "");
      progressReporter1.getMessageHistory();
      progressReporter1.setSelection((-1), "");
      progressReporter1.appendDetailMessage("");
      ProgressReporter progressReporter2 = (ProgressReporter)progressReportingManager1.getCurrentReporter();
      assertSame(progressReporter2, progressReporter1);
      
      ProgressReportingManager progressReportingManager2 = ProgressReportingManager.getInstance();
      ProgressReporter progressReporter3 = new ProgressReporter(progressReportingManager2);
      progressReporter3.setErrorMessage("");
      assertFalse(progressReporter3.equals(progressReporter2));
      assertFalse(progressReporter3.equals(progressReporter1));
  }

  @Test
  public void test10()  throws Throwable  {
      ProgressReportingManager progressReportingManager0 = ProgressReportingManager.getInstance();
      progressReportingManager0.hasMultipleActive();
      ProgressReporter progressReporter0 = new ProgressReporter(progressReportingManager0);
      progressReporter0.cancel();
      ProgressReporter progressReporter1 = new ProgressReporter(progressReportingManager0, "");
      String string0 = TorrentAttribute.TA_TRACKER_CLIENT_EXTENSIONS;
      progressReporter1.setReporterType("TrackerClientExtensions");
      FillLayout fillLayout0 = new FillLayout();
      progressReporter1.setTitle("");
      fillLayout0.toString();
      progressReporter1.setObjectData((Object) "FillLayout {type=SWT.HORIZONTAL}");
      progressReporter1.compareTo((Object) "TrackerClientExtensions");
      ProgressReporter progressReporter2 = new ProgressReporter(progressReportingManager0);
      progressReporter1.appendDetailMessage("TrackerClientExtensions");
      ProgressReporter progressReporter3 = null;
      try {
        progressReporter3 = new ProgressReporter((ProgressReportingManager) null, "FillLayout {type=SWT.HORIZONTAL}");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      ProgressReportingManager progressReportingManager0 = ProgressReportingManager.getInstance();
      ProgressReportingManager progressReportingManager1 = ProgressReportingManager.getInstance();
      ProgressReporter progressReporter0 = new ProgressReporter(progressReportingManager0, "h4BeTG");
      ProgressReporter progressReporter1 = new ProgressReporter(progressReportingManager0, "h4BeTG");
      progressReporter1.setPercentage((-1), "Alg.Alias.Signature.SHA512WithRSAEncryption");
      ProgressReporter progressReporter2 = new ProgressReporter(progressReportingManager1, (String) null);
      ProgressReporter progressReporter3 = new ProgressReporter(progressReportingManager0, (String) null);
      progressReportingManager0.addReporter();
      progressReporter2.addListener((IProgressReporterListener) null);
      ProgressReporter progressReporter4 = new ProgressReporter(progressReportingManager0);
      progressReporter4.setReporterType("");
      progressReporter2.setReporterType((String) null);
      int int0 = progressReporter4.hashCode();
      assertEquals((-2147481208), int0);
  }

  @Test
  public void test12()  throws Throwable  {
      ProgressReportingManager progressReportingManager0 = ProgressReportingManager.getInstance();
      ProgressReporter progressReporter0 = new ProgressReporter(progressReportingManager0, "");
      progressReporter0.removeListener((IProgressReporterListener) null);
      ProgressReportingManager progressReportingManager1 = ProgressReportingManager.getInstance();
      ProgressReportingManager progressReportingManager2 = ProgressReportingManager.getInstance();
      ProgressReporter progressReporter1 = new ProgressReporter(progressReportingManager2);
      progressReportingManager1.remove((IProgressReporter) progressReporter1);
      ProgressReporter progressReporter2 = new ProgressReporter(progressReportingManager1, "_a%p}>L8.W<g");
      progressReporter2.cancel();
      ProgressReportingManager progressReportingManager3 = ProgressReportingManager.getInstance();
      ProgressReporter progressReporter3 = new ProgressReporter(progressReportingManager3);
      ProgressReportingManager.getInstance();
      progressReportingManager3.addReporter("1s&B&]Y*![Y");
      ProgressReporter.ProgressReport progressReporter_ProgressReport0 = (ProgressReporter.ProgressReport)progressReporter1.getProgressReport();
      assertEquals(-2147480606, progressReporter_ProgressReport0.getReporterID());
      
      progressReporter3.setReporterType("1s&B&]Y*![Y");
      assertFalse(progressReporter3.equals(progressReporter2));
  }

  @Test
  public void test13()  throws Throwable  {
      ProgressReportingManager progressReportingManager0 = ProgressReportingManager.getInstance();
      ProgressReporter progressReporter0 = new ProgressReporter(progressReportingManager0, "KeyGenerator.HMACSHA1");
      progressReporter0.setErrorMessage("KeyGenerator.HMACSHA1");
      ProgressReportingManager progressReportingManager1 = ProgressReportingManager.getInstance();
      ProgressReporter progressReporter1 = new ProgressReporter(progressReportingManager1);
      progressReporter1.setDone();
      progressReportingManager1.getReporters(false);
      ProgressReporter progressReporter2 = new ProgressReporter(progressReportingManager1);
      progressReporter1.setSelection((-932), "");
      progressReporter1.setMessage("x<Fs>badvUib");
      int int0 = progressReportingManager1.getReporterCount((-1));
      assertEquals(1706, int0);
      
      progressReporter1.setReporterType("");
      progressReportingManager1.getNextActiveReporter();
      progressReporter2.setRetryAllowed(false);
      assertEquals(true, progressReportingManager1.hasMultipleActive());
  }

  @Test
  public void test14()  throws Throwable  {
      ProgressReportingManager progressReportingManager0 = ProgressReportingManager.getInstance();
      ProgressReporter progressReporter0 = new ProgressReporter(progressReportingManager0, "[");
      progressReporter0.addListener((IProgressReporterListener) null);
      progressReportingManager0.getCurrentReporter();
      ProgressReportingManager progressReportingManager1 = ProgressReportingManager.getInstance();
      ProgressReporter progressReporter1 = new ProgressReporter(progressReportingManager1);
      progressReportingManager1.getCurrentReporter();
      ProgressReportingManager.getInstance();
      progressReportingManager1.getCurrentReporter();
      ProgressReporter.ProgressReport progressReporter_ProgressReport0 = (ProgressReporter.ProgressReport)progressReporter1.getProgressReport();
      assertNotNull(progressReporter_ProgressReport0);
      assertEquals(-2147479812, progressReporter_ProgressReport0.getReporterID());
      
      progressReporter1.getMessageHistory();
      progressReporter1.setErrorMessage("[");
      progressReportingManager1.getReporterCount(2014);
      progressReportingManager1.getNextActiveReporter();
      progressReporter1.setMinimum(2014);
      assertFalse(progressReporter1.equals(progressReporter0));
  }

  @Test
  public void test15()  throws Throwable  {
      Random.setNextRandom(0);
      ProgressReportingManager progressReportingManager0 = ProgressReportingManager.getInstance();
      ProgressReporter progressReporter0 = new ProgressReporter(progressReportingManager0);
      progressReportingManager0.getCurrentReporter();
      ProgressReporter progressReporter1 = new ProgressReporter(progressReportingManager0);
      progressReporter0.dispose();
      progressReporter0.dispose();
      progressReporter0.setMaximum(959);
      progressReportingManager0.getReportersArray(false);
      progressReporter0.setRetryAllowed(false);
      progressReporter1.retry();
      progressReportingManager0.getReporters(false);
      progressReporter0.setPercentage(959, "arlI:xalB(7_h");
  }

  @Test
  public void test16()  throws Throwable  {
      ProgressReportingManager progressReportingManager0 = ProgressReportingManager.getInstance();
      ProgressReporter progressReporter0 = new ProgressReporter(progressReportingManager0);
      progressReportingManager0.getReporters(true);
      progressReporter0.setPercentage(0, "");
  }

  @Test
  public void test17()  throws Throwable  {
      Random.setNextRandom((-356));
      ProgressReportingManager progressReportingManager0 = ProgressReportingManager.getInstance();
      ProgressReporter progressReporter0 = new ProgressReporter(progressReportingManager0, (String) null);
      progressReportingManager0.addReporter();
      BTRejectRequest bTRejectRequest0 = new BTRejectRequest((-356), (-356), (-1680), (byte) (-32));
      bTRejectRequest0.getID();
      progressReporter0.setObjectData((Object) "BT_REJECT_REQUEST");
      progressReporter0.setMaximum((-6));
      ProgressReporter progressReporter1 = new ProgressReporter(progressReportingManager0, "DH");
      progressReporter0.setErrorMessage((String) null);
  }

  @Test
  public void test18()  throws Throwable  {
      ProgressReportingManager progressReportingManager0 = ProgressReportingManager.getInstance();
      ProgressReporter progressReporter0 = new ProgressReporter(progressReportingManager0);
      progressReporter0.setErrorMessage("");
      progressReporter0.setSelection(0, "");
      ProgressReporter progressReporter1 = new ProgressReporter(progressReportingManager0);
      progressReportingManager0.addReporter("|vLpK_zVBD ");
      progressReporter1.getProgressReport();
      progressReporter1.setReporterType("");
      progressReporter1.setDone();
      progressReporter1.getMessageHistory();
      progressReporter0.appendDetailMessage("");
      progressReporter0.setTitle("|vLpK_zVBD ");
      progressReporter1.setErrorMessage("");
      Random.setNextRandom((-1139));
  }

  @Test
  public void test19()  throws Throwable  {
      ProgressReportingManager progressReportingManager0 = ProgressReportingManager.getInstance();
      System.setCurrentTimeMillis(0L);
      ProgressReporter progressReporter0 = new ProgressReporter(progressReportingManager0, (String) null);
      progressReporter0.setPercentage(0, (String) null);
      progressReportingManager0.remove((IProgressReporter) progressReporter0);
      progressReportingManager0.remove((IProgressReporter) progressReporter0);
      System.setCurrentTimeMillis(431L);
      String string0 = BTMessage.ID_BT_HAVE_ALL;
      progressReporter0.equals((Object) "BT_HAVE_ALL");
  }
}
