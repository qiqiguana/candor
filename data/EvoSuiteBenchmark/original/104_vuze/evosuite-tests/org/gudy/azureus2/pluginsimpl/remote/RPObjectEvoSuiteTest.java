/*
 * This file was automatically generated by EvoSuite
 */

package org.gudy.azureus2.pluginsimpl.remote;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.gudy.azureus2.pluginsimpl.remote.RPObject;
import org.gudy.azureus2.pluginsimpl.remote.RPRequest;
import org.gudy.azureus2.pluginsimpl.remote.RPRequestDispatcher;
import org.gudy.azureus2.pluginsimpl.remote.rpexceptions.RPObjectNoLongerExistsException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class RPObjectEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      RPObject rPObject0 = new RPObject();
      // Undeclared exception!
      try {
        rPObject0.notSupported((Object) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * RPObject:: method not supported - null
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      RPObject rPObject0 = new RPObject();
      // Undeclared exception!
      try {
        rPObject0._refresh();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      RPObject rPObject0 = new RPObject();
      RPRequest rPRequest0 = new RPRequest();
      // Undeclared exception!
      try {
        rPObject0._process(rPRequest0);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * you've got to implement this - org.gudy.azureus2.pluginsimpl.remote.RPRequest@4ba292e8
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      RPObject rPObject0 = new RPObject();
      Object object0 = rPObject0._getDelegate();
      assertNull(object0);
  }

  @Test
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try {
        RPObject._lookupLocal(24L);
        fail("Expecting exception: RPObjectNoLongerExistsException");
      } catch(RPObjectNoLongerExistsException e) {
        /*
         * Object no longer exists
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      RPObject rPObject0 = RPObject._lookupLocal((Object) "Object");
      assertNull(rPObject0);
  }

  @Test
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try {
        RPObject._lookupLocal(24L);
        fail("Expecting exception: RPObjectNoLongerExistsException");
      } catch(RPObjectNoLongerExistsException e) {
        /*
         * Object no longer exists
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      RPObject rPObject0 = new RPObject();
      rPObject0._setRemote((RPRequestDispatcher) null);
      assertEquals("Object", rPObject0._getName());
  }

  @Test
  public void test8()  throws Throwable  {
      RPObject rPObject0 = null;
      try {
        rPObject0 = new RPObject((Object) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * you've got to implement this - null
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      RPObject rPObject0 = RPObject._lookupLocal((Object) "E$6Q:+=N(7WV");
      assertNull(rPObject0);
  }

  @Test
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try {
        RPObject._lookupLocal(1L);
        fail("Expecting exception: RPObjectNoLongerExistsException");
      } catch(RPObjectNoLongerExistsException e) {
        /*
         * Object no longer exists
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try {
        RPObject._lookupLocal((Object) null);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * you've got to implement this
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      RPObject rPObject0 = new RPObject();
      String string0 = rPObject0._getName();
      assertNotNull(string0);
      assertEquals("Object", string0);
  }
}
