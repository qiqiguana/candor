/*
 * This file was automatically generated by EvoSuite
 */

package org.gudy.azureus2.ui.swt.shells;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.List;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.GC;
import org.eclipse.swt.graphics.GCData;
import org.eclipse.swt.graphics.Image;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.graphics.Rectangle;
import org.gudy.azureus2.ui.swt.shells.GCStringPrinter;
import org.gudy.azureus2.ui.swt.views.tableitems.files.ProgressGraphItem;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class GCStringPrinterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      GCStringPrinter.URLInfo gCStringPrinter_URLInfo0 = new GCStringPrinter.URLInfo();
      ProgressGraphItem progressGraphItem0 = new ProgressGraphItem();
      List<Rectangle> list0 = progressGraphItem0.getCellAddedListeners();
      gCStringPrinter_URLInfo0.hitAreas = list0;
      String string0 = gCStringPrinter_URLInfo0.toString();
      assertNotNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      GCStringPrinter gCStringPrinter0 = new GCStringPrinter((GC) null, (String) null, (Rectangle) null, 0, 0);
      String string0 = gCStringPrinter0.getText();
      assertNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      GCData gCData0 = new GCData();
      GC gC0 = GC.carbon_new(0, gCData0);
      GCStringPrinter gCStringPrinter0 = new GCStringPrinter(gC0, (String) null, (Rectangle) null, false, false, 1);
      Image[] imageArray0 = new Image[3];
      gCStringPrinter0.setImages(imageArray0);
      assertEquals(false, gCStringPrinter0.isCutoff());
  }

  @Test
  public void test3()  throws Throwable  {
      GCStringPrinter gCStringPrinter0 = new GCStringPrinter((GC) null, (String) null, (Rectangle) null, 0, 0);
      float[] floatArray0 = new float[5];
      gCStringPrinter0.setImageScales(floatArray0);
      assertEquals(false, gCStringPrinter0.hasHitUrl());
  }

  @Test
  public void test4()  throws Throwable  {
      Rectangle rectangle0 = new Rectangle(0, 0, 0, 0);
      GCStringPrinter gCStringPrinter0 = new GCStringPrinter((GC) null, "", rectangle0, 0, 0);
      gCStringPrinter0.printString((GC) null, rectangle0, 0);
      assertEquals(false, gCStringPrinter0.printString());
      assertEquals(false, gCStringPrinter0.isWordCut());
  }

  @Test
  public void test5()  throws Throwable  {
      GCData gCData0 = new GCData();
      GC gC0 = GC.carbon_new(0, gCData0);
      GCStringPrinter gCStringPrinter0 = new GCStringPrinter(gC0, (String) null, (Rectangle) null, false, false, 1);
      gCStringPrinter0.calculateMetrics();
      assertEquals(false, gCStringPrinter0.isWordCut());
      assertEquals(false, gCStringPrinter0.printString());
  }

  @Test
  public void test6()  throws Throwable  {
      boolean boolean0 = GCStringPrinter.printString((GC) null, "ws9Qa)32Z>8", (Rectangle) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      GCData gCData0 = new GCData();
      GC gC0 = GC.carbon_new(0, gCData0);
      GCStringPrinter gCStringPrinter0 = new GCStringPrinter(gC0, (String) null, (Rectangle) null, false, false, 1);
      float[] floatArray0 = gCStringPrinter0.getImageScales();
      assertNull(floatArray0);
  }

  @Test
  public void test8()  throws Throwable  {
      GCStringPrinter gCStringPrinter0 = new GCStringPrinter((GC) null, (String) null, (Rectangle) null, 0, 0);
      gCStringPrinter0.setUrlColor((Color) null);
      assertEquals(false, gCStringPrinter0.isWordCut());
  }

  @Test
  public void test9()  throws Throwable  {
      GCStringPrinter gCStringPrinter0 = new GCStringPrinter((GC) null, "ws9Qa)32Z>8", (Rectangle) null, 0, 0);
      boolean boolean0 = gCStringPrinter0.isWordCut();
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      GCStringPrinter gCStringPrinter0 = new GCStringPrinter((GC) null, "plugin.classes", (Rectangle) null, true, true, 164);
      Point point0 = gCStringPrinter0.getCalculatedSize();
      assertEquals("Point {0, 0}", point0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      GCStringPrinter gCStringPrinter0 = new GCStringPrinter((GC) null, "plugin.classes", (Rectangle) null, true, true, 164);
      Color color0 = gCStringPrinter0.getUrlColor();
      assertNull(color0);
  }

  @Test
  public void test12()  throws Throwable  {
      GCStringPrinter gCStringPrinter0 = new GCStringPrinter((GC) null, "plugin.classes", (Rectangle) null, true, true, 164);
      boolean boolean0 = gCStringPrinter0.isCutoff();
      assertEquals(false, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      GCStringPrinter.URLInfo gCStringPrinter_URLInfo0 = new GCStringPrinter.URLInfo();
      String string0 = gCStringPrinter_URLInfo0.toString();
      assertNotNull(string0);
  }

  @Test
  public void test14()  throws Throwable  {
      GCData gCData0 = new GCData();
      GC gC0 = GC.carbon_new(0, gCData0);
      GCStringPrinter gCStringPrinter0 = new GCStringPrinter(gC0, (String) null, (Rectangle) null, false, false, 1);
      GCStringPrinter.URLInfo gCStringPrinter_URLInfo0 = gCStringPrinter0.getHitUrl(0, 0);
      assertNull(gCStringPrinter_URLInfo0);
  }

  @Test
  public void test15()  throws Throwable  {
      GCStringPrinter gCStringPrinter0 = new GCStringPrinter((GC) null, "ws9Qa)32Z>8", (Rectangle) null, 0, 0);
      GCStringPrinter.URLInfo[] gCStringPrinter_URLInfoArray0 = gCStringPrinter0.getHitUrlInfo();
      assertNotNull(gCStringPrinter_URLInfoArray0);
  }

  @Test
  public void test16()  throws Throwable  {
      GCStringPrinter gCStringPrinter0 = new GCStringPrinter((GC) null, "ws9Qa)32Z>8", (Rectangle) null, (-5), (-5));
      boolean boolean0 = gCStringPrinter0.hasHitUrl();
      assertEquals(false, boolean0);
  }
}
