/*
 * This file was automatically generated by EvoSuite
 */

package org.gudy.azureus2.ui.swt.views;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.ArrayList;
import java.util.List;
import org.gudy.azureus2.core3.logging.LogEvent;
import org.gudy.azureus2.core3.logging.LogIDs;
import org.gudy.azureus2.ui.swt.plugins.UISWTView;
import org.gudy.azureus2.ui.swt.plugins.UISWTViewEvent;
import org.gudy.azureus2.ui.swt.plugins.UISWTViewEventListener;
import org.gudy.azureus2.ui.swt.pluginsimpl.UISWTViewEventImpl;
import org.gudy.azureus2.ui.swt.pluginsimpl.UISWTViewImpl;
import org.gudy.azureus2.ui.swt.views.LoggerView;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LoggerViewEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LoggerView loggerView0 = new LoggerView((List<? extends LogEvent>) null);
      loggerView0.parameterChanged("Color*hrL8:5Eq $w");
      assertEquals("Console", loggerView0.getPluginViewName());
  }

  @Test
  public void test1()  throws Throwable  {
      LoggerView loggerView0 = new LoggerView();
      assertNotNull(loggerView0);
      
      UISWTViewImpl uISWTViewImpl0 = new UISWTViewImpl((String) null, (String) null, (UISWTViewEventListener) loggerView0, (Object) "[]");
      assertNotNull(uISWTViewImpl0);
      
      UISWTViewEventImpl uISWTViewEventImpl0 = new UISWTViewEventImpl((UISWTView) uISWTViewImpl0, 6, (Object) "[]");
      loggerView0.eventOccurred((UISWTViewEvent) uISWTViewEventImpl0);
      assertEquals("Console", uISWTViewImpl0.getFullTitle());
      assertEquals("!Console!", uISWTViewImpl0.getTitleID());
  }

  @Test
  public void test2()  throws Throwable  {
      LoggerView loggerView0 = new LoggerView();
      assertNotNull(loggerView0);
      
      String string0 = loggerView0.getPluginViewName();
      assertEquals("Console", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      ArrayList<LogEvent> arrayList0 = new ArrayList<LogEvent>();
      LoggerView loggerView0 = new LoggerView((List<? extends LogEvent>) arrayList0);
      assertEquals("Console", loggerView0.getPluginViewName());
  }

  @Test
  public void test4()  throws Throwable  {
      LoggerView loggerView0 = new LoggerView(true);
      assertNotNull(loggerView0);
      
      UISWTViewEventImpl uISWTViewEventImpl0 = new UISWTViewEventImpl((UISWTView) null, 5, (Object) "BT1");
      boolean boolean0 = loggerView0.eventOccurred((UISWTViewEvent) uISWTViewEventImpl0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      LoggerView loggerView0 = new LoggerView(true);
      UISWTViewEventImpl uISWTViewEventImpl0 = new UISWTViewEventImpl((UISWTView) null, 7, (Object) "blocks");
      loggerView0.eventOccurred((UISWTViewEvent) uISWTViewEventImpl0);
  }

  @Test
  public void test6()  throws Throwable  {
      LoggerView loggerView0 = new LoggerView();
      LogIDs logIDs0 = LogIDs.UI3;
      LogEvent logEvent0 = new LogEvent(logIDs0, "Console");
      loggerView0.log(logEvent0);
      assertEquals(0, logEvent0.entryType);
  }

  @Test
  public void test7()  throws Throwable  {
      LoggerView loggerView0 = new LoggerView((List<? extends LogEvent>) null);
      loggerView0.setEnabled(false);
      assertEquals("Console", loggerView0.getPluginViewName());
  }

  @Test
  public void test8()  throws Throwable  {
      LoggerView loggerView0 = new LoggerView(true);
      assertNotNull(loggerView0);
      
      UISWTViewEventImpl uISWTViewEventImpl0 = new UISWTViewEventImpl((UISWTView) null, 1, (Object) null);
      boolean boolean0 = loggerView0.eventOccurred((UISWTViewEvent) uISWTViewEventImpl0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      UISWTViewEventImpl uISWTViewEventImpl0 = new UISWTViewEventImpl((UISWTView) null, 1, (Object) null);
      LoggerView loggerView0 = new LoggerView((List<? extends LogEvent>) null);
      assertNotNull(loggerView0);
      
      boolean boolean0 = loggerView0.eventOccurred((UISWTViewEvent) uISWTViewEventImpl0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      LoggerView loggerView0 = new LoggerView(true);
      loggerView0.parameterChanged("blocks");
      assertEquals("Console", loggerView0.getPluginViewName());
  }

  @Test
  public void test11()  throws Throwable  {
      LoggerView loggerView0 = new LoggerView(true);
      UISWTViewEventImpl uISWTViewEventImpl0 = new UISWTViewEventImpl((UISWTView) null, 2, (Object) null);
      // Undeclared exception!
      try {
        loggerView0.eventOccurred((UISWTViewEvent) uISWTViewEventImpl0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      LoggerView loggerView0 = new LoggerView((List<? extends LogEvent>) null);
      assertNotNull(loggerView0);
      
      UISWTViewEventImpl uISWTViewEventImpl0 = new UISWTViewEventImpl((UISWTView) null, 4, (Object) loggerView0);
      boolean boolean0 = loggerView0.eventOccurred((UISWTViewEvent) uISWTViewEventImpl0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      LoggerView loggerView0 = new LoggerView((List<? extends LogEvent>) null);
      assertNotNull(loggerView0);
      
      UISWTViewImpl uISWTViewImpl0 = new UISWTViewImpl("Color*hrL8:5Eq $w", "Color*hrL8:5Eq $w", (UISWTViewEventListener) loggerView0, (Object) "max.uploads.when.seeding");
      assertNotNull(uISWTViewImpl0);
      
      UISWTViewEventImpl uISWTViewEventImpl0 = new UISWTViewEventImpl((UISWTView) uISWTViewImpl0, 16777336, (Object) "max.uploads.when.seeding");
      loggerView0.eventOccurred((UISWTViewEvent) uISWTViewEventImpl0);
      assertEquals("!Console!", uISWTViewImpl0.getTitleID());
      assertEquals("Console", uISWTViewImpl0.getFullTitle());
  }
}
