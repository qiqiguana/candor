/*
 * This file was automatically generated by EvoSuite
 */

package org.gudy.azureus2.pluginsimpl.local.utils.resourcedownloader;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.apple.net.protocol.archiveresource.Handler;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLStreamHandler;
import org.gudy.azureus2.plugins.utils.resourcedownloader.ResourceDownloader;
import org.gudy.azureus2.plugins.utils.resourcedownloader.ResourceDownloaderException;
import org.gudy.azureus2.plugins.utils.resourcedownloader.ResourceDownloaderListener;
import org.gudy.azureus2.pluginsimpl.local.utils.resourcedownloader.ResourceDownloaderBaseImpl;
import org.gudy.azureus2.pluginsimpl.local.utils.resourcedownloader.ResourceDownloaderFileImpl;
import org.gudy.azureus2.pluginsimpl.local.utils.resourcedownloader.ResourceDownloaderRetryImpl;
import org.gudy.azureus2.pluginsimpl.local.utils.resourcedownloader.ResourceDownloaderTimeoutImpl;
import org.gudy.azureus2.pluginsimpl.local.utils.resourcedownloader.ResourceDownloaderURLImpl;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ResourceDownloaderTimeoutImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Handler handler0 = new Handler();
      URL uRL0 = new URL(": torrent", ": torrent", 64, ": torrent", (URLStreamHandler) handler0);
      ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl((ResourceDownloaderBaseImpl) null, uRL0, false, ": torrent", ": torrent");
      ResourceDownloaderTimeoutImpl resourceDownloaderTimeoutImpl0 = new ResourceDownloaderTimeoutImpl((ResourceDownloaderBaseImpl) resourceDownloaderURLImpl0, (ResourceDownloader) resourceDownloaderURLImpl0, 0);
      try {
        resourceDownloaderTimeoutImpl0.getSize();
        fail("Expecting exception: ResourceDownloaderException");
      } catch(ResourceDownloaderException e) {
        /*
         * : torrent://[: torrent]:64: torrent: Exception while parsing URL ': torrent://[: torrent]:64: torrent':no protocol: :%20torrent://[:%20torrent]:64:%20torrent
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      ResourceDownloaderFileImpl resourceDownloaderFileImpl0 = new ResourceDownloaderFileImpl((ResourceDownloaderBaseImpl) null, (File) null);
      ResourceDownloaderTimeoutImpl resourceDownloaderTimeoutImpl0 = new ResourceDownloaderTimeoutImpl((ResourceDownloaderBaseImpl) null, (ResourceDownloader) resourceDownloaderFileImpl0, 0);
      resourceDownloaderTimeoutImpl0.getClone((ResourceDownloaderBaseImpl) resourceDownloaderFileImpl0);
  }

  @Test
  public void test2()  throws Throwable  {
      Handler handler0 = new Handler();
      URL uRL0 = new URL("5aG", "5aG", 0, "5aG", (URLStreamHandler) handler0);
      ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl((ResourceDownloaderBaseImpl) null, uRL0, "5aG", false, "5aG", "5aG");
      ResourceDownloaderTimeoutImpl resourceDownloaderTimeoutImpl0 = new ResourceDownloaderTimeoutImpl((ResourceDownloaderBaseImpl) resourceDownloaderURLImpl0, (ResourceDownloader) resourceDownloaderURLImpl0, (-1206));
      assertNotNull(resourceDownloaderTimeoutImpl0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      resourceDownloaderTimeoutImpl0.setProperty("5aG", (Object) pipedInputStream0);
      assertEquals((-1L), resourceDownloaderTimeoutImpl0.getSize());
      assertEquals("5ag://5aG:05aG: timeout=-1206", resourceDownloaderTimeoutImpl0.getName());
  }

  @Test
  public void test3()  throws Throwable  {
      Handler handler0 = new Handler();
      URL uRL0 = new URL(": torrent", ": torrent", 64, ": torrent", (URLStreamHandler) handler0);
      ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl((ResourceDownloaderBaseImpl) null, uRL0, false, ": torrent", ": torrent");
      ResourceDownloaderTimeoutImpl resourceDownloaderTimeoutImpl0 = new ResourceDownloaderTimeoutImpl((ResourceDownloaderBaseImpl) resourceDownloaderURLImpl0, (ResourceDownloader) resourceDownloaderURLImpl0, 0);
      resourceDownloaderTimeoutImpl0.cancel();
      resourceDownloaderTimeoutImpl0.addListener((ResourceDownloaderListener) resourceDownloaderTimeoutImpl0);
  }

  @Test
  public void test4()  throws Throwable  {
      ResourceDownloaderFileImpl resourceDownloaderFileImpl0 = new ResourceDownloaderFileImpl((ResourceDownloaderBaseImpl) null, (File) null);
      ResourceDownloaderTimeoutImpl resourceDownloaderTimeoutImpl0 = new ResourceDownloaderTimeoutImpl((ResourceDownloaderBaseImpl) null, (ResourceDownloader) resourceDownloaderFileImpl0, 0);
      resourceDownloaderTimeoutImpl0.setSize((long) 0);
      resourceDownloaderTimeoutImpl0.getSize();
  }

  @Test
  public void test5()  throws Throwable  {
      ResourceDownloaderFileImpl resourceDownloaderFileImpl0 = new ResourceDownloaderFileImpl((ResourceDownloaderBaseImpl) null, (File) null);
      ResourceDownloaderRetryImpl resourceDownloaderRetryImpl0 = new ResourceDownloaderRetryImpl((ResourceDownloaderBaseImpl) null, (ResourceDownloader) resourceDownloaderFileImpl0, 0);
      ResourceDownloaderTimeoutImpl resourceDownloaderTimeoutImpl0 = new ResourceDownloaderTimeoutImpl((ResourceDownloaderBaseImpl) null, (ResourceDownloader) resourceDownloaderRetryImpl0, 0);
      assertNotNull(resourceDownloaderTimeoutImpl0);
      
      long long0 = resourceDownloaderTimeoutImpl0.getSize();
      assertEquals((-1L), long0);
  }

  @Test
  public void test6()  throws Throwable  {
      ResourceDownloaderFileImpl resourceDownloaderFileImpl0 = new ResourceDownloaderFileImpl((ResourceDownloaderBaseImpl) null, (File) null);
      ResourceDownloaderRetryImpl resourceDownloaderRetryImpl0 = new ResourceDownloaderRetryImpl((ResourceDownloaderBaseImpl) null, (ResourceDownloader) resourceDownloaderFileImpl0, 0);
      ResourceDownloaderTimeoutImpl resourceDownloaderTimeoutImpl0 = new ResourceDownloaderTimeoutImpl((ResourceDownloaderBaseImpl) null, (ResourceDownloader) resourceDownloaderRetryImpl0, 0);
      assertNotNull(resourceDownloaderTimeoutImpl0);
      
      // Undeclared exception!
      try {
        resourceDownloaderTimeoutImpl0.download();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      Handler handler0 = new Handler();
      URL uRL0 = new URL(": torrent", ": torrent", 64, ": torrent", (URLStreamHandler) handler0);
      ResourceDownloaderURLImpl resourceDownloaderURLImpl0 = new ResourceDownloaderURLImpl((ResourceDownloaderBaseImpl) null, uRL0, false, ": torrent", ": torrent");
      ResourceDownloaderTimeoutImpl resourceDownloaderTimeoutImpl0 = new ResourceDownloaderTimeoutImpl((ResourceDownloaderBaseImpl) resourceDownloaderURLImpl0, (ResourceDownloader) resourceDownloaderURLImpl0, 0);
      resourceDownloaderTimeoutImpl0.cancel();
      resourceDownloaderTimeoutImpl0.asyncGetSize();
  }

  @Test
  public void test8()  throws Throwable  {
      ResourceDownloaderFileImpl resourceDownloaderFileImpl0 = new ResourceDownloaderFileImpl((ResourceDownloaderBaseImpl) null, (File) null);
      ResourceDownloaderRetryImpl resourceDownloaderRetryImpl0 = new ResourceDownloaderRetryImpl((ResourceDownloaderBaseImpl) null, (ResourceDownloader) resourceDownloaderFileImpl0, 0);
      ResourceDownloaderTimeoutImpl resourceDownloaderTimeoutImpl0 = new ResourceDownloaderTimeoutImpl((ResourceDownloaderBaseImpl) null, (ResourceDownloader) resourceDownloaderRetryImpl0, 0);
      assertNotNull(resourceDownloaderTimeoutImpl0);
      
      boolean boolean0 = resourceDownloaderTimeoutImpl0.completed((ResourceDownloader) resourceDownloaderFileImpl0, (InputStream) null);
      assertEquals(true, boolean0);
      assertEquals((-1L), resourceDownloaderTimeoutImpl0.getSize());
  }
}
