/*
 * This file was automatically generated by EvoSuite
 */

package de.huxhorn.lilith.data.logging.protobuf;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.google.protobuf.ExtensionRegistry;
import de.huxhorn.lilith.data.eventsource.EventIdentifier;
import de.huxhorn.lilith.data.eventsource.EventWrapper;
import de.huxhorn.lilith.data.eventsource.SourceIdentifier;
import de.huxhorn.lilith.data.logging.LoggingEvent;
import de.huxhorn.lilith.data.logging.protobuf.LoggingEventWrapperProtobufDecoder;
import de.huxhorn.lilith.data.logging.protobuf.generated.LoggingProto;
import java.io.IOException;
import java.io.InputStream;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LoggingEventWrapperProtobufDecoderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LoggingEventWrapperProtobufDecoder loggingEventWrapperProtobufDecoder0 = new LoggingEventWrapperProtobufDecoder(true);
      assertEquals(true, loggingEventWrapperProtobufDecoder0.isCompressing());
      
      loggingEventWrapperProtobufDecoder0.setCompressing(false);
      byte[] byteArray0 = new byte[4];
      loggingEventWrapperProtobufDecoder0.decode(byteArray0);
      assertEquals(false, loggingEventWrapperProtobufDecoder0.isCompressing());
  }

  @Test
  public void test1()  throws Throwable  {
      LoggingEventWrapperProtobufDecoder loggingEventWrapperProtobufDecoder0 = new LoggingEventWrapperProtobufDecoder(true);
      boolean boolean0 = loggingEventWrapperProtobufDecoder0.isCompressing();
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      LoggingEventWrapperProtobufDecoder loggingEventWrapperProtobufDecoder0 = new LoggingEventWrapperProtobufDecoder(true);
      byte[] byteArray0 = new byte[4];
      loggingEventWrapperProtobufDecoder0.decode(byteArray0);
      assertEquals(true, loggingEventWrapperProtobufDecoder0.isCompressing());
  }

  @Test
  public void test3()  throws Throwable  {
      LoggingProto.EventWrapper loggingProto_EventWrapper0 = LoggingProto.EventWrapper.getDefaultInstance();
      EventWrapper<LoggingEvent> eventWrapper0 = LoggingEventWrapperProtobufDecoder.convert(loggingProto_EventWrapper0);
      assertEquals("eventWrapper[eventIdentifier=EventIdentifier[sourceIdentifier=null, localId=-1], event=null]", eventWrapper0.toString());
      assertNotNull(eventWrapper0);
  }

  @Test
  public void test4()  throws Throwable  {
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.getEmptyRegistry();
      LoggingProto.EventIdentifier loggingProto_EventIdentifier0 = LoggingProto.EventIdentifier.parseFrom((InputStream) null, extensionRegistry0);
      EventIdentifier eventIdentifier0 = LoggingEventWrapperProtobufDecoder.convert(loggingProto_EventIdentifier0);
      assertNotNull(eventIdentifier0);
      assertEquals("EventIdentifier[sourceIdentifier=null, localId=-1]", eventIdentifier0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      EventIdentifier eventIdentifier0 = LoggingEventWrapperProtobufDecoder.convert((LoggingProto.EventIdentifier) null);
      assertNull(eventIdentifier0);
  }

  @Test
  public void test6()  throws Throwable  {
      LoggingProto.SourceIdentifier loggingProto_SourceIdentifier0 = LoggingProto.SourceIdentifier.getDefaultInstance();
      SourceIdentifier sourceIdentifier0 = LoggingEventWrapperProtobufDecoder.convert(loggingProto_SourceIdentifier0);
      assertNotNull(sourceIdentifier0);
      assertEquals("null", sourceIdentifier0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      SourceIdentifier sourceIdentifier0 = LoggingEventWrapperProtobufDecoder.convert((LoggingProto.SourceIdentifier) null);
      assertNull(sourceIdentifier0);
  }
}
