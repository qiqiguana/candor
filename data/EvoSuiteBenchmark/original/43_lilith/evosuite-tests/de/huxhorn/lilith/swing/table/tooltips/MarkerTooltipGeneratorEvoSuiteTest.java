/*
 * This file was automatically generated by EvoSuite
 */

package de.huxhorn.lilith.swing.table.tooltips;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.huxhorn.lilith.data.logging.Marker;
import de.huxhorn.lilith.swing.table.tooltips.MarkerTooltipGenerator;
import groovy.lang.NonEmptySequence;
import java.util.List;
import javax.swing.JTable;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MarkerTooltipGeneratorEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MarkerTooltipGenerator markerTooltipGenerator0 = new MarkerTooltipGenerator();
      Object[][] objectArray0 = new Object[3][6];
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) markerTooltipGenerator0;
      objectArray1[1] = (Object) markerTooltipGenerator0;
      objectArray1[2] = (Object) markerTooltipGenerator0;
      objectArray1[3] = (Object) markerTooltipGenerator0;
      objectArray1[4] = (Object) markerTooltipGenerator0;
      objectArray1[5] = (Object) 0;
      JTable jTable0 = new JTable(objectArray0, objectArray1);
      String string0 = markerTooltipGenerator0.createTooltipText(jTable0, 0);
      assertNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "UCU@[");
      MarkerTooltipGenerator.appendMarker((Marker) null, stringBuilder0, (List<String>) null, false, false);
      assertEquals("UCU@[", stringBuilder0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      Marker marker0 = new Marker("IKy)p<m[~Id");
      StringBuilder stringBuilder0 = new StringBuilder();
      marker0.add(marker0);
      MarkerTooltipGenerator.appendMarker(marker0, stringBuilder0, (List<String>) null, true, true);
      assertEquals("IKy)p&lt;m[~Id<br/><ul><li>IKy)p&lt;m[~Id</li></ul>", stringBuilder0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      Marker marker0 = new Marker();
      StringBuilder stringBuilder0 = new StringBuilder();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence();
      MarkerTooltipGenerator.appendMarker(marker0, stringBuilder0, (List<String>) nonEmptySequence0, false, true);
      assertEquals("[Marker]", nonEmptySequence0.toString());
      assertEquals("Marker<br>", stringBuilder0.toString());
  }
}
