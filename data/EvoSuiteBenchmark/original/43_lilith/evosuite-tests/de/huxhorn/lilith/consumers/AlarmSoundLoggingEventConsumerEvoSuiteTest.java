/*
 * This file was automatically generated by EvoSuite
 */

package de.huxhorn.lilith.consumers;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.huxhorn.lilith.consumers.AlarmSoundLoggingEventConsumer;
import de.huxhorn.lilith.data.eventsource.EventIdentifier;
import de.huxhorn.lilith.data.eventsource.EventWrapper;
import de.huxhorn.lilith.data.logging.LoggingEvent;
import de.huxhorn.sulky.sounds.Sounds;
import de.huxhorn.sulky.sounds.jlayer.JLayerSounds;
import java.util.List;
import java.util.Vector;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AlarmSoundLoggingEventConsumerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AlarmSoundLoggingEventConsumer alarmSoundLoggingEventConsumer0 = new AlarmSoundLoggingEventConsumer();
      Sounds sounds0 = alarmSoundLoggingEventConsumer0.getSounds();
      assertNull(sounds0);
  }

  @Test
  public void test1()  throws Throwable  {
      AlarmSoundLoggingEventConsumer alarmSoundLoggingEventConsumer0 = new AlarmSoundLoggingEventConsumer();
      Vector<EventWrapper<LoggingEvent>> vector0 = new Vector<EventWrapper<LoggingEvent>>();
      alarmSoundLoggingEventConsumer0.consume((List<EventWrapper<LoggingEvent>>) vector0);
      assertEquals(10, vector0.capacity());
  }

  @Test
  public void test2()  throws Throwable  {
      AlarmSoundLoggingEventConsumer alarmSoundLoggingEventConsumer0 = new AlarmSoundLoggingEventConsumer();
      Vector<EventWrapper<LoggingEvent>> vector0 = new Vector<EventWrapper<LoggingEvent>>();
      EventWrapper<LoggingEvent> eventWrapper0 = new EventWrapper<LoggingEvent>();
      vector0.add(eventWrapper0);
      JLayerSounds jLayerSounds0 = new JLayerSounds();
      alarmSoundLoggingEventConsumer0.setSounds((Sounds) jLayerSounds0);
      alarmSoundLoggingEventConsumer0.consume((List<EventWrapper<LoggingEvent>>) vector0);
  }

  @Test
  public void test3()  throws Throwable  {
      AlarmSoundLoggingEventConsumer alarmSoundLoggingEventConsumer0 = new AlarmSoundLoggingEventConsumer();
      Vector<EventWrapper<LoggingEvent>> vector0 = new Vector<EventWrapper<LoggingEvent>>();
      EventIdentifier eventIdentifier0 = new EventIdentifier();
      LoggingEvent loggingEvent0 = new LoggingEvent();
      EventWrapper<LoggingEvent> eventWrapper0 = new EventWrapper<LoggingEvent>(eventIdentifier0, loggingEvent0);
      vector0.add(eventWrapper0);
      JLayerSounds jLayerSounds0 = new JLayerSounds();
      alarmSoundLoggingEventConsumer0.setSounds((Sounds) jLayerSounds0);
      alarmSoundLoggingEventConsumer0.consume((List<EventWrapper<LoggingEvent>>) vector0);
      assertEquals(10, vector0.capacity());
  }

  @Test
  public void test4()  throws Throwable  {
      AlarmSoundLoggingEventConsumer alarmSoundLoggingEventConsumer0 = new AlarmSoundLoggingEventConsumer();
      Vector<EventWrapper<LoggingEvent>> vector0 = new Vector<EventWrapper<LoggingEvent>>();
      EventIdentifier eventIdentifier0 = new EventIdentifier();
      LoggingEvent loggingEvent0 = new LoggingEvent();
      EventWrapper<LoggingEvent> eventWrapper0 = new EventWrapper<LoggingEvent>(eventIdentifier0, loggingEvent0);
      vector0.add(eventWrapper0);
      JLayerSounds jLayerSounds0 = new JLayerSounds();
      alarmSoundLoggingEventConsumer0.setSounds((Sounds) jLayerSounds0);
      LoggingEvent.Level loggingEvent_Level0 = LoggingEvent.Level.ERROR;
      loggingEvent0.setLevel(loggingEvent_Level0);
      alarmSoundLoggingEventConsumer0.consume((List<EventWrapper<LoggingEvent>>) vector0);
      assertEquals(10, vector0.capacity());
  }
}
