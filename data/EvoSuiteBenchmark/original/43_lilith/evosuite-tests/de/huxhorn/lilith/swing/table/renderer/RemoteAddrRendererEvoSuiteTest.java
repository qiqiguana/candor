/*
 * This file was automatically generated by EvoSuite
 */

package de.huxhorn.lilith.swing.table.renderer;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.huxhorn.lilith.data.access.AccessEvent;
import de.huxhorn.lilith.data.eventsource.EventIdentifier;
import de.huxhorn.lilith.data.eventsource.EventWrapper;
import de.huxhorn.lilith.data.eventsource.SourceIdentifier;
import de.huxhorn.lilith.swing.table.renderer.LabelCellRenderer;
import de.huxhorn.lilith.swing.table.renderer.RemoteAddrRenderer;
import javax.swing.DefaultListSelectionModel;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableModel;
import org.junit.BeforeClass;
import org.objectweb.asm.Opcodes;

@RunWith(EvoSuiteRunner.class)
public class RemoteAddrRendererEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      RemoteAddrRenderer remoteAddrRenderer0 = new RemoteAddrRenderer();
      assertNotNull(remoteAddrRenderer0);
      
      EventWrapper<AccessEvent> eventWrapper0 = new EventWrapper<AccessEvent>();
      EventIdentifier eventIdentifier0 = eventWrapper0.getEventIdentifier();
      SourceIdentifier sourceIdentifier0 = new SourceIdentifier(" tIx");
      Integer integer0 = Opcodes.DOUBLE;
      EventWrapper<Integer> eventWrapper1 = new EventWrapper<Integer>(sourceIdentifier0, 2L, integer0);
      EventWrapper<EventWrapper<Integer>> eventWrapper2 = new EventWrapper<EventWrapper<Integer>>(eventIdentifier0, eventWrapper1);
      LabelCellRenderer labelCellRenderer0 = (LabelCellRenderer)remoteAddrRenderer0.getTableCellRendererComponent((JTable) null, (Object) eventWrapper2, true, true, (int) integer0, (int) integer0);
      assertEquals(true, labelCellRenderer0.isForegroundSet());
      assertEquals(2, labelCellRenderer0.getHorizontalAlignment());
      assertNotNull(labelCellRenderer0);
  }

  @Test
  public void test1()  throws Throwable  {
      RemoteAddrRenderer remoteAddrRenderer0 = new RemoteAddrRenderer();
      assertNotNull(remoteAddrRenderer0);
      
      Object[] objectArray0 = new Object[17];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 1733);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      DefaultListSelectionModel defaultListSelectionModel0 = (DefaultListSelectionModel)defaultTableColumnModel0.getSelectionModel();
      JTable jTable0 = new JTable((TableModel) defaultTableModel0, (TableColumnModel) defaultTableColumnModel0, (ListSelectionModel) defaultListSelectionModel0);
      remoteAddrRenderer0.getTableCellRendererComponent(jTable0, (Object) remoteAddrRenderer0, false, false, 1733, 1733);
      assertEquals("javax.swing.DefaultListSelectionModel 765829682 ={}", defaultListSelectionModel0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      RemoteAddrRenderer remoteAddrRenderer0 = new RemoteAddrRenderer();
      assertNotNull(remoteAddrRenderer0);
      
      Object[][] objectArray0 = new Object[23][4];
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) remoteAddrRenderer0;
      objectArray1[1] = (Object) remoteAddrRenderer0;
      objectArray1[2] = (Object) objectArray0[1];
      JTable jTable0 = new JTable(objectArray0, objectArray1);
      LabelCellRenderer labelCellRenderer0 = (LabelCellRenderer)remoteAddrRenderer0.getTableCellRendererComponent(jTable0, objectArray1[0], false, false, (-1), (-1));
      assertEquals(2, labelCellRenderer0.getHorizontalAlignment());
      assertEquals(true, labelCellRenderer0.isForegroundSet());
      assertNotNull(labelCellRenderer0);
  }
}
