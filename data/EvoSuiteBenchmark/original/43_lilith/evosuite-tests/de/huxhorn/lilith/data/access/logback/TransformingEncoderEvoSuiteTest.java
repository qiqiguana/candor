/*
 * This file was automatically generated by EvoSuite
 */

package de.huxhorn.lilith.data.access.logback;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.huxhorn.lilith.data.access.AccessEvent;
import de.huxhorn.lilith.data.access.logback.TransformingEncoder;
import de.huxhorn.sulky.codec.Encoder;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TransformingEncoderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TransformingEncoder transformingEncoder0 = new TransformingEncoder();
      String string0 = transformingEncoder0.getApplicationIdentifier();
      assertNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      TransformingEncoder transformingEncoder0 = new TransformingEncoder();
      Encoder<AccessEvent> encoder0 = transformingEncoder0.getLilithEncoder();
      assertNull(encoder0);
  }

  @Test
  public void test2()  throws Throwable  {
      TransformingEncoder transformingEncoder0 = new TransformingEncoder();
      transformingEncoder0.setLilithEncoder((Encoder<AccessEvent>) null);
      assertNull(transformingEncoder0.getApplicationIdentifier());
  }

  @Test
  public void test3()  throws Throwable  {
      TransformingEncoder transformingEncoder0 = new TransformingEncoder();
      transformingEncoder0.setApplicationIdentifier("IT']X");
      // Undeclared exception!
      try {
        transformingEncoder0.encode((ch.qos.logback.access.spi.AccessEvent) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      TransformingEncoder transformingEncoder0 = new TransformingEncoder();
      // Undeclared exception!
      try {
        transformingEncoder0.encode((ch.qos.logback.access.spi.AccessEvent) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
