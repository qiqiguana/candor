/*
 * This file was automatically generated by EvoSuite
 */

package de.huxhorn.lilith.data.logging.protobuf;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.huxhorn.lilith.data.logging.ExtendedStackTraceElement;
import de.huxhorn.lilith.data.logging.LoggerContext;
import de.huxhorn.lilith.data.logging.LoggingEvent;
import de.huxhorn.lilith.data.logging.Marker;
import de.huxhorn.lilith.data.logging.Message;
import de.huxhorn.lilith.data.logging.ThreadInfo;
import de.huxhorn.lilith.data.logging.ThrowableInfo;
import de.huxhorn.lilith.data.logging.protobuf.LoggingEventProtobufEncoder;
import de.huxhorn.lilith.data.logging.protobuf.generated.LoggingProto;
import java.util.HashMap;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LoggingEventProtobufEncoderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LoggingEventProtobufEncoder loggingEventProtobufEncoder0 = new LoggingEventProtobufEncoder(true);
      loggingEventProtobufEncoder0.setCompressing(true);
      assertEquals(true, loggingEventProtobufEncoder0.isCompressing());
  }

  @Test
  public void test1()  throws Throwable  {
      LoggingEventProtobufEncoder loggingEventProtobufEncoder0 = new LoggingEventProtobufEncoder(true);
      boolean boolean0 = loggingEventProtobufEncoder0.isCompressing();
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      LoggingEventProtobufEncoder loggingEventProtobufEncoder0 = new LoggingEventProtobufEncoder(true);
      loggingEventProtobufEncoder0.encode((LoggingEvent) null);
      assertEquals(true, loggingEventProtobufEncoder0.isCompressing());
  }

  @Test
  public void test3()  throws Throwable  {
      LoggingEvent loggingEvent0 = new LoggingEvent();
      Marker marker0 = new Marker("-");
      loggingEvent0.setMarker(marker0);
      LoggingEventProtobufEncoder loggingEventProtobufEncoder0 = new LoggingEventProtobufEncoder(false);
      byte[] byteArray0 = loggingEventProtobufEncoder0.encode(loggingEvent0);
      assertNotNull(byteArray0);
      assertEquals(false, loggingEventProtobufEncoder0.isCompressing());
  }

  @Test
  public void test4()  throws Throwable  {
      LoggingProto.Marker loggingProto_Marker0 = LoggingEventProtobufEncoder.convert((Marker) null);
      assertNull(loggingProto_Marker0);
  }

  @Test
  public void test5()  throws Throwable  {
      Marker marker0 = new Marker();
      marker0.add(marker0);
      LoggingProto.Marker loggingProto_Marker0 = LoggingEventProtobufEncoder.convert(marker0);
      assertEquals("name: \"Marker\"\nreference {\n  name: \"Marker\"\n}\n", loggingProto_Marker0.toString());
      assertNotNull(loggingProto_Marker0);
  }

  @Test
  public void test6()  throws Throwable  {
      LoggingEvent loggingEvent0 = new LoggingEvent();
      ExtendedStackTraceElement[] extendedStackTraceElementArray0 = new ExtendedStackTraceElement[8];
      LoggingEventProtobufEncoder loggingEventProtobufEncoder0 = new LoggingEventProtobufEncoder(false);
      ExtendedStackTraceElement extendedStackTraceElement0 = new ExtendedStackTraceElement("-", "-", "-", 0, "-", "-", true);
      extendedStackTraceElementArray0[7] = extendedStackTraceElement0;
      loggingEvent0.setCallStack(extendedStackTraceElementArray0);
      byte[] byteArray0 = loggingEventProtobufEncoder0.encode(loggingEvent0);
      assertNotNull(byteArray0);
      assertEquals(false, loggingEventProtobufEncoder0.isCompressing());
  }

  @Test
  public void test7()  throws Throwable  {
      LoggingProto.StackTraceElement loggingProto_StackTraceElement0 = LoggingEventProtobufEncoder.convert((ExtendedStackTraceElement) null);
      assertNull(loggingProto_StackTraceElement0);
  }

  @Test
  public void test8()  throws Throwable  {
      ThrowableInfo throwableInfo0 = new ThrowableInfo();
      ExtendedStackTraceElement[] extendedStackTraceElementArray0 = new ExtendedStackTraceElement[10];
      ExtendedStackTraceElement extendedStackTraceElement0 = new ExtendedStackTraceElement();
      extendedStackTraceElementArray0[3] = extendedStackTraceElement0;
      throwableInfo0.setStackTrace(extendedStackTraceElementArray0);
      LoggingProto.Throwable loggingProto_Throwable0 = LoggingEventProtobufEncoder.convert(throwableInfo0);
      assertNotNull(loggingProto_Throwable0);
      assertEquals("stack_trace_element {\n  line_number: -1\n  exact: false\n}\n", loggingProto_Throwable0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      LoggingProto.Throwable loggingProto_Throwable0 = LoggingEventProtobufEncoder.convert((ThrowableInfo) null);
      assertNull(loggingProto_Throwable0);
  }

  @Test
  public void test10()  throws Throwable  {
      ThrowableInfo throwableInfo0 = new ThrowableInfo();
      throwableInfo0.setName("<");
      LoggingProto.Throwable loggingProto_Throwable0 = LoggingEventProtobufEncoder.convert(throwableInfo0);
      assertEquals(3, loggingProto_Throwable0.getSerializedSize());
      assertNotNull(loggingProto_Throwable0);
  }

  @Test
  public void test11()  throws Throwable  {
      ThrowableInfo throwableInfo0 = new ThrowableInfo();
      throwableInfo0.setMessage("Marker");
      LoggingProto.Throwable loggingProto_Throwable0 = LoggingEventProtobufEncoder.convert(throwableInfo0);
      assertEquals("message: \"Marker\"\n", loggingProto_Throwable0.toString());
      assertNotNull(loggingProto_Throwable0);
  }

  @Test
  public void test12()  throws Throwable  {
      ThrowableInfo throwableInfo0 = new ThrowableInfo();
      throwableInfo0.setOmittedElements(1642);
      LoggingProto.Throwable loggingProto_Throwable0 = LoggingEventProtobufEncoder.convert(throwableInfo0);
      assertEquals(1642, loggingProto_Throwable0.getOmittedElements());
      assertNotNull(loggingProto_Throwable0);
  }

  @Test
  public void test13()  throws Throwable  {
      ThrowableInfo throwableInfo0 = new ThrowableInfo();
      throwableInfo0.setCause(throwableInfo0);
      // Undeclared exception!
      try {
        LoggingEventProtobufEncoder.convert(throwableInfo0);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      LoggingEvent loggingEvent0 = new LoggingEvent();
      Message[] messageArray0 = new Message[1];
      loggingEvent0.setNdc(messageArray0);
      // Undeclared exception!
      try {
        LoggingEventProtobufEncoder.convert(loggingEvent0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Message message0 = new Message();
      message0.setMessagePattern("a4BB-FhK;%=;");
      LoggingProto.Message loggingProto_Message0 = LoggingEventProtobufEncoder.convert(message0);
      assertNotNull(loggingProto_Message0);
      assertEquals("a4BB-FhK;%=;", loggingProto_Message0.getMessagePattern());
  }

  @Test
  public void test16()  throws Throwable  {
      LoggingEvent loggingEvent0 = new LoggingEvent();
      String[] stringArray0 = new String[13];
      stringArray0[4] = "mi(;SQOib_wJ1";
      Message message0 = new Message("mi(;SQOib_wJ1", stringArray0);
      loggingEvent0.setMessage(message0);
      LoggingProto.LoggingEvent loggingProto_LoggingEvent0 = LoggingEventProtobufEncoder.convert(loggingEvent0);
      assertEquals("message {\n  message_pattern: \"mi(;SQOib_wJ1\"\n  argument {\n  }\n  argument {\n  }\n  argument {\n  }\n  argument {\n  }\n  argument {\n    value: \"mi(;SQOib_wJ1\"\n  }\n  argument {\n  }\n  argument {\n  }\n  argument {\n  }\n  argument {\n  }\n  argument {\n  }\n  argument {\n  }\n  argument {\n  }\n  argument {\n  }\n}\n", loggingProto_LoggingEvent0.toString());
      assertNotNull(loggingProto_LoggingEvent0);
  }

  @Test
  public void test17()  throws Throwable  {
      LoggingEvent loggingEvent0 = new LoggingEvent();
      Long long0 = new Long((-16L));
      ThreadInfo threadInfo0 = new ThreadInfo(long0, "LoggingEvent[logger=null, level=DEBUG, message=null, threadInfo=null, loggerContext=null, sequenceNumber=null, timeStamp=null]", (Long) (-16L), "LoggingEvent[logger=null, level=DEBUG, message=null, threadInfo=null, loggerContext=null, sequenceNumber=null, timeStamp=null]");
      loggingEvent0.setThreadInfo(threadInfo0);
      LoggingEventProtobufEncoder loggingEventProtobufEncoder0 = new LoggingEventProtobufEncoder(true);
      byte[] byteArray0 = loggingEventProtobufEncoder0.encode(loggingEvent0);
      assertEquals(true, loggingEventProtobufEncoder0.isCompressing());
      assertNotNull(byteArray0);
  }

  @Test
  public void test18()  throws Throwable  {
      LoggingProto.ThreadInfo loggingProto_ThreadInfo0 = LoggingEventProtobufEncoder.convert((ThreadInfo) null);
      assertNull(loggingProto_ThreadInfo0);
  }

  @Test
  public void test19()  throws Throwable  {
      ThreadInfo threadInfo0 = new ThreadInfo();
      LoggingProto.ThreadInfo loggingProto_ThreadInfo0 = LoggingEventProtobufEncoder.convert(threadInfo0);
      assertEquals("", loggingProto_ThreadInfo0.getGroupName());
  }

  @Test
  public void test20()  throws Throwable  {
      LoggingProto.LoggerContext loggingProto_LoggerContext0 = LoggingEventProtobufEncoder.convert((LoggerContext) null);
      assertNull(loggingProto_LoggerContext0);
  }

  @Test
  public void test21()  throws Throwable  {
      LoggingEvent loggingEvent0 = new LoggingEvent();
      LoggerContext loggerContext0 = new LoggerContext();
      loggingEvent0.setLoggerContext(loggerContext0);
      loggerContext0.setName("-");
      LoggingEventProtobufEncoder loggingEventProtobufEncoder0 = new LoggingEventProtobufEncoder(false);
      byte[] byteArray0 = loggingEventProtobufEncoder0.encode(loggingEvent0);
      assertNotNull(byteArray0);
      assertEquals(false, loggingEventProtobufEncoder0.isCompressing());
  }

  @Test
  public void test22()  throws Throwable  {
      LoggerContext loggerContext0 = new LoggerContext();
      Long long0 = new Long(44L);
      loggerContext0.setBirthTime(long0);
      LoggingProto.LoggerContext loggingProto_LoggerContext0 = LoggingEventProtobufEncoder.convert(loggerContext0);
      assertNotNull(loggingProto_LoggerContext0);
      assertEquals(44L, loggingProto_LoggerContext0.getBirthTime());
  }

  @Test
  public void test23()  throws Throwable  {
      LoggerContext loggerContext0 = new LoggerContext();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      loggerContext0.setProperties((Map<String, String>) hashMap0);
      LoggingProto.LoggerContext loggingProto_LoggerContext0 = LoggingEventProtobufEncoder.convert(loggerContext0);
      assertNotNull(loggingProto_LoggerContext0);
      assertEquals(false, loggingProto_LoggerContext0.hasProperties());
  }

  @Test
  public void test24()  throws Throwable  {
      LoggingEvent loggingEvent0 = new LoggingEvent();
      LoggerContext loggerContext0 = new LoggerContext();
      loggingEvent0.setLoggerContext(loggerContext0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LoggingEventProtobufEncoder loggingEventProtobufEncoder0 = new LoggingEventProtobufEncoder(false);
      hashMap0.put("-", "-");
      loggerContext0.setProperties((Map<String, String>) hashMap0);
      byte[] byteArray0 = loggingEventProtobufEncoder0.encode(loggingEvent0);
      assertNotNull(byteArray0);
      assertEquals(false, loggingEventProtobufEncoder0.isCompressing());
  }

  @Test
  public void test25()  throws Throwable  {
      LoggingProto.StringMap loggingProto_StringMap0 = LoggingEventProtobufEncoder.convert((Map<String, String>) null);
      assertNull(loggingProto_StringMap0);
  }

  @Test
  public void test26()  throws Throwable  {
      LoggingEvent loggingEvent0 = new LoggingEvent();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      loggingEvent0.setMdc((Map<String, String>) hashMap0);
      LoggingEventProtobufEncoder loggingEventProtobufEncoder0 = new LoggingEventProtobufEncoder(false);
      hashMap0.put("-", (String) null);
      byte[] byteArray0 = loggingEventProtobufEncoder0.encode(loggingEvent0);
      assertNotNull(byteArray0);
      assertEquals(false, loggingEventProtobufEncoder0.isCompressing());
  }

  @Test
  public void test27()  throws Throwable  {
      LoggingEvent loggingEvent0 = new LoggingEvent();
      loggingEvent0.setLogger("-");
      LoggingEventProtobufEncoder loggingEventProtobufEncoder0 = new LoggingEventProtobufEncoder(false);
      byte[] byteArray0 = loggingEventProtobufEncoder0.encode(loggingEvent0);
      assertEquals(false, loggingEventProtobufEncoder0.isCompressing());
      assertNotNull(byteArray0);
  }

  @Test
  public void test28()  throws Throwable  {
      LoggingEvent loggingEvent0 = new LoggingEvent();
      loggingEvent0.setSequenceNumber((Long) 0L);
      LoggingProto.LoggingEvent loggingProto_LoggingEvent0 = LoggingEventProtobufEncoder.convert(loggingEvent0);
      assertNotNull(loggingProto_LoggingEvent0);
      assertEquals(true, loggingProto_LoggingEvent0.hasSequenceNumber());
  }

  @Test
  public void test29()  throws Throwable  {
      LoggingEvent loggingEvent0 = new LoggingEvent();
      LoggingEventProtobufEncoder loggingEventProtobufEncoder0 = new LoggingEventProtobufEncoder(false);
      LoggingEvent.Level loggingEvent_Level0 = LoggingEvent.Level.INFO;
      loggingEvent0.setLevel(loggingEvent_Level0);
      byte[] byteArray0 = loggingEventProtobufEncoder0.encode(loggingEvent0);
      assertEquals(false, loggingEventProtobufEncoder0.isCompressing());
      assertNotNull(byteArray0);
  }

  @Test
  public void test30()  throws Throwable  {
      LoggingEvent loggingEvent0 = new LoggingEvent();
      LoggingEvent.Level loggingEvent_Level0 = LoggingEvent.Level.TRACE;
      loggingEvent0.setLevel(loggingEvent_Level0);
      LoggingProto.LoggingEvent loggingProto_LoggingEvent0 = LoggingEventProtobufEncoder.convert(loggingEvent0);
      assertNotNull(loggingProto_LoggingEvent0);
      assertEquals(2, loggingProto_LoggingEvent0.getSerializedSize());
  }

  @Test
  public void test31()  throws Throwable  {
      LoggingEvent loggingEvent0 = new LoggingEvent();
      LoggingEvent.Level loggingEvent_Level0 = LoggingEvent.Level.DEBUG;
      loggingEvent0.setLevel(loggingEvent_Level0);
      LoggingEventProtobufEncoder loggingEventProtobufEncoder0 = new LoggingEventProtobufEncoder(true);
      byte[] byteArray0 = loggingEventProtobufEncoder0.encode(loggingEvent0);
      assertNotNull(byteArray0);
      assertEquals(true, loggingEventProtobufEncoder0.isCompressing());
  }

  @Test
  public void test32()  throws Throwable  {
      LoggingEvent loggingEvent0 = new LoggingEvent();
      LoggingEvent.Level loggingEvent_Level0 = LoggingEvent.Level.WARN;
      loggingEvent0.setLevel(loggingEvent_Level0);
      LoggingProto.LoggingEvent loggingProto_LoggingEvent0 = LoggingEventProtobufEncoder.convert(loggingEvent0);
      assertNotNull(loggingProto_LoggingEvent0);
      assertEquals("level: WARN\n", loggingProto_LoggingEvent0.toString());
  }

  @Test
  public void test33()  throws Throwable  {
      LoggingEvent loggingEvent0 = new LoggingEvent();
      LoggingEvent.Level loggingEvent_Level0 = LoggingEvent.Level.ERROR;
      loggingEvent0.setLevel(loggingEvent_Level0);
      LoggingProto.LoggingEvent loggingProto_LoggingEvent0 = LoggingEventProtobufEncoder.convert(loggingEvent0);
      assertNotNull(loggingProto_LoggingEvent0);
      assertEquals(LoggingProto.Level.ERROR, loggingProto_LoggingEvent0.getLevel());
  }

  @Test
  public void test34()  throws Throwable  {
      LoggingEvent loggingEvent0 = new LoggingEvent();
      ThrowableInfo throwableInfo0 = new ThrowableInfo();
      loggingEvent0.setThrowable(throwableInfo0);
      LoggingProto.LoggingEvent loggingProto_LoggingEvent0 = LoggingEventProtobufEncoder.convert(loggingEvent0);
      assertEquals("throwable {\n}\n", loggingProto_LoggingEvent0.toString());
      assertNotNull(loggingProto_LoggingEvent0);
  }

  @Test
  public void test35()  throws Throwable  {
      LoggingEvent loggingEvent0 = new LoggingEvent();
      Long long0 = new Long(0L);
      loggingEvent0.setTimeStamp(long0);
      LoggingProto.LoggingEvent loggingProto_LoggingEvent0 = LoggingEventProtobufEncoder.convert(loggingEvent0);
      assertEquals(2, loggingProto_LoggingEvent0.getSerializedSize());
  }

  @Test
  public void test36()  throws Throwable  {
      LoggingEvent loggingEvent0 = new LoggingEvent();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      loggingEvent0.setMdc((Map<String, String>) hashMap0);
      LoggingEventProtobufEncoder loggingEventProtobufEncoder0 = new LoggingEventProtobufEncoder(false);
      byte[] byteArray0 = loggingEventProtobufEncoder0.encode(loggingEvent0);
      assertEquals(false, loggingEventProtobufEncoder0.isCompressing());
      assertNotNull(byteArray0);
  }

  @Test
  public void test37()  throws Throwable  {
      LoggingEvent loggingEvent0 = new LoggingEvent();
      String[] stringArray0 = new String[13];
      Message message0 = new Message("mi(;SQOib_wJ1", stringArray0);
      Message[] messageArray0 = new Message[3];
      messageArray0[0] = message0;
      messageArray0[1] = message0;
      messageArray0[2] = messageArray0[0];
      loggingEvent0.setNdc(messageArray0);
      LoggingProto.LoggingEvent loggingProto_LoggingEvent0 = LoggingEventProtobufEncoder.convert(loggingEvent0);
      assertNotNull(loggingProto_LoggingEvent0);
      assertEquals(132, loggingProto_LoggingEvent0.getSerializedSize());
  }
}
