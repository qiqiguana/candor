/*
 * This file was automatically generated by EvoSuite
 */

package de.huxhorn.lilith.engine.impl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.huxhorn.lilith.data.eventsource.SourceIdentifier;
import de.huxhorn.lilith.engine.impl.LogFileFactoryImpl;
import java.io.File;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LogFileFactoryImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      File file0 = new File("", "");
      LogFileFactoryImpl logFileFactoryImpl0 = new LogFileFactoryImpl(file0);
      assertNotNull(logFileFactoryImpl0);
      
      SourceIdentifier sourceIdentifier0 = new SourceIdentifier("", "");
      long long0 = logFileFactoryImpl0.getSizeOnDisk(sourceIdentifier0);
      assertEquals(0L, long0);
      assertEquals(".lilith", logFileFactoryImpl0.getDataFileExtension());
  }

  @Test
  public void test1()  throws Throwable  {
      File file0 = new File("", "");
      LogFileFactoryImpl logFileFactoryImpl0 = new LogFileFactoryImpl(file0);
      assertNotNull(logFileFactoryImpl0);
      
      File file1 = logFileFactoryImpl0.getBaseDir();
      assertEquals(".lilith", logFileFactoryImpl0.getDataFileExtension());
      assertNotNull(file1);
  }

  @Test
  public void test2()  throws Throwable  {
      File file0 = new File("", "");
      LogFileFactoryImpl logFileFactoryImpl0 = new LogFileFactoryImpl(file0);
      assertNotNull(logFileFactoryImpl0);
      
      SourceIdentifier sourceIdentifier0 = new SourceIdentifier("", "");
      long long0 = logFileFactoryImpl0.getNumberOfEvents(sourceIdentifier0);
      assertEquals(0L, long0);
      assertEquals(".lilith", logFileFactoryImpl0.getDataFileExtension());
  }

  @Test
  public void test3()  throws Throwable  {
      LogFileFactoryImpl logFileFactoryImpl0 = new LogFileFactoryImpl((File) null);
      assertNotNull(logFileFactoryImpl0);
      
      SourceIdentifier sourceIdentifier0 = new SourceIdentifier(".lilith");
      // Undeclared exception!
      try {
        logFileFactoryImpl0.getActiveFile(sourceIdentifier0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      LogFileFactoryImpl logFileFactoryImpl0 = new LogFileFactoryImpl((File) null);
      assertNotNull(logFileFactoryImpl0);
      
      String string0 = logFileFactoryImpl0.getDataFileExtension();
      assertNotNull(string0);
      assertEquals(".lilith", string0);
  }
}
