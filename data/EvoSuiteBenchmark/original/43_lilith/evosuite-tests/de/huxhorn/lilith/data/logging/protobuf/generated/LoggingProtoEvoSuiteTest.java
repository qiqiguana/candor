/*
 * This file was automatically generated by EvoSuite
 */

package de.huxhorn.lilith.data.logging.protobuf.generated;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.Descriptors;
import com.google.protobuf.ExtensionRegistry;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.UnknownFieldSet;
import de.huxhorn.lilith.data.logging.protobuf.generated.LoggingProto;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LoggingProtoEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.getEmptyRegistry();
      LoggingProto.LoggingEvent loggingProto_LoggingEvent0 = LoggingProto.LoggingEvent.parseFrom((InputStream) null, extensionRegistry0);
      assertNotNull(loggingProto_LoggingEvent0);
      
      ByteString byteString0 = loggingProto_LoggingEvent0.toByteString();
      assertNotNull(byteString0);
      
      LoggingProto.MessageArgument loggingProto_MessageArgument0 = LoggingProto.MessageArgument.parseFrom(byteString0);
      assertNotNull(loggingProto_MessageArgument0);
      
      ByteString byteString1 = loggingProto_MessageArgument0.toByteString();
      assertNotNull(byteString1);
      assertEquals(0L, loggingProto_LoggingEvent0.getSequenceNumber());
      assertEquals(0, loggingProto_MessageArgument0.getSerializedSize());
  }

  @Test
  public void test1()  throws Throwable  {
      LoggingProto.EventWrapper loggingProto_EventWrapper0 = LoggingProto.EventWrapper.parseFrom((InputStream) null);
      assertNotNull(loggingProto_EventWrapper0);
      
      LoggingProto.LoggingEvent loggingProto_LoggingEvent0 = loggingProto_EventWrapper0.getEvent();
      ByteString byteString0 = loggingProto_LoggingEvent0.toByteString();
      assertNotNull(byteString0);
      assertEquals(0, loggingProto_EventWrapper0.getSerializedSize());
      assertEquals(0, loggingProto_LoggingEvent0.getSerializedSize());
  }

  @Test
  public void test2()  throws Throwable  {
      LoggingProto.Level loggingProto_Level0 = LoggingProto.Level.ERROR;
      Descriptors.EnumValueDescriptor descriptors_EnumValueDescriptor0 = loggingProto_Level0.getValueDescriptor();
      assertEquals("de.huxhorn.lilith.logging.Level.ERROR", descriptors_EnumValueDescriptor0.getFullName());
      assertNotNull(descriptors_EnumValueDescriptor0);
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)53, (-1069));
      CodedInputStream codedInputStream0 = CodedInputStream.newInstance((InputStream) byteArrayInputStream0);
      LoggingProto.LoggingEvent loggingProto_LoggingEvent0 = LoggingProto.LoggingEvent.parseFrom(codedInputStream0);
      assertNotNull(loggingProto_LoggingEvent0);
      
      LoggingProto.LoggingEvent.Builder loggingProto_LoggingEvent_Builder0 = (LoggingProto.LoggingEvent.Builder)loggingProto_LoggingEvent0.toBuilder();
      assertEquals(false, loggingProto_LoggingEvent_Builder0.hasMessage());
      assertEquals(false, loggingProto_LoggingEvent_Builder0.hasThreadInfo());
      assertEquals(0L, loggingProto_LoggingEvent0.getSequenceNumber());
      assertEquals(false, loggingProto_LoggingEvent_Builder0.hasLoggerName());
      assertEquals(0, loggingProto_LoggingEvent0.getSerializedSize());
      assertNotNull(loggingProto_LoggingEvent_Builder0);
      assertEquals(false, loggingProto_LoggingEvent_Builder0.hasLevel());
      assertEquals(0L, loggingProto_LoggingEvent0.getTimeStamp());
  }

  @Test
  public void test4()  throws Throwable  {
      LoggingProto.LoggerContext loggingProto_LoggerContext0 = LoggingProto.LoggerContext.parseFrom((InputStream) null);
      assertNotNull(loggingProto_LoggerContext0);
      
      ByteString byteString0 = loggingProto_LoggerContext0.toByteString();
      assertNotNull(byteString0);
      
      LoggingProto.Message loggingProto_Message0 = LoggingProto.Message.parseFrom(byteString0);
      assertNotNull(loggingProto_Message0);
      
      String string0 = loggingProto_Message0.getMessagePattern();
      assertNotNull(string0);
      assertEquals(0, loggingProto_Message0.getSerializedSize());
      assertEquals(0L, loggingProto_LoggerContext0.getBirthTime());
  }

  @Test
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)53, (-1069));
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.getEmptyRegistry();
      LoggingProto.Message loggingProto_Message0 = LoggingProto.Message.parseFrom((InputStream) byteArrayInputStream0, extensionRegistry0);
      assertNotNull(loggingProto_Message0);
      
      int int0 = loggingProto_Message0.getSerializedSize();
      assertEquals(0, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)0, 1);
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.getEmptyRegistry();
      LoggingProto.EventIdentifier.parseDelimitedFrom((InputStream) byteArrayInputStream0, extensionRegistry0);
      LoggingProto.SourceIdentifier loggingProto_SourceIdentifier0 = LoggingProto.SourceIdentifier.parseFrom((InputStream) byteArrayInputStream0);
      loggingProto_SourceIdentifier0.toString();
  }

  @Test
  public void test7()  throws Throwable  {
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.getEmptyRegistry();
      LoggingProto.SourceIdentifier loggingProto_SourceIdentifier0 = LoggingProto.SourceIdentifier.parseFrom((InputStream) null, extensionRegistry0);
      assertNotNull(loggingProto_SourceIdentifier0);
      assertEquals(0, loggingProto_SourceIdentifier0.getSerializedSize());
  }

  @Test
  public void test8()  throws Throwable  {
      LoggingProto.LoggerContext loggingProto_LoggerContext0 = LoggingProto.LoggerContext.parseFrom((InputStream) null);
      assertNotNull(loggingProto_LoggerContext0);
      
      ByteString byteString0 = loggingProto_LoggerContext0.toByteString();
      assertNotNull(byteString0);
      
      LoggingProto.StackTraceElement loggingProto_StackTraceElement0 = LoggingProto.StackTraceElement.parseFrom(byteString0);
      assertNotNull(loggingProto_StackTraceElement0);
      
      ByteString byteString1 = loggingProto_StackTraceElement0.toByteString();
      assertNotNull(byteString1);
      assertEquals(0L, loggingProto_LoggerContext0.getBirthTime());
      assertEquals(0, loggingProto_StackTraceElement0.getSerializedSize());
  }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.getEmptyRegistry();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 480, 0);
      LoggingProto.StackTraceElement loggingProto_StackTraceElement0 = LoggingProto.StackTraceElement.parseFrom((InputStream) byteArrayInputStream0, extensionRegistry0);
      assertEquals(0, loggingProto_StackTraceElement0.getSerializedSize());
      assertNotNull(loggingProto_StackTraceElement0);
      assertEquals(false, loggingProto_StackTraceElement0.getExact());
      assertEquals(0, loggingProto_StackTraceElement0.getLineNumber());
  }

  @Test
  public void test10()  throws Throwable  {
      UnknownFieldSet unknownFieldSet0 = UnknownFieldSet.parseFrom((InputStream) null);
      ByteString byteString0 = unknownFieldSet0.toByteString();
      LoggingProto.NestedDiagnosticContext loggingProto_NestedDiagnosticContext0 = LoggingProto.NestedDiagnosticContext.parseFrom(byteString0);
      assertEquals(0, loggingProto_NestedDiagnosticContext0.getSerializedSize());
      assertNotNull(loggingProto_NestedDiagnosticContext0);
  }

  @Test
  public void test11()  throws Throwable  {
      LoggingProto.LoggerContext loggingProto_LoggerContext0 = LoggingProto.LoggerContext.parseFrom((InputStream) null);
      assertNotNull(loggingProto_LoggerContext0);
      
      ByteString byteString0 = loggingProto_LoggerContext0.toByteString();
      assertNotNull(byteString0);
      
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.getEmptyRegistry();
      LoggingProto.NestedDiagnosticContext loggingProto_NestedDiagnosticContext0 = LoggingProto.NestedDiagnosticContext.parseFrom(byteString0, extensionRegistry0);
      assertNotNull(loggingProto_NestedDiagnosticContext0);
      
      LoggingProto.NestedDiagnosticContext loggingProto_NestedDiagnosticContext1 = (LoggingProto.NestedDiagnosticContext)loggingProto_NestedDiagnosticContext0.getDefaultInstanceForType();
      assertNotNull(loggingProto_NestedDiagnosticContext1);
      assertEquals(0, loggingProto_NestedDiagnosticContext0.getSerializedSize());
      assertEquals(0L, loggingProto_LoggerContext0.getBirthTime());
      assertTrue(loggingProto_NestedDiagnosticContext1.equals(loggingProto_NestedDiagnosticContext0));
  }

  @Test
  public void test12()  throws Throwable  {
      LoggingProto.LoggerContext loggingProto_LoggerContext0 = LoggingProto.LoggerContext.parseFrom((InputStream) null);
      assertNotNull(loggingProto_LoggerContext0);
      
      ByteString byteString0 = loggingProto_LoggerContext0.toByteString();
      assertNotNull(byteString0);
      
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.getEmptyRegistry();
      LoggingProto.NestedDiagnosticContext loggingProto_NestedDiagnosticContext0 = LoggingProto.NestedDiagnosticContext.parseFrom(byteString0, extensionRegistry0);
      assertNotNull(loggingProto_NestedDiagnosticContext0);
      
      loggingProto_NestedDiagnosticContext0.getEntryCount();
      assertEquals(0, loggingProto_NestedDiagnosticContext0.getSerializedSize());
      assertEquals(0L, loggingProto_LoggerContext0.getBirthTime());
  }

  @Test
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try {
        LoggingProto.ThreadInfo.parseFrom((CodedInputStream) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      LoggingProto.ThreadInfo loggingProto_ThreadInfo0 = LoggingProto.ThreadInfo.parseFrom((InputStream) null);
      assertNotNull(loggingProto_ThreadInfo0);
      
      byte[] byteArray0 = loggingProto_ThreadInfo0.toByteArray();
      assertEquals(0L, loggingProto_ThreadInfo0.getId());
      assertNotNull(byteArray0);
      assertEquals(0L, loggingProto_ThreadInfo0.getGroupId());
      assertEquals(0, loggingProto_ThreadInfo0.getSerializedSize());
  }

  @Test
  public void test15()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.getEmptyRegistry();
      LoggingProto.ThreadInfo loggingProto_ThreadInfo0 = LoggingProto.ThreadInfo.parseFrom(byteString0, extensionRegistry0);
      assertEquals(0, loggingProto_ThreadInfo0.getSerializedSize());
      assertNotNull(loggingProto_ThreadInfo0);
      assertEquals(0L, loggingProto_ThreadInfo0.getGroupId());
      assertEquals(0L, loggingProto_ThreadInfo0.getId());
  }

  @Test
  public void test16()  throws Throwable  {
      LoggingProto.ThreadInfo loggingProto_ThreadInfo0 = LoggingProto.ThreadInfo.parseFrom((InputStream) null);
      assertNotNull(loggingProto_ThreadInfo0);
      
      String string0 = loggingProto_ThreadInfo0.toString();
      assertEquals(0L, loggingProto_ThreadInfo0.getId());
      assertNotNull(string0);
      assertEquals(0, loggingProto_ThreadInfo0.getSerializedSize());
      assertEquals(0L, loggingProto_ThreadInfo0.getGroupId());
  }

  @Test
  public void test17()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CodedInputStream codedInputStream0 = CodedInputStream.newInstance((InputStream) pipedInputStream0);
      try {
        LoggingProto.MessageArgument.parseFrom(codedInputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Pipe not connected
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      try {
        LoggingProto.Marker.parseFrom(byteString0);
        fail("Expecting exception: InvalidProtocolBufferException");
      } catch(InvalidProtocolBufferException e) {
        /*
         * Message missing required fields: name
         */
      }
  }

  @Test
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.newInstance();
      try {
        LoggingProto.Marker.parseFrom(byteArray0, extensionRegistry0);
        fail("Expecting exception: InvalidProtocolBufferException");
      } catch(InvalidProtocolBufferException e) {
        /*
         * Protocol message contained an invalid tag (zero).
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      LoggingProto.Throwable loggingProto_Throwable0 = LoggingProto.Throwable.parseFrom((InputStream) null);
      assertNotNull(loggingProto_Throwable0);
      
      LoggingProto.Throwable.Builder loggingProto_Throwable_Builder0 = (LoggingProto.Throwable.Builder)loggingProto_Throwable0.toBuilder();
      assertEquals(false, loggingProto_Throwable_Builder0.hasCause());
      assertEquals(false, loggingProto_Throwable_Builder0.hasMessage());
      assertEquals(false, loggingProto_Throwable_Builder0.hasThrowableClass());
      assertEquals(0, loggingProto_Throwable0.getOmittedElements());
      assertEquals(0, loggingProto_Throwable0.getSerializedSize());
      assertEquals(false, loggingProto_Throwable_Builder0.hasOmittedElements());
      assertNotNull(loggingProto_Throwable_Builder0);
  }

  @Test
  public void test21()  throws Throwable  {
      Descriptors.Descriptor descriptors_Descriptor0 = LoggingProto.Throwable.getDescriptor();
      assertEquals("de.huxhorn.lilith.logging.Throwable", descriptors_Descriptor0.getFullName());
  }

  @Test
  public void test22()  throws Throwable  {
      LoggingProto.Marker loggingProto_Marker0 = LoggingProto.Marker.getDefaultInstance();
      ByteString byteString0 = loggingProto_Marker0.toByteString();
      assertNotNull(byteString0);
      
      LoggingProto.Throwable loggingProto_Throwable0 = LoggingProto.Throwable.parseFrom(byteString0);
      assertNotNull(loggingProto_Throwable0);
      
      // Undeclared exception!
      try {
        loggingProto_Throwable0.getStackTraceElement(122);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 122
         */
      }
  }

  @Test
  public void test23()  throws Throwable  {
      Descriptors.Descriptor descriptors_Descriptor0 = LoggingProto.EventIdentifier.getDescriptor();
      assertEquals("EventIdentifier", descriptors_Descriptor0.getName());
  }

  @Test
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte)53, (-1069));
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.getEmptyRegistry();
      try {
        LoggingProto.LoggerContext.parseDelimitedFrom((InputStream) byteArrayInputStream0, extensionRegistry0);
        fail("Expecting exception: InvalidProtocolBufferException");
      } catch(InvalidProtocolBufferException e) {
        /*
         * While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         */
      }
  }

  @Test
  public void test25()  throws Throwable  {
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.getEmptyRegistry();
      LoggingProto.StringMap loggingProto_StringMap0 = LoggingProto.StringMap.parseFrom((InputStream) null, extensionRegistry0);
      assertNotNull(loggingProto_StringMap0);
      
      loggingProto_StringMap0.hashCode();
      assertEquals(0, loggingProto_StringMap0.getSerializedSize());
  }

  @Test
  public void test26()  throws Throwable  {
      LoggingProto.EventWrapper loggingProto_EventWrapper0 = LoggingProto.EventWrapper.getDefaultInstance();
      LoggingProto.EventWrapper loggingProto_EventWrapper1 = (LoggingProto.EventWrapper)loggingProto_EventWrapper0.getDefaultInstanceForType();
      assertEquals(0, loggingProto_EventWrapper1.getSerializedSize());
  }

  @Test
  public void test27()  throws Throwable  {
      LoggingProto.LoggerContext loggingProto_LoggerContext0 = LoggingProto.LoggerContext.parseFrom((InputStream) null);
      assertNotNull(loggingProto_LoggerContext0);
      
      ByteString byteString0 = loggingProto_LoggerContext0.toByteString();
      assertNotNull(byteString0);
      
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.getEmptyRegistry();
      CodedInputStream codedInputStream0 = byteString0.newCodedInput();
      LoggingProto.EventWrapper loggingProto_EventWrapper0 = LoggingProto.EventWrapper.parseFrom(codedInputStream0, extensionRegistry0);
      assertEquals(0, loggingProto_EventWrapper0.getSerializedSize());
      assertNotNull(loggingProto_EventWrapper0);
      assertEquals(0L, loggingProto_LoggerContext0.getBirthTime());
  }

  @Test
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.getEmptyRegistry();
      try {
        LoggingProto.EventWrapper.parseFrom(byteArray0, extensionRegistry0);
        fail("Expecting exception: InvalidProtocolBufferException");
      } catch(InvalidProtocolBufferException e) {
        /*
         * Protocol message tag had invalid wire type.
         */
      }
  }

  @Test
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = (ByteArrayInputStream)byteString0.newInput();
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.newInstance();
      try {
        LoggingProto.LoggingEvent.parseFrom((InputStream) byteArrayInputStream0, extensionRegistry0);
        fail("Expecting exception: InvalidProtocolBufferException");
      } catch(InvalidProtocolBufferException e) {
        /*
         * While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.
         */
      }
  }
}
