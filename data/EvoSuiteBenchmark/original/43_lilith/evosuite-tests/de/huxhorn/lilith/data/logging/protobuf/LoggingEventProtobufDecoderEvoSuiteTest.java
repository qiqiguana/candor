/*
 * This file was automatically generated by EvoSuite
 */

package de.huxhorn.lilith.data.logging.protobuf;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.google.protobuf.ByteString;
import com.google.protobuf.ExtensionRegistry;
import com.google.protobuf.InvalidProtocolBufferException;
import de.huxhorn.lilith.data.logging.ExtendedStackTraceElement;
import de.huxhorn.lilith.data.logging.LoggerContext;
import de.huxhorn.lilith.data.logging.LoggingEvent;
import de.huxhorn.lilith.data.logging.Marker;
import de.huxhorn.lilith.data.logging.Message;
import de.huxhorn.lilith.data.logging.ThreadInfo;
import de.huxhorn.lilith.data.logging.ThrowableInfo;
import de.huxhorn.lilith.data.logging.protobuf.LoggingEventProtobufDecoder;
import de.huxhorn.lilith.data.logging.protobuf.generated.LoggingProto;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LoggingEventProtobufDecoderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LoggingEventProtobufDecoder loggingEventProtobufDecoder0 = new LoggingEventProtobufDecoder(false);
      boolean boolean0 = loggingEventProtobufDecoder0.isCompressing();
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      LoggingEventProtobufDecoder loggingEventProtobufDecoder0 = new LoggingEventProtobufDecoder(false);
      loggingEventProtobufDecoder0.setCompressing(false);
      assertEquals(false, loggingEventProtobufDecoder0.isCompressing());
  }

  @Test
  public void test2()  throws Throwable  {
      LoggingEventProtobufDecoder loggingEventProtobufDecoder0 = new LoggingEventProtobufDecoder(false);
      byte[] byteArray0 = new byte[10];
      loggingEventProtobufDecoder0.decode(byteArray0);
      assertEquals(false, loggingEventProtobufDecoder0.isCompressing());
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      LoggingEventProtobufDecoder loggingEventProtobufDecoder0 = new LoggingEventProtobufDecoder(true);
      loggingEventProtobufDecoder0.decode(byteArray0);
      assertEquals(true, loggingEventProtobufDecoder0.isCompressing());
  }

  @Test
  public void test4()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.newInstance();
      LoggingProto.LoggingEvent loggingProto_LoggingEvent0 = LoggingProto.LoggingEvent.parseFrom(byteString0, extensionRegistry0);
      LoggingProto.Marker loggingProto_Marker0 = loggingProto_LoggingEvent0.getMarker();
      Marker marker0 = LoggingEventProtobufDecoder.convert(loggingProto_Marker0);
      assertEquals("", marker0.toString());
      assertNotNull(marker0);
  }

  @Test
  public void test5()  throws Throwable  {
      Marker marker0 = LoggingEventProtobufDecoder.convert((LoggingProto.Marker) null);
      assertNull(marker0);
  }

  @Test
  public void test6()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      LoggingProto.StackTraceElement loggingProto_StackTraceElement0 = LoggingProto.StackTraceElement.parseFrom(byteString0);
      ExtendedStackTraceElement extendedStackTraceElement0 = LoggingEventProtobufDecoder.convert(loggingProto_StackTraceElement0);
      assertEquals(-1, extendedStackTraceElement0.getLineNumber());
      assertNotNull(extendedStackTraceElement0);
      assertEquals("null.null(Unknown Source)", extendedStackTraceElement0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      ExtendedStackTraceElement extendedStackTraceElement0 = LoggingEventProtobufDecoder.convert((LoggingProto.StackTraceElement) null);
      assertNull(extendedStackTraceElement0);
  }

  @Test
  public void test8()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.newInstance();
      LoggingProto.Throwable loggingProto_Throwable0 = LoggingProto.Throwable.parseFrom(byteString0, extensionRegistry0);
      ThrowableInfo throwableInfo0 = LoggingEventProtobufDecoder.convert(loggingProto_Throwable0);
      assertEquals("ThrowableInfo[name=null]", throwableInfo0.toString());
      assertNotNull(throwableInfo0);
  }

  @Test
  public void test9()  throws Throwable  {
      ThrowableInfo throwableInfo0 = LoggingEventProtobufDecoder.convert((LoggingProto.Throwable) null);
      assertNull(throwableInfo0);
  }

  @Test
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte) (-38), (int) (byte) (-38));
      LoggingProto.Message loggingProto_Message0 = LoggingProto.Message.parseFrom((InputStream) byteArrayInputStream0);
      Message message0 = LoggingEventProtobufDecoder.convert(loggingProto_Message0);
      assertEquals("Message[messagePattern=null, arguments=null]", message0.toString());
      assertNotNull(message0);
  }

  @Test
  public void test11()  throws Throwable  {
      Message message0 = LoggingEventProtobufDecoder.convert((LoggingProto.Message) null);
      assertNull(message0);
  }

  @Test
  public void test12()  throws Throwable  {
      LoggingProto.ThreadInfo loggingProto_ThreadInfo0 = LoggingProto.ThreadInfo.getDefaultInstance();
      ThreadInfo threadInfo0 = LoggingEventProtobufDecoder.convert(loggingProto_ThreadInfo0);
      assertEquals("ThreadInfo[id=null, name=null, groupId=null, groupName=null]", threadInfo0.toString());
      assertNotNull(threadInfo0);
  }

  @Test
  public void test13()  throws Throwable  {
      ThreadInfo threadInfo0 = LoggingEventProtobufDecoder.convert((LoggingProto.ThreadInfo) null);
      assertNull(threadInfo0);
  }

  @Test
  public void test14()  throws Throwable  {
      LoggingProto.LoggingEvent loggingProto_LoggingEvent0 = LoggingProto.LoggingEvent.getDefaultInstance();
      LoggingProto.LoggerContext loggingProto_LoggerContext0 = loggingProto_LoggingEvent0.getLoggerContext();
      LoggerContext loggerContext0 = LoggingEventProtobufDecoder.convert(loggingProto_LoggerContext0);
      assertNotNull(loggerContext0);
      assertEquals("LoggerContext[name=null, birthTime=null, properties=null]", loggerContext0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      LoggerContext loggerContext0 = LoggingEventProtobufDecoder.convert((LoggingProto.LoggerContext) null);
      assertNull(loggerContext0);
  }

  @Test
  public void test16()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.newInstance();
      LoggingProto.StringMap loggingProto_StringMap0 = LoggingProto.StringMap.parseFrom(byteString0, extensionRegistry0);
      Map<String, String> map0 = LoggingEventProtobufDecoder.convert(loggingProto_StringMap0);
      assertNull(map0);
  }

  @Test
  public void test17()  throws Throwable  {
      Map<String, String> map0 = LoggingEventProtobufDecoder.convert((LoggingProto.StringMap) null);
      assertNull(map0);
  }

  @Test
  public void test18()  throws Throwable  {
      LoggingProto.LoggingEvent loggingProto_LoggingEvent0 = LoggingProto.LoggingEvent.getDefaultInstance();
      LoggingEvent loggingEvent0 = LoggingEventProtobufDecoder.convert(loggingProto_LoggingEvent0);
      assertNotNull(loggingEvent0);
      assertEquals("LoggingEvent[logger=null, level=null, message=null, threadInfo=null, loggerContext=null, sequenceNumber=null, timeStamp=null]", loggingEvent0.toString());
  }
}
