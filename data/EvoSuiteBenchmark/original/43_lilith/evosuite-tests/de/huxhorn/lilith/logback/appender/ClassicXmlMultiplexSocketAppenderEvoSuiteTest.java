/*
 * This file was automatically generated by EvoSuite
 */

package de.huxhorn.lilith.logback.appender;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import ch.qos.logback.classic.spi.LoggingEvent;
import de.huxhorn.lilith.logback.appender.ClassicXmlMultiplexSocketAppender;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ClassicXmlMultiplexSocketAppenderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ClassicXmlMultiplexSocketAppender classicXmlMultiplexSocketAppender0 = new ClassicXmlMultiplexSocketAppender();
      assertNotNull(classicXmlMultiplexSocketAppender0);
      
      boolean boolean0 = classicXmlMultiplexSocketAppender0.isIncludeCallerData();
      assertEquals(10020, classicXmlMultiplexSocketAppender0.getPort());
      assertEquals(false, boolean0);
      assertEquals(true, classicXmlMultiplexSocketAppender0.isCompressing());
  }

  @Test
  public void test1()  throws Throwable  {
      ClassicXmlMultiplexSocketAppender classicXmlMultiplexSocketAppender0 = new ClassicXmlMultiplexSocketAppender(true);
      assertEquals(false, classicXmlMultiplexSocketAppender0.isIncludeCallerData());
      assertNotNull(classicXmlMultiplexSocketAppender0);
      
      classicXmlMultiplexSocketAppender0.setIncludeCallerData(true);
      LoggingEvent loggingEvent0 = new LoggingEvent();
      // Undeclared exception!
      try {
        classicXmlMultiplexSocketAppender0.preProcess(loggingEvent0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      ClassicXmlMultiplexSocketAppender classicXmlMultiplexSocketAppender0 = new ClassicXmlMultiplexSocketAppender(true);
      assertNotNull(classicXmlMultiplexSocketAppender0);
      
      boolean boolean0 = classicXmlMultiplexSocketAppender0.isCompressing();
      assertEquals(false, classicXmlMultiplexSocketAppender0.isIncludeCallerData());
      assertEquals(true, boolean0);
      assertEquals(10020, classicXmlMultiplexSocketAppender0.getPort());
  }

  @Test
  public void test3()  throws Throwable  {
      ClassicXmlMultiplexSocketAppender classicXmlMultiplexSocketAppender0 = new ClassicXmlMultiplexSocketAppender(true);
      assertNotNull(classicXmlMultiplexSocketAppender0);
      
      classicXmlMultiplexSocketAppender0.setApplicationIdentifier((String) null);
      assertEquals(false, classicXmlMultiplexSocketAppender0.isIncludeCallerData());
      assertEquals(true, classicXmlMultiplexSocketAppender0.isCompressing());
      assertEquals(10020, classicXmlMultiplexSocketAppender0.getPort());
  }

  @Test
  public void test4()  throws Throwable  {
      ClassicXmlMultiplexSocketAppender classicXmlMultiplexSocketAppender0 = new ClassicXmlMultiplexSocketAppender();
      assertNotNull(classicXmlMultiplexSocketAppender0);
      
      classicXmlMultiplexSocketAppender0.setPort(0);
      assertEquals(true, classicXmlMultiplexSocketAppender0.isCompressing());
      
      classicXmlMultiplexSocketAppender0.setCompressing(false);
      assertEquals(0, classicXmlMultiplexSocketAppender0.getPort());
  }

  @Test
  public void test5()  throws Throwable  {
      ClassicXmlMultiplexSocketAppender classicXmlMultiplexSocketAppender0 = new ClassicXmlMultiplexSocketAppender(false);
      assertNotNull(classicXmlMultiplexSocketAppender0);
      
      classicXmlMultiplexSocketAppender0.preProcess((LoggingEvent) null);
      assertEquals(10021, classicXmlMultiplexSocketAppender0.getPort());
      assertEquals(false, classicXmlMultiplexSocketAppender0.isIncludeCallerData());
  }

  @Test
  public void test6()  throws Throwable  {
      ClassicXmlMultiplexSocketAppender classicXmlMultiplexSocketAppender0 = new ClassicXmlMultiplexSocketAppender(true);
      assertNotNull(classicXmlMultiplexSocketAppender0);
      
      LoggingEvent loggingEvent0 = new LoggingEvent();
      classicXmlMultiplexSocketAppender0.preProcess(loggingEvent0);
      assertEquals(true, classicXmlMultiplexSocketAppender0.isCompressing());
      assertEquals(false, classicXmlMultiplexSocketAppender0.isIncludeCallerData());
      assertEquals(10020, classicXmlMultiplexSocketAppender0.getPort());
  }
}
