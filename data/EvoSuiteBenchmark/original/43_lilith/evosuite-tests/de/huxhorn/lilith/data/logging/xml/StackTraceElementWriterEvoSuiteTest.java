/*
 * This file was automatically generated by EvoSuite
 */

package de.huxhorn.lilith.data.logging.xml;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.bea.xml.stream.XMLStreamRecorder;
import de.huxhorn.lilith.data.logging.ExtendedStackTraceElement;
import de.huxhorn.lilith.data.logging.xml.StackTraceElementWriter;
import de.huxhorn.sulky.stax.IndentingXMLStreamWriter;
import java.io.CharArrayWriter;
import java.io.Writer;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class StackTraceElementWriterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      StackTraceElementWriter stackTraceElementWriter0 = new StackTraceElementWriter();
      stackTraceElementWriter0.setPreferredPrefix("BhB{MR:+Z%");
      assertEquals("BhB{MR:+Z%", stackTraceElementWriter0.getPreferredPrefix());
  }

  @Test
  public void test1()  throws Throwable  {
      StackTraceElementWriter stackTraceElementWriter0 = new StackTraceElementWriter();
      boolean boolean0 = stackTraceElementWriter0.isWritingSchemaLocation();
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      StackTraceElementWriter stackTraceElementWriter0 = new StackTraceElementWriter();
      String string0 = stackTraceElementWriter0.getPreferredPrefix();
      assertNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      StackTraceElementWriter stackTraceElementWriter0 = new StackTraceElementWriter();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      XMLStreamRecorder xMLStreamRecorder0 = new XMLStreamRecorder((Writer) charArrayWriter0);
      IndentingXMLStreamWriter indentingXMLStreamWriter0 = new IndentingXMLStreamWriter((XMLStreamWriter) xMLStreamRecorder0);
      ExtendedStackTraceElement extendedStackTraceElement0 = new ExtendedStackTraceElement("BhB{MR:+Z%", "BhB{MR:+Z%", "BhB{MR:+Z%", 3);
      stackTraceElementWriter0.write((XMLStreamWriter) indentingXMLStreamWriter0, extendedStackTraceElement0, true);
      stackTraceElementWriter0.write((XMLStreamWriter) xMLStreamRecorder0, extendedStackTraceElement0, true);
  }

  @Test
  public void test4()  throws Throwable  {
      StackTraceElementWriter stackTraceElementWriter0 = new StackTraceElementWriter();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      XMLStreamRecorder xMLStreamRecorder0 = new XMLStreamRecorder((Writer) charArrayWriter0);
      ExtendedStackTraceElement extendedStackTraceElement0 = new ExtendedStackTraceElement("BhB{MR:+Z%", "BhB{MR:+Z%", "BhB{MR:+Z%", 3);
      stackTraceElementWriter0.setWritingSchemaLocation(true);
      stackTraceElementWriter0.write((XMLStreamWriter) xMLStreamRecorder0, extendedStackTraceElement0, true);
  }

  @Test
  public void test5()  throws Throwable  {
      StackTraceElementWriter stackTraceElementWriter0 = new StackTraceElementWriter();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      XMLStreamRecorder xMLStreamRecorder0 = new XMLStreamRecorder((Writer) charArrayWriter0);
      ExtendedStackTraceElement extendedStackTraceElement0 = new ExtendedStackTraceElement("BhB{MR:+Z%", "BhB{MR:+Z%", "BhB{MR:+Z%", (-1), "BhB{MR:+Z%", "BhB{MR:+Z%", true);
      stackTraceElementWriter0.write((XMLStreamWriter) xMLStreamRecorder0, extendedStackTraceElement0, false);
      assertEquals("[['http://lilith.sf.net/schema/logging/13':StackTraceElement][[DEFAULT][xmlns]=[http://lilith.sf.net/schema/logging/13]][[ATTRIBUTE][className]=[BhB{MR:+Z%]][[ATTRIBUTE][methodName]=[BhB{MR:+Z%]][[ATTRIBUTE][fileName]=[BhB{MR:+Z%]]];\n[['http://lilith.sf.net/schema/logging/13':CodeLocation]];\n[BhB{MR:+Z%][[CodeLocation]][['http://lilith.sf.net/schema/logging/13':Version]];\n[BhB{MR:+Z%][[Version]]<['http://lilith.sf.net/schema/logging/13':Exact]];\n[[StackTraceElement]]", charArrayWriter0.toString());
      assertEquals(476, charArrayWriter0.size());
  }
}
