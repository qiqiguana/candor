/*
 * This file was automatically generated by EvoSuite
 */

package de.huxhorn.lilith.conditions;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.huxhorn.lilith.conditions.LoggerStartsWithCondition;
import de.huxhorn.lilith.data.eventsource.EventIdentifier;
import de.huxhorn.lilith.data.eventsource.EventWrapper;
import de.huxhorn.lilith.data.eventsource.SourceIdentifier;
import de.huxhorn.lilith.data.logging.LoggingEvent;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LoggerStartsWithConditionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition(">adnf=>adnf=");
      String string0 = loggerStartsWithCondition0.toString();
      assertNotNull(string0);
      assertEquals("logger.startsWith(\">adnf=>adnf=\")", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition();
      String string0 = loggerStartsWithCondition0.getSearchString();
      assertNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition(">adnf=>adnf=");
      LoggingEvent loggingEvent0 = new LoggingEvent();
      SourceIdentifier sourceIdentifier0 = new SourceIdentifier(">adnf=>adnf=");
      EventWrapper<LoggingEvent> eventWrapper0 = new EventWrapper<LoggingEvent>(sourceIdentifier0, 775L, loggingEvent0);
      boolean boolean0 = loggerStartsWithCondition0.isTrue((Object) eventWrapper0);
      assertEquals(false, boolean0);
      assertEquals("logger.startsWith(\">adnf=>adnf=\")", loggerStartsWithCondition0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition();
      boolean boolean0 = loggerStartsWithCondition0.isTrue((Object) loggerStartsWithCondition0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition();
      LoggerStartsWithCondition loggerStartsWithCondition1 = new LoggerStartsWithCondition("logger.startsWith");
      LoggerStartsWithCondition loggerStartsWithCondition2 = loggerStartsWithCondition1.clone();
      boolean boolean0 = loggerStartsWithCondition2.isTrue((Object) loggerStartsWithCondition0);
      assertEquals("logger.startsWith(\"logger.startsWith\")", loggerStartsWithCondition2.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition();
      SourceIdentifier sourceIdentifier0 = new SourceIdentifier("", "");
      EventWrapper<LoggerStartsWithCondition> eventWrapper0 = new EventWrapper<LoggerStartsWithCondition>(sourceIdentifier0, 7L, loggerStartsWithCondition0);
      EventIdentifier eventIdentifier0 = eventWrapper0.getEventIdentifier();
      EventWrapper<Integer> eventWrapper1 = new EventWrapper<Integer>();
      loggerStartsWithCondition0.setSearchString("");
      EventWrapper<EventWrapper<Integer>> eventWrapper2 = new EventWrapper<EventWrapper<Integer>>(eventIdentifier0, eventWrapper1);
      boolean boolean0 = loggerStartsWithCondition0.isTrue((Object) eventWrapper2);
      assertEquals(true, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition();
      LoggerStartsWithCondition loggerStartsWithCondition1 = new LoggerStartsWithCondition("l");
      SourceIdentifier sourceIdentifier0 = new SourceIdentifier("l", (String) null);
      EventWrapper<LoggerStartsWithCondition> eventWrapper0 = new EventWrapper<LoggerStartsWithCondition>(sourceIdentifier0, (-45L), loggerStartsWithCondition0);
      EventIdentifier eventIdentifier0 = eventWrapper0.getEventIdentifier();
      EventWrapper<Integer> eventWrapper1 = new EventWrapper<Integer>();
      EventWrapper<EventWrapper<Integer>> eventWrapper2 = new EventWrapper<EventWrapper<Integer>>(eventIdentifier0, eventWrapper1);
      boolean boolean0 = loggerStartsWithCondition1.isTrue((Object) eventWrapper2);
      assertEquals(false, boolean0);
      assertEquals("logger.startsWith(\"l\")", loggerStartsWithCondition1.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition(">adnf=>adnf=");
      LoggingEvent loggingEvent0 = new LoggingEvent();
      loggingEvent0.setLogger(">adnf=>adnf=");
      SourceIdentifier sourceIdentifier0 = new SourceIdentifier(">adnf=>adnf=");
      EventWrapper<LoggingEvent> eventWrapper0 = new EventWrapper<LoggingEvent>(sourceIdentifier0, 775L, loggingEvent0);
      boolean boolean0 = loggerStartsWithCondition0.isTrue((Object) eventWrapper0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition(">adnf=>adnf=");
      assertEquals("logger.startsWith(\">adnf=>adnf=\")", loggerStartsWithCondition0.toString());
      
      LoggingEvent loggingEvent0 = new LoggingEvent();
      loggingEvent0.setLogger(">adnf=>adnf=");
      SourceIdentifier sourceIdentifier0 = new SourceIdentifier(">adnf=>adnf=");
      EventWrapper<LoggingEvent> eventWrapper0 = new EventWrapper<LoggingEvent>(sourceIdentifier0, 775L, loggingEvent0);
      loggerStartsWithCondition0.setSearchString("logger.startsWith(\">adnf=>adnf=\")");
      boolean boolean0 = loggerStartsWithCondition0.isTrue((Object) eventWrapper0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition();
      LoggerStartsWithCondition loggerStartsWithCondition1 = new LoggerStartsWithCondition("];wj");
      boolean boolean0 = loggerStartsWithCondition0.equals((Object) loggerStartsWithCondition1);
      assertFalse(loggerStartsWithCondition1.equals(loggerStartsWithCondition0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition();
      boolean boolean0 = loggerStartsWithCondition0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition();
      boolean boolean0 = loggerStartsWithCondition0.equals((Object) "logger.startsWith");
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition();
      LoggerStartsWithCondition loggerStartsWithCondition1 = new LoggerStartsWithCondition("l");
      assertFalse(loggerStartsWithCondition1.equals(loggerStartsWithCondition0));
      
      loggerStartsWithCondition0.setSearchString("l");
      boolean boolean0 = loggerStartsWithCondition0.equals((Object) loggerStartsWithCondition1);
      assertTrue(loggerStartsWithCondition0.equals(loggerStartsWithCondition1));
      assertEquals(true, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition();
      LoggerStartsWithCondition loggerStartsWithCondition1 = new LoggerStartsWithCondition("logger.startsWith");
      boolean boolean0 = loggerStartsWithCondition1.equals((Object) loggerStartsWithCondition0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition((String) null);
      LoggerStartsWithCondition loggerStartsWithCondition1 = new LoggerStartsWithCondition();
      boolean boolean0 = loggerStartsWithCondition0.equals((Object) loggerStartsWithCondition1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition();
      int int0 = loggerStartsWithCondition0.hashCode();
      assertEquals(0, int0);
  }

  @Test
  public void test16()  throws Throwable  {
      LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition();
      loggerStartsWithCondition0.setSearchString("l");
      int int0 = loggerStartsWithCondition0.hashCode();
      assertEquals(108, int0);
  }

  @Test
  public void test17()  throws Throwable  {
      LoggerStartsWithCondition loggerStartsWithCondition0 = new LoggerStartsWithCondition();
      String string0 = loggerStartsWithCondition0.toString();
      assertNotNull(string0);
      assertEquals("logger.startsWith(null)", string0);
  }
}
