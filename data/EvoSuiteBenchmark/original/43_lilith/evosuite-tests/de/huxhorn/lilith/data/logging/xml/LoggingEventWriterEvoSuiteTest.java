/*
 * This file was automatically generated by EvoSuite
 */

package de.huxhorn.lilith.data.logging.xml;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.bea.xml.stream.XMLStreamRecorder;
import com.bea.xml.stream.XMLWriterBase;
import de.huxhorn.lilith.data.logging.LoggingEvent;
import de.huxhorn.lilith.data.logging.xml.LoggingEventWriter;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Writer;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LoggingEventWriterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LoggingEventWriter loggingEventWriter0 = new LoggingEventWriter();
      String string0 = loggingEventWriter0.getPreferredPrefix();
      assertNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      LoggingEventWriter loggingEventWriter0 = new LoggingEventWriter();
      loggingEventWriter0.setWritingSchemaLocation(true);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      BufferedWriter bufferedWriter0 = new BufferedWriter((Writer) pipedWriter0);
      XMLWriterBase xMLWriterBase0 = new XMLWriterBase((Writer) bufferedWriter0);
      LoggingEvent loggingEvent0 = new LoggingEvent();
      // Undeclared exception!
      try {
        loggingEventWriter0.write((XMLStreamWriter) xMLWriterBase0, loggingEvent0, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      LoggingEventWriter loggingEventWriter0 = new LoggingEventWriter();
      LoggingEventWriter.TimeStampType loggingEventWriter_TimeStampType0 = LoggingEventWriter.TimeStampType.ONLY_MILLIS;
      loggingEventWriter0.setTimeStampType(loggingEventWriter_TimeStampType0);
      assertNull(loggingEventWriter0.getPreferredPrefix());
  }

  @Test
  public void test3()  throws Throwable  {
      LoggingEventWriter loggingEventWriter0 = new LoggingEventWriter();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      BufferedWriter bufferedWriter0 = new BufferedWriter((Writer) pipedWriter0);
      XMLWriterBase xMLWriterBase0 = new XMLWriterBase((Writer) bufferedWriter0);
      LoggingEvent loggingEvent0 = new LoggingEvent();
      loggingEvent0.setLogger("className");
      loggingEventWriter0.write((XMLStreamWriter) xMLWriterBase0, loggingEvent0, true);
      loggingEventWriter0.write((XMLStreamWriter) xMLWriterBase0, loggingEvent0, true);
  }

  @Test
  public void test4()  throws Throwable  {
      LoggingEventWriter loggingEventWriter0 = new LoggingEventWriter();
      LoggingEventWriter.TimeStampType loggingEventWriter_TimeStampType0 = loggingEventWriter0.getTimeStampType();
      assertEquals(LoggingEventWriter.TimeStampType.BOTH, loggingEventWriter_TimeStampType0);
  }

  @Test
  public void test5()  throws Throwable  {
      LoggingEventWriter loggingEventWriter0 = new LoggingEventWriter();
      loggingEventWriter0.setPreferredPrefix("");
      assertEquals("", loggingEventWriter0.getPreferredPrefix());
  }

  @Test
  public void test6()  throws Throwable  {
      LoggingEventWriter loggingEventWriter0 = new LoggingEventWriter();
      boolean boolean0 = loggingEventWriter0.isWritingSchemaLocation();
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      LoggingEventWriter loggingEventWriter0 = new LoggingEventWriter();
      loggingEventWriter0.setSortingMdcValues(true);
      assertEquals(true, loggingEventWriter0.isSortingMdcValues());
  }

  @Test
  public void test8()  throws Throwable  {
      LoggingEventWriter loggingEventWriter0 = new LoggingEventWriter();
      boolean boolean0 = loggingEventWriter0.isSortingMdcValues();
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      LoggingEventWriter loggingEventWriter0 = new LoggingEventWriter();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      XMLStreamRecorder xMLStreamRecorder0 = new XMLStreamRecorder((Writer) pipedWriter0);
      // Undeclared exception!
      try {
        loggingEventWriter0.write((XMLStreamWriter) xMLStreamRecorder0, (LoggingEvent) null, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
