/*
 * This file was automatically generated by EvoSuite
 */

package de.huxhorn.lilith.data.logging.logback;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import ch.qos.logback.classic.Level;
import ch.qos.logback.classic.Logger;
import ch.qos.logback.classic.LoggerContext;
import ch.qos.logback.classic.spi.LoggerContextVO;
import de.huxhorn.lilith.data.logging.LoggingEvent;
import de.huxhorn.lilith.data.logging.logback.TransformingEncoder;
import de.huxhorn.sulky.codec.CompressingSerializableCodec;
import de.huxhorn.sulky.codec.Encoder;
import java.net.NetworkInterface;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TransformingEncoderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TransformingEncoder transformingEncoder0 = new TransformingEncoder(false);
      CompressingSerializableCodec<LoggingEvent> compressingSerializableCodec0 = new CompressingSerializableCodec<LoggingEvent>();
      transformingEncoder0.setLilithEncoder((Encoder<LoggingEvent>) compressingSerializableCodec0);
      assertEquals(false, transformingEncoder0.isInSameThread());
  }

  @Test
  public void test1()  throws Throwable  {
      TransformingEncoder transformingEncoder0 = new TransformingEncoder(false);
      boolean boolean0 = transformingEncoder0.isInSameThread();
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      TransformingEncoder transformingEncoder0 = new TransformingEncoder(false);
      transformingEncoder0.setApplicationIdentifier("");
      LoggerContext loggerContext0 = new LoggerContext();
      Logger logger0 = loggerContext0.getLogger("");
      Level level0 = Level.INFO;
      Object[] objectArray0 = new Object[2];
      ch.qos.logback.classic.spi.LoggingEvent loggingEvent0 = new ch.qos.logback.classic.spi.LoggingEvent("", logger0, level0, "", (Throwable) null, objectArray0);
      // Undeclared exception!
      try {
        transformingEncoder0.encode(loggingEvent0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      TransformingEncoder transformingEncoder0 = new TransformingEncoder(true);
      transformingEncoder0.getLilithEncoder();
      assertEquals(true, transformingEncoder0.isInSameThread());
  }

  @Test
  public void test4()  throws Throwable  {
      TransformingEncoder transformingEncoder0 = new TransformingEncoder(false);
      String string0 = transformingEncoder0.getApplicationIdentifier();
      assertEquals(false, transformingEncoder0.isInSameThread());
      assertNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      TransformingEncoder transformingEncoder0 = new TransformingEncoder(false);
      // Undeclared exception!
      try {
        transformingEncoder0.encode((ch.qos.logback.classic.spi.LoggingEvent) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      TransformingEncoder transformingEncoder0 = new TransformingEncoder(true);
      transformingEncoder0.setApplicationIdentifier("#");
      LoggerContext loggerContext0 = new LoggerContext();
      Class<?> class0 = NetworkInterface.class;
      Logger logger0 = loggerContext0.getLogger(class0);
      Level level0 = Level.INFO;
      Object[] objectArray0 = new Object[1];
      ch.qos.logback.classic.spi.LoggingEvent loggingEvent0 = new ch.qos.logback.classic.spi.LoggingEvent("#", logger0, level0, "#", (Throwable) null, objectArray0);
      loggingEvent0.setLoggerContextRemoteView((LoggerContextVO) null);
      // Undeclared exception!
      try {
        transformingEncoder0.encode(loggingEvent0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
