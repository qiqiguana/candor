/*
 * This file was automatically generated by EvoSuite
 */

package de.huxhorn.lilith.data.logging.xml;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.bea.xml.stream.XMLStreamRecorder;
import com.bea.xml.stream.XMLWriterBase;
import de.huxhorn.lilith.data.eventsource.SourceIdentifier;
import de.huxhorn.lilith.data.logging.LoggingEvents;
import de.huxhorn.lilith.data.logging.xml.LoggingEventsWriter;
import de.huxhorn.sulky.stax.IndentingXMLStreamWriter;
import java.io.CharArrayWriter;
import java.io.StringWriter;
import java.io.Writer;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LoggingEventsWriterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LoggingEventsWriter loggingEventsWriter0 = new LoggingEventsWriter();
      assertEquals("es", loggingEventsWriter0.getEventSourcePrefix());
      assertNotNull(loggingEventsWriter0);
      
      loggingEventsWriter0.setEventSourcePrefix("");
      assertEquals("", loggingEventsWriter0.getEventSourcePrefix());
  }

  @Test
  public void test1()  throws Throwable  {
      LoggingEventsWriter loggingEventsWriter0 = new LoggingEventsWriter();
      assertNotNull(loggingEventsWriter0);
      
      String string0 = loggingEventsWriter0.getEventSourcePrefix();
      assertEquals("es", string0);
      assertNotNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      LoggingEventsWriter loggingEventsWriter0 = new LoggingEventsWriter();
      assertNotNull(loggingEventsWriter0);
      
      loggingEventsWriter0.setPreferredPrefix("");
      assertEquals("es", loggingEventsWriter0.getEventSourcePrefix());
      assertEquals("", loggingEventsWriter0.getPreferredPrefix());
  }

  @Test
  public void test3()  throws Throwable  {
      LoggingEventsWriter loggingEventsWriter0 = new LoggingEventsWriter();
      assertNotNull(loggingEventsWriter0);
      
      loggingEventsWriter0.isWritingSchemaLocation();
      assertEquals("es", loggingEventsWriter0.getEventSourcePrefix());
  }

  @Test
  public void test4()  throws Throwable  {
      LoggingEventsWriter loggingEventsWriter0 = new LoggingEventsWriter();
      assertNotNull(loggingEventsWriter0);
      
      String string0 = loggingEventsWriter0.getPreferredPrefix();
      assertNull(string0);
      assertEquals("es", loggingEventsWriter0.getEventSourcePrefix());
  }

  @Test
  public void test5()  throws Throwable  {
      LoggingEventsWriter loggingEventsWriter0 = new LoggingEventsWriter();
      assertNotNull(loggingEventsWriter0);
      
      StringWriter stringWriter0 = new StringWriter();
      XMLStreamRecorder xMLStreamRecorder0 = new XMLStreamRecorder((Writer) stringWriter0);
      LoggingEvents loggingEvents0 = new LoggingEvents();
      SourceIdentifier sourceIdentifier0 = new SourceIdentifier("", (String) null);
      loggingEvents0.setSource(sourceIdentifier0);
      loggingEventsWriter0.write((XMLStreamWriter) xMLStreamRecorder0, loggingEvents0, true);
      loggingEventsWriter0.write((XMLStreamWriter) xMLStreamRecorder0, loggingEvents0, false);
      assertEquals("[[1.0],[utf-8]][['http://lilith.sf.net/schema/logging/13':LoggingEvents][[DEFAULT][xmlns]=[http://lilith.sf.net/schema/logging/13]]];\n<es:SourceIdentifier[[NAMESPACE][xmlns:es]=[http://lilith.sf.net/schema/eventsource/10]][[ATTRIBUTE][identifier]=[]]];\n[[LoggingEvents]][['http://lilith.sf.net/schema/logging/13':LoggingEvents]];\n<es:SourceIdentifier[[NAMESPACE][xmlns:es]=[http://lilith.sf.net/schema/eventsource/10]][[ATTRIBUTE][identifier]=[]]];\n[[LoggingEvents]]", stringWriter0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      LoggingEventsWriter loggingEventsWriter0 = new LoggingEventsWriter();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      XMLWriterBase xMLWriterBase0 = new XMLWriterBase((Writer) charArrayWriter0);
      IndentingXMLStreamWriter indentingXMLStreamWriter0 = null;
      try {
        indentingXMLStreamWriter0 = new IndentingXMLStreamWriter((XMLStreamWriter) xMLWriterBase0);
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * ch/qos/logback/classic/util/LoggerNameUtil
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      LoggingEventsWriter loggingEventsWriter0 = new LoggingEventsWriter();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
      XMLWriterBase xMLWriterBase0 = new XMLWriterBase((Writer) charArrayWriter0);
      IndentingXMLStreamWriter indentingXMLStreamWriter0 = null;
      try {
        indentingXMLStreamWriter0 = new IndentingXMLStreamWriter((XMLStreamWriter) xMLWriterBase0);
        fail("Expecting exception: NoClassDefFoundError");
      } catch(NoClassDefFoundError e) {
        /*
         * ch/qos/logback/classic/util/LoggerNameUtil
         */
      }
  }
}
