/*
 * This file was automatically generated by EvoSuite
 */

package de.huxhorn.lilith.logback.appender;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.huxhorn.lilith.logback.appender.ZeroDelimitedWriteByteStrategy;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ZeroDelimitedWriteByteStrategyEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ZeroDelimitedWriteByteStrategy zeroDelimitedWriteByteStrategy0 = new ZeroDelimitedWriteByteStrategy();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) byteArrayOutputStream0);
      zeroDelimitedWriteByteStrategy0.writeBytes(dataOutputStream0, (byte[]) null);
      assertEquals(0, dataOutputStream0.size());
  }

  @Test
  public void test1()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ZeroDelimitedWriteByteStrategy zeroDelimitedWriteByteStrategy0 = new ZeroDelimitedWriteByteStrategy();
      byte[] byteArray0 = new byte[1];
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) pipedOutputStream0);
      try {
        zeroDelimitedWriteByteStrategy0.writeBytes(dataOutputStream0, byteArray0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Pipe not connected
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      ZeroDelimitedWriteByteStrategy zeroDelimitedWriteByteStrategy0 = new ZeroDelimitedWriteByteStrategy();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = byteArrayOutputStream0.toByteArray();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) byteArrayOutputStream0);
      zeroDelimitedWriteByteStrategy0.writeBytes(dataOutputStream0, byteArray0);
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals(1, dataOutputStream0.size());
  }
}
