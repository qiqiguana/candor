/*
 * This file was automatically generated by EvoSuite
 */

package de.huxhorn.lilith.conditions;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.huxhorn.lilith.conditions.LoggerEqualsCondition;
import de.huxhorn.lilith.data.eventsource.EventIdentifier;
import de.huxhorn.lilith.data.eventsource.EventWrapper;
import de.huxhorn.lilith.data.eventsource.SourceIdentifier;
import de.huxhorn.lilith.data.logging.LoggingEvent;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LoggerEqualsConditionEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition("");
      SourceIdentifier sourceIdentifier0 = new SourceIdentifier("", "");
      LoggingEvent loggingEvent0 = new LoggingEvent();
      EventWrapper<LoggingEvent> eventWrapper0 = new EventWrapper<LoggingEvent>(sourceIdentifier0, (-1188L), loggingEvent0);
      boolean boolean0 = loggerEqualsCondition0.isTrue((Object) eventWrapper0);
      assertEquals("logger.equals(\"\")", loggerEqualsCondition0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition();
      String string0 = loggerEqualsCondition0.toString();
      assertNotNull(string0);
      assertEquals("logger.equals(null)", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition();
      String string0 = loggerEqualsCondition0.getSearchString();
      assertNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition();
      LoggerEqualsCondition loggerEqualsCondition1 = loggerEqualsCondition0.clone();
      boolean boolean0 = loggerEqualsCondition0.equals((Object) loggerEqualsCondition1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition();
      Object object0 = new Object();
      boolean boolean0 = loggerEqualsCondition0.isTrue(object0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition();
      loggerEqualsCondition0.setSearchString("logger.equals(null)");
      boolean boolean0 = loggerEqualsCondition0.isTrue((Object) "logger.equals(null)");
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition();
      loggerEqualsCondition0.setSearchString("logger.equals(null)");
      EventWrapper<String> eventWrapper0 = new EventWrapper<String>((EventIdentifier) null, "logger.equals(null)");
      boolean boolean0 = loggerEqualsCondition0.isTrue((Object) eventWrapper0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition("Kh-lt:");
      SourceIdentifier sourceIdentifier0 = new SourceIdentifier("Kh-lt:", "Kh-lt:");
      LoggingEvent loggingEvent0 = new LoggingEvent();
      loggingEvent0.setLogger("Kh-lt:");
      EventWrapper<LoggingEvent> eventWrapper0 = new EventWrapper<LoggingEvent>(sourceIdentifier0, (-1230L), loggingEvent0);
      boolean boolean0 = loggerEqualsCondition0.isTrue((Object) eventWrapper0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition("e<hl$!");
      assertEquals("logger.equals(\"e<hl$!\")", loggerEqualsCondition0.toString());
      
      loggerEqualsCondition0.setSearchString("Gc:");
      SourceIdentifier sourceIdentifier0 = new SourceIdentifier("e<hl$!", "e<hl$!");
      LoggingEvent loggingEvent0 = new LoggingEvent();
      loggingEvent0.setLogger("e<hl$!");
      EventWrapper<LoggingEvent> eventWrapper0 = new EventWrapper<LoggingEvent>(sourceIdentifier0, (-1233L), loggingEvent0);
      boolean boolean0 = loggerEqualsCondition0.isTrue((Object) eventWrapper0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition();
      Object object0 = new Object();
      boolean boolean0 = loggerEqualsCondition0.equals(object0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition();
      boolean boolean0 = loggerEqualsCondition0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition();
      loggerEqualsCondition0.setSearchString("lES");
      LoggerEqualsCondition loggerEqualsCondition1 = new LoggerEqualsCondition("F)7`tlxDLq/A:kh");
      boolean boolean0 = loggerEqualsCondition0.equals((Object) loggerEqualsCondition1);
      assertEquals("logger.equals(\"F)7`tlxDLq/A:kh\")", loggerEqualsCondition1.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition();
      loggerEqualsCondition0.setSearchString("lES");
      LoggerEqualsCondition loggerEqualsCondition1 = new LoggerEqualsCondition("lES");
      boolean boolean0 = loggerEqualsCondition0.equals((Object) loggerEqualsCondition1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition();
      LoggerEqualsCondition loggerEqualsCondition1 = new LoggerEqualsCondition(", name=");
      boolean boolean0 = loggerEqualsCondition0.equals((Object) loggerEqualsCondition1);
      assertFalse(loggerEqualsCondition1.equals(loggerEqualsCondition0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition();
      int int0 = loggerEqualsCondition0.hashCode();
      assertEquals(0, int0);
  }

  @Test
  public void test15()  throws Throwable  {
      LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition("");
      int int0 = loggerEqualsCondition0.hashCode();
      assertEquals(0, int0);
      assertEquals("logger.equals(\"\")", loggerEqualsCondition0.toString());
  }

  @Test
  public void test16()  throws Throwable  {
      LoggerEqualsCondition loggerEqualsCondition0 = new LoggerEqualsCondition();
      loggerEqualsCondition0.setSearchString("logger.equals(null)");
      String string0 = loggerEqualsCondition0.toString();
      assertEquals("logger.equals(\"logger.equals(null)\")", loggerEqualsCondition0.toString());
      assertNotNull(string0);
      assertEquals("logger.equals(\"logger.equals(null)\")", string0);
  }
}
