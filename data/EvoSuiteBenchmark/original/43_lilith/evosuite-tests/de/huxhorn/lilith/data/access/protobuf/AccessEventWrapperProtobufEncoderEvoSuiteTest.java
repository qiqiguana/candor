/*
 * This file was automatically generated by EvoSuite
 */

package de.huxhorn.lilith.data.access.protobuf;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.huxhorn.lilith.data.access.AccessEvent;
import de.huxhorn.lilith.data.access.protobuf.AccessEventWrapperProtobufEncoder;
import de.huxhorn.lilith.data.access.protobuf.generated.AccessProto;
import de.huxhorn.lilith.data.eventsource.EventIdentifier;
import de.huxhorn.lilith.data.eventsource.EventWrapper;
import de.huxhorn.lilith.data.eventsource.SourceIdentifier;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AccessEventWrapperProtobufEncoderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AccessEventWrapperProtobufEncoder accessEventWrapperProtobufEncoder0 = new AccessEventWrapperProtobufEncoder(true);
      accessEventWrapperProtobufEncoder0.setCompressing(true);
      assertEquals(true, accessEventWrapperProtobufEncoder0.isCompressing());
  }

  @Test
  public void test1()  throws Throwable  {
      AccessEventWrapperProtobufEncoder accessEventWrapperProtobufEncoder0 = new AccessEventWrapperProtobufEncoder(true);
      boolean boolean0 = accessEventWrapperProtobufEncoder0.isCompressing();
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      AccessEventWrapperProtobufEncoder accessEventWrapperProtobufEncoder0 = new AccessEventWrapperProtobufEncoder(false);
      EventWrapper<AccessEvent> eventWrapper0 = new EventWrapper<AccessEvent>();
      byte[] byteArray0 = accessEventWrapperProtobufEncoder0.encode(eventWrapper0);
      assertNotNull(byteArray0);
      assertEquals(false, accessEventWrapperProtobufEncoder0.isCompressing());
  }

  @Test
  public void test3()  throws Throwable  {
      AccessEventWrapperProtobufEncoder accessEventWrapperProtobufEncoder0 = new AccessEventWrapperProtobufEncoder(true);
      accessEventWrapperProtobufEncoder0.encode((EventWrapper<AccessEvent>) null);
      assertEquals(true, accessEventWrapperProtobufEncoder0.isCompressing());
  }

  @Test
  public void test4()  throws Throwable  {
      AccessEventWrapperProtobufEncoder accessEventWrapperProtobufEncoder0 = new AccessEventWrapperProtobufEncoder(true);
      SourceIdentifier sourceIdentifier0 = new SourceIdentifier();
      AccessEvent accessEvent0 = new AccessEvent();
      EventWrapper<AccessEvent> eventWrapper0 = new EventWrapper<AccessEvent>(sourceIdentifier0, 0L, accessEvent0);
      byte[] byteArray0 = accessEventWrapperProtobufEncoder0.encode(eventWrapper0);
      assertNotNull(byteArray0);
      assertEquals(true, accessEventWrapperProtobufEncoder0.isCompressing());
  }

  @Test
  public void test5()  throws Throwable  {
      AccessEvent accessEvent0 = new AccessEvent();
      EventWrapper<AccessEvent> eventWrapper0 = new EventWrapper<AccessEvent>((EventIdentifier) null, accessEvent0);
      AccessProto.EventWrapper accessProto_EventWrapper0 = AccessEventWrapperProtobufEncoder.convert(eventWrapper0);
      assertNotNull(accessProto_EventWrapper0);
      assertEquals(6, accessProto_EventWrapper0.getSerializedSize());
  }

  @Test
  public void test6()  throws Throwable  {
      AccessProto.EventIdentifier accessProto_EventIdentifier0 = AccessEventWrapperProtobufEncoder.convert((EventIdentifier) null);
      assertNull(accessProto_EventIdentifier0);
  }

  @Test
  public void test7()  throws Throwable  {
      AccessProto.SourceIdentifier accessProto_SourceIdentifier0 = AccessEventWrapperProtobufEncoder.convert((SourceIdentifier) null);
      assertNull(accessProto_SourceIdentifier0);
  }

  @Test
  public void test8()  throws Throwable  {
      SourceIdentifier sourceIdentifier0 = new SourceIdentifier("z~gaO*cev");
      AccessProto.SourceIdentifier accessProto_SourceIdentifier0 = AccessEventWrapperProtobufEncoder.convert(sourceIdentifier0);
      assertNotNull(accessProto_SourceIdentifier0);
      assertEquals(true, accessProto_SourceIdentifier0.hasIdentifier());
  }

  @Test
  public void test9()  throws Throwable  {
      SourceIdentifier sourceIdentifier0 = new SourceIdentifier("", "");
      EventIdentifier eventIdentifier0 = new EventIdentifier(sourceIdentifier0, (-680L));
      AccessEvent accessEvent0 = new AccessEvent();
      EventWrapper<AccessEvent> eventWrapper0 = new EventWrapper<AccessEvent>(eventIdentifier0, accessEvent0);
      AccessProto.EventWrapper accessProto_EventWrapper0 = AccessEventWrapperProtobufEncoder.convert(eventWrapper0);
      assertNotNull(accessProto_EventWrapper0);
      assertEquals("event_identifier {\n  local_id: -680\n  source_identifier {\n    identifier: \"\"\n    secondary_identifier: \"\"\n  }\n}\nevent {\n  status_code: 0\n  local_port: 0\n}\n", accessProto_EventWrapper0.toString());
  }
}
