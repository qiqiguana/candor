/*
 * This file was automatically generated by EvoSuite
 */

package de.huxhorn.lilith.engine.impl.sourcemanager;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.huxhorn.lilith.data.eventsource.EventWrapper;
import de.huxhorn.lilith.engine.EventConsumer;
import de.huxhorn.lilith.engine.impl.sourcemanager.EventPoller;
import de.huxhorn.sulky.buffers.BlockingCircularBuffer;
import de.huxhorn.sulky.buffers.CircularBuffer;
import de.huxhorn.sulky.buffers.OverwritingCircularBuffer;
import de.huxhorn.sulky.buffers.RemoveOperation;
import java.io.Serializable;
import java.util.List;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class EventPollerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      OverwritingCircularBuffer<EventWrapper<Integer>> overwritingCircularBuffer0 = new OverwritingCircularBuffer<EventWrapper<Integer>>(126);
      EventPoller<Integer> eventPoller0 = new EventPoller<Integer>((RemoveOperation<EventWrapper<Integer>>) overwritingCircularBuffer0);
      BlockingCircularBuffer<EventWrapper<Integer>> blockingCircularBuffer0 = new BlockingCircularBuffer<EventWrapper<Integer>>(126);
      eventPoller0.setQueue((CircularBuffer<EventWrapper<Integer>>) blockingCircularBuffer0);
  }

  @Test
  public void test1()  throws Throwable  {
      EventPoller<Serializable> eventPoller0 = new EventPoller<Serializable>((RemoveOperation<EventWrapper<Serializable>>) null);
      List<EventConsumer<Serializable>> list0 = eventPoller0.getConsumers();
      assertNull(list0);
  }

  @Test
  public void test2()  throws Throwable  {
      OverwritingCircularBuffer<EventWrapper<EventWrapper<DefaultTableModel>>> overwritingCircularBuffer0 = new OverwritingCircularBuffer<EventWrapper<EventWrapper<DefaultTableModel>>>(83);
      EventPoller<EventWrapper<DefaultTableModel>> eventPoller0 = new EventPoller<EventWrapper<DefaultTableModel>>((RemoveOperation<EventWrapper<EventWrapper<DefaultTableModel>>>) overwritingCircularBuffer0);
      Vector<EventConsumer<EventWrapper<DefaultTableModel>>> vector0 = new Vector<EventConsumer<EventWrapper<DefaultTableModel>>>();
      eventPoller0.setConsumers((List<EventConsumer<EventWrapper<DefaultTableModel>>>) vector0);
      assertEquals(0, vector0.size());
  }

  @Test
  public void test3()  throws Throwable  {
      EventPoller<Serializable> eventPoller0 = new EventPoller<Serializable>((RemoveOperation<EventWrapper<Serializable>>) null);
      RemoveOperation<EventWrapper<Serializable>> removeOperation0 = eventPoller0.getQueue();
      assertNull(removeOperation0);
  }
}
