/*
 * This file was automatically generated by EvoSuite
 */

package de.huxhorn.lilith.data.logging.protobuf;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.huxhorn.lilith.data.eventsource.EventIdentifier;
import de.huxhorn.lilith.data.eventsource.EventWrapper;
import de.huxhorn.lilith.data.eventsource.SourceIdentifier;
import de.huxhorn.lilith.data.logging.LoggingEvent;
import de.huxhorn.lilith.data.logging.protobuf.LoggingEventWrapperProtobufEncoder;
import de.huxhorn.lilith.data.logging.protobuf.generated.LoggingProto;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class LoggingEventWrapperProtobufEncoderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LoggingEventWrapperProtobufEncoder loggingEventWrapperProtobufEncoder0 = new LoggingEventWrapperProtobufEncoder(true);
      assertEquals(true, loggingEventWrapperProtobufEncoder0.isCompressing());
      
      loggingEventWrapperProtobufEncoder0.setCompressing(false);
      assertEquals(false, loggingEventWrapperProtobufEncoder0.isCompressing());
  }

  @Test
  public void test1()  throws Throwable  {
      LoggingEventWrapperProtobufEncoder loggingEventWrapperProtobufEncoder0 = new LoggingEventWrapperProtobufEncoder(false);
      boolean boolean0 = loggingEventWrapperProtobufEncoder0.isCompressing();
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      LoggingEventWrapperProtobufEncoder loggingEventWrapperProtobufEncoder0 = new LoggingEventWrapperProtobufEncoder(false);
      EventWrapper<LoggingEvent> eventWrapper0 = new EventWrapper<LoggingEvent>();
      byte[] byteArray0 = loggingEventWrapperProtobufEncoder0.encode(eventWrapper0);
      assertNotNull(byteArray0);
      assertEquals(false, loggingEventWrapperProtobufEncoder0.isCompressing());
  }

  @Test
  public void test3()  throws Throwable  {
      LoggingEventWrapperProtobufEncoder loggingEventWrapperProtobufEncoder0 = new LoggingEventWrapperProtobufEncoder(true);
      loggingEventWrapperProtobufEncoder0.encode((EventWrapper<LoggingEvent>) null);
      assertEquals(true, loggingEventWrapperProtobufEncoder0.isCompressing());
  }

  @Test
  public void test4()  throws Throwable  {
      LoggingEventWrapperProtobufEncoder loggingEventWrapperProtobufEncoder0 = new LoggingEventWrapperProtobufEncoder(true);
      SourceIdentifier sourceIdentifier0 = new SourceIdentifier("(nw\"P\"S>UW%?/j5");
      LoggingEvent loggingEvent0 = new LoggingEvent();
      EventWrapper<LoggingEvent> eventWrapper0 = new EventWrapper<LoggingEvent>(sourceIdentifier0, 1614L, loggingEvent0);
      byte[] byteArray0 = loggingEventWrapperProtobufEncoder0.encode(eventWrapper0);
      assertNotNull(byteArray0);
      assertEquals(true, loggingEventWrapperProtobufEncoder0.isCompressing());
  }

  @Test
  public void test5()  throws Throwable  {
      EventWrapper<LoggingEvent> eventWrapper0 = new EventWrapper<LoggingEvent>((EventIdentifier) null, (LoggingEvent) null);
      LoggingProto.EventWrapper loggingProto_EventWrapper0 = LoggingEventWrapperProtobufEncoder.convert(eventWrapper0);
      assertEquals(false, loggingProto_EventWrapper0.hasEvent());
  }

  @Test
  public void test6()  throws Throwable  {
      LoggingProto.EventIdentifier loggingProto_EventIdentifier0 = LoggingEventWrapperProtobufEncoder.convert((EventIdentifier) null);
      assertNull(loggingProto_EventIdentifier0);
  }

  @Test
  public void test7()  throws Throwable  {
      LoggingProto.SourceIdentifier loggingProto_SourceIdentifier0 = LoggingEventWrapperProtobufEncoder.convert((SourceIdentifier) null);
      assertNull(loggingProto_SourceIdentifier0);
  }

  @Test
  public void test8()  throws Throwable  {
      SourceIdentifier sourceIdentifier0 = new SourceIdentifier();
      LoggingProto.SourceIdentifier loggingProto_SourceIdentifier0 = LoggingEventWrapperProtobufEncoder.convert(sourceIdentifier0);
      assertEquals(0, loggingProto_SourceIdentifier0.getSerializedSize());
  }

  @Test
  public void test9()  throws Throwable  {
      SourceIdentifier sourceIdentifier0 = new SourceIdentifier("", "");
      LoggingProto.SourceIdentifier loggingProto_SourceIdentifier0 = LoggingEventWrapperProtobufEncoder.convert(sourceIdentifier0);
      assertEquals(4, loggingProto_SourceIdentifier0.getSerializedSize());
      assertNotNull(loggingProto_SourceIdentifier0);
  }
}
