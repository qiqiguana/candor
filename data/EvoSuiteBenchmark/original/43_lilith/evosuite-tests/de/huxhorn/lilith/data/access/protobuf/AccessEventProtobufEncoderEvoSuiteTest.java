/*
 * This file was automatically generated by EvoSuite
 */

package de.huxhorn.lilith.data.access.protobuf;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.huxhorn.lilith.data.access.AccessEvent;
import de.huxhorn.lilith.data.access.LoggerContext;
import de.huxhorn.lilith.data.access.protobuf.AccessEventProtobufEncoder;
import de.huxhorn.lilith.data.access.protobuf.generated.AccessProto;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AccessEventProtobufEncoderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AccessEventProtobufEncoder accessEventProtobufEncoder0 = new AccessEventProtobufEncoder(true);
      boolean boolean0 = accessEventProtobufEncoder0.isCompressing();
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      AccessEventProtobufEncoder accessEventProtobufEncoder0 = new AccessEventProtobufEncoder(true);
      accessEventProtobufEncoder0.setCompressing(true);
      assertEquals(true, accessEventProtobufEncoder0.isCompressing());
  }

  @Test
  public void test2()  throws Throwable  {
      AccessEventProtobufEncoder accessEventProtobufEncoder0 = new AccessEventProtobufEncoder(true);
      accessEventProtobufEncoder0.encode((AccessEvent) null);
      assertEquals(true, accessEventProtobufEncoder0.isCompressing());
  }

  @Test
  public void test3()  throws Throwable  {
      AccessEvent accessEvent0 = new AccessEvent();
      accessEvent0.setMethod("");
      AccessProto.AccessEvent accessProto_AccessEvent0 = AccessEventProtobufEncoder.convert(accessEvent0);
      assertNotNull(accessProto_AccessEvent0);
      assertEquals(true, accessProto_AccessEvent0.hasMethod());
  }

  @Test
  public void test4()  throws Throwable  {
      AccessEvent accessEvent0 = new AccessEvent();
      accessEvent0.setProtocol("]");
      AccessEventProtobufEncoder accessEventProtobufEncoder0 = new AccessEventProtobufEncoder(false);
      byte[] byteArray0 = accessEventProtobufEncoder0.encode(accessEvent0);
      assertEquals(false, accessEventProtobufEncoder0.isCompressing());
      assertNotNull(byteArray0);
  }

  @Test
  public void test5()  throws Throwable  {
      AccessEventProtobufEncoder accessEventProtobufEncoder0 = new AccessEventProtobufEncoder(true);
      AccessEvent accessEvent0 = new AccessEvent();
      accessEvent0.setRemoteAddress("K%v[ip.yu");
      byte[] byteArray0 = accessEventProtobufEncoder0.encode(accessEvent0);
      assertNotNull(byteArray0);
      assertEquals(true, accessEventProtobufEncoder0.isCompressing());
  }

  @Test
  public void test6()  throws Throwable  {
      AccessEvent accessEvent0 = new AccessEvent();
      accessEvent0.setRemoteHost("");
      AccessProto.AccessEvent accessProto_AccessEvent0 = AccessEventProtobufEncoder.convert(accessEvent0);
      assertNotNull(accessProto_AccessEvent0);
      assertEquals(6, accessProto_AccessEvent0.getSerializedSize());
  }

  @Test
  public void test7()  throws Throwable  {
      AccessEvent accessEvent0 = new AccessEvent();
      accessEvent0.setRemoteUser("");
      AccessProto.AccessEvent accessProto_AccessEvent0 = AccessEventProtobufEncoder.convert(accessEvent0);
      assertNotNull(accessProto_AccessEvent0);
      assertEquals("remote_user: \"\"\nstatus_code: 0\nlocal_port: 0\n", accessProto_AccessEvent0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      AccessEvent accessEvent0 = new AccessEvent();
      accessEvent0.setRequestURI("b");
      AccessProto.AccessEvent accessProto_AccessEvent0 = AccessEventProtobufEncoder.convert(accessEvent0);
      assertEquals(false, accessProto_AccessEvent0.hasMethod());
  }

  @Test
  public void test9()  throws Throwable  {
      AccessEvent accessEvent0 = new AccessEvent();
      accessEvent0.setRequestURL("");
      AccessProto.AccessEvent accessProto_AccessEvent0 = AccessEventProtobufEncoder.convert(accessEvent0);
      assertEquals(false, accessProto_AccessEvent0.hasProtocol());
  }

  @Test
  public void test10()  throws Throwable  {
      AccessEvent accessEvent0 = new AccessEvent();
      accessEvent0.setServerName("");
      AccessProto.AccessEvent accessProto_AccessEvent0 = AccessEventProtobufEncoder.convert(accessEvent0);
      assertEquals(true, accessProto_AccessEvent0.hasStatusCode());
  }

  @Test
  public void test11()  throws Throwable  {
      AccessEvent accessEvent0 = new AccessEvent();
      Long long0 = new Long(0L);
      accessEvent0.setTimeStamp(long0);
      AccessProto.AccessEvent accessProto_AccessEvent0 = AccessEventProtobufEncoder.convert(accessEvent0);
      assertEquals(false, accessProto_AccessEvent0.hasServerName());
  }

  @Test
  public void test12()  throws Throwable  {
      AccessEvent accessEvent0 = new AccessEvent();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      accessEvent0.setRequestHeaders((Map<String, String>) hashMap0);
      AccessProto.AccessEvent accessProto_AccessEvent0 = AccessEventProtobufEncoder.convert(accessEvent0);
      assertEquals(6, accessProto_AccessEvent0.getSerializedSize());
      assertNotNull(accessProto_AccessEvent0);
  }

  @Test
  public void test13()  throws Throwable  {
      AccessEvent accessEvent0 = new AccessEvent();
      LoggerContext loggerContext0 = new LoggerContext();
      accessEvent0.setLoggerContext(loggerContext0);
      AccessProto.AccessEvent accessProto_AccessEvent0 = AccessEventProtobufEncoder.convert(accessEvent0);
      assertEquals(true, accessProto_AccessEvent0.hasLoggerContext());
  }

  @Test
  public void test14()  throws Throwable  {
      AccessProto.LoggerContext accessProto_LoggerContext0 = AccessEventProtobufEncoder.convert((LoggerContext) null);
      assertNull(accessProto_LoggerContext0);
  }

  @Test
  public void test15()  throws Throwable  {
      LoggerContext loggerContext0 = new LoggerContext();
      loggerContext0.setName("Sw9TRING");
      AccessProto.LoggerContext accessProto_LoggerContext0 = AccessEventProtobufEncoder.convert(loggerContext0);
      assertNotNull(accessProto_LoggerContext0);
      assertEquals("Sw9TRING", accessProto_LoggerContext0.getName());
  }

  @Test
  public void test16()  throws Throwable  {
      LoggerContext loggerContext0 = new LoggerContext();
      Date date0 = new Date();
      loggerContext0.setBirthTime(date0);
      assertEquals(1372796694450L, date0.getTime());
      
      AccessProto.LoggerContext accessProto_LoggerContext0 = AccessEventProtobufEncoder.convert(loggerContext0);
      assertEquals(7, accessProto_LoggerContext0.getSerializedSize());
  }

  @Test
  public void test17()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LoggerContext loggerContext0 = new LoggerContext();
      loggerContext0.setProperties((Map<String, String>) hashMap0);
      AccessProto.LoggerContext accessProto_LoggerContext0 = AccessEventProtobufEncoder.convert(loggerContext0);
      assertNotNull(accessProto_LoggerContext0);
      assertEquals("", accessProto_LoggerContext0.toString());
  }

  @Test
  public void test18()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("#af5", "#af5");
      LoggerContext loggerContext0 = new LoggerContext();
      loggerContext0.setProperties((Map<String, String>) hashMap0);
      AccessProto.LoggerContext accessProto_LoggerContext0 = AccessEventProtobufEncoder.convert(loggerContext0);
      assertNotNull(accessProto_LoggerContext0);
      assertEquals(16, accessProto_LoggerContext0.getSerializedSize());
  }

  @Test
  public void test19()  throws Throwable  {
      AccessEvent accessEvent0 = new AccessEvent();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      accessEvent0.setResponseHeaders((Map<String, String>) hashMap0);
      hashMap0.put("b", (String) null);
      AccessProto.AccessEvent accessProto_AccessEvent0 = AccessEventProtobufEncoder.convert(accessEvent0);
      assertNotNull(accessProto_AccessEvent0);
      assertEquals("status_code: 0\nlocal_port: 0\nresponse_headers {\n  entry {\n    key: \"b\"\n  }\n}\n", accessProto_AccessEvent0.toString());
  }

  @Test
  public void test20()  throws Throwable  {
      AccessEventProtobufEncoder accessEventProtobufEncoder0 = new AccessEventProtobufEncoder(true);
      AccessEvent accessEvent0 = new AccessEvent();
      HashMap<String, String[]> hashMap0 = new HashMap<String, String[]>();
      accessEvent0.setRequestParameters((Map<String, String[]>) hashMap0);
      String[] stringArray0 = new String[1];
      hashMap0.put("K%v[ip.yu", stringArray0);
      assertEquals("{K%v[ip.yu=[Ljava.lang.String;@3cc2d73e}", hashMap0.toString());
      
      accessEventProtobufEncoder0.encode(accessEvent0);
      assertEquals(true, accessEventProtobufEncoder0.isCompressing());
  }

  @Test
  public void test21()  throws Throwable  {
      HashMap<String, String[]> hashMap0 = new HashMap<String, String[]>();
      hashMap0.put(">\"dVfi-p- <x", (String[]) null);
      AccessProto.StringArrayMap accessProto_StringArrayMap0 = AccessEventProtobufEncoder.convertStringArrayMap((Map<String, String[]>) hashMap0);
      assertEquals("entry {\n  key: \">\\\"dVfi-p- <x\"\n}\n", accessProto_StringArrayMap0.toString());
      assertNotNull(accessProto_StringArrayMap0);
  }

  @Test
  public void test22()  throws Throwable  {
      HashMap<String, String[]> hashMap0 = new HashMap<String, String[]>();
      String[] stringArray0 = new String[37];
      hashMap0.put("", stringArray0);
      stringArray0[4] = ">\"dVfi-p- <x";
      AccessEventProtobufEncoder.convertStringArrayMap((Map<String, String[]>) hashMap0);
      assertEquals("{=[Ljava.lang.String;@210c6b17}", hashMap0.toString());
  }
}
