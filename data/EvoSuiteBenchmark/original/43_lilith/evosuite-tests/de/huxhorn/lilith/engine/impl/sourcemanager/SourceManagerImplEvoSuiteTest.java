/*
 * This file was automatically generated by EvoSuite
 */

package de.huxhorn.lilith.engine.impl.sourcemanager;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.huxhorn.lilith.consumers.StdoutEventConsumer;
import de.huxhorn.lilith.data.eventsource.EventWrapper;
import de.huxhorn.lilith.data.eventsource.SourceIdentifier;
import de.huxhorn.lilith.engine.EventConsumer;
import de.huxhorn.lilith.engine.EventProducer;
import de.huxhorn.lilith.engine.EventSource;
import de.huxhorn.lilith.engine.EventSourceListener;
import de.huxhorn.lilith.engine.EventSourceProducer;
import de.huxhorn.lilith.engine.impl.EventSourceImpl;
import de.huxhorn.lilith.engine.impl.eventproducer.SerializingMessageBasedEventProducer;
import de.huxhorn.lilith.engine.impl.sourcemanager.SourceManagerImpl;
import de.huxhorn.sulky.buffers.AppendOperation;
import de.huxhorn.sulky.buffers.BlockingCircularBuffer;
import de.huxhorn.sulky.buffers.Buffer;
import de.huxhorn.sulky.conditions.And;
import de.huxhorn.sulky.conditions.Condition;
import java.beans.PropertyChangeListener;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.Serializable;
import java.util.List;
import java.util.Vector;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SourceManagerImplEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      BlockingCircularBuffer<EventWrapper<EventWrapper<Serializable>>> blockingCircularBuffer0 = new BlockingCircularBuffer<EventWrapper<EventWrapper<Serializable>>>(64);
      SourceManagerImpl<EventWrapper<Serializable>> sourceManagerImpl0 = new SourceManagerImpl<EventWrapper<Serializable>>(blockingCircularBuffer0);
      sourceManagerImpl0.getNumberOfSources();
  }

  @Test
  public void test1()  throws Throwable  {
      BlockingCircularBuffer<EventWrapper<EventWrapper<Serializable>>> blockingCircularBuffer0 = new BlockingCircularBuffer<EventWrapper<EventWrapper<Serializable>>>(745, 745);
      SourceManagerImpl<EventWrapper<Serializable>> sourceManagerImpl0 = new SourceManagerImpl<EventWrapper<Serializable>>(blockingCircularBuffer0);
      sourceManagerImpl0.addPropertyChangeListener((PropertyChangeListener) null);
      assertEquals(0, sourceManagerImpl0.getNumberOfSources());
  }

  @Test
  public void test2()  throws Throwable  {
      BlockingCircularBuffer<EventWrapper<String>> blockingCircularBuffer0 = new BlockingCircularBuffer<EventWrapper<String>>(23);
      SourceManagerImpl<String> sourceManagerImpl0 = new SourceManagerImpl<String>(blockingCircularBuffer0);
      sourceManagerImpl0.removePropertyChangeListener((PropertyChangeListener) null);
      assertEquals(0, sourceManagerImpl0.getNumberOfSources());
  }

  @Test
  public void test3()  throws Throwable  {
      BlockingCircularBuffer<EventWrapper<EventWrapper<Serializable>>> blockingCircularBuffer0 = new BlockingCircularBuffer<EventWrapper<EventWrapper<Serializable>>>(799);
      SourceManagerImpl<EventWrapper<Serializable>> sourceManagerImpl0 = new SourceManagerImpl<EventWrapper<Serializable>>(blockingCircularBuffer0);
      // Undeclared exception!
      try {
        sourceManagerImpl0.addEventSourceProducer((EventSourceProducer<EventWrapper<Serializable>>) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      SourceManagerImpl<String> sourceManagerImpl0 = new SourceManagerImpl<String>((BlockingCircularBuffer<EventWrapper<String>>) null);
      List<EventSource<String>> list0 = sourceManagerImpl0.getSources();
      assertEquals(0, list0.size());
  }

  @Test
  public void test5()  throws Throwable  {
      SourceManagerImpl<String> sourceManagerImpl0 = new SourceManagerImpl<String>((BlockingCircularBuffer<EventWrapper<String>>) null);
      SourceIdentifier sourceIdentifier0 = new SourceIdentifier("2re4VQz?", "2re4VQz?");
      EventSourceImpl<String> eventSourceImpl0 = new EventSourceImpl<String>(sourceIdentifier0, (Buffer<EventWrapper<String>>) null, true);
      sourceManagerImpl0.addSource((EventSource<String>) eventSourceImpl0);
      sourceManagerImpl0.addSource((EventSource<String>) eventSourceImpl0);
      assertEquals(1, sourceManagerImpl0.getNumberOfSources());
  }

  @Test
  public void test6()  throws Throwable  {
      BlockingCircularBuffer<EventWrapper<EventWrapper<Serializable>>> blockingCircularBuffer0 = new BlockingCircularBuffer<EventWrapper<EventWrapper<Serializable>>>(1961, 1961);
      SourceManagerImpl<EventWrapper<Serializable>> sourceManagerImpl0 = new SourceManagerImpl<EventWrapper<Serializable>>(blockingCircularBuffer0);
      SourceIdentifier sourceIdentifier0 = new SourceIdentifier(":j$=M[t=_0&)I");
      EventSourceImpl<EventWrapper<Serializable>> eventSourceImpl0 = new EventSourceImpl<EventWrapper<Serializable>>(sourceIdentifier0, (Buffer<EventWrapper<EventWrapper<Serializable>>>) blockingCircularBuffer0, false);
      sourceManagerImpl0.addSource((EventSource<EventWrapper<Serializable>>) eventSourceImpl0);
      assertEquals(1, sourceManagerImpl0.getNumberOfSources());
      
      sourceManagerImpl0.removeSource(sourceIdentifier0);
      assertEquals(0, sourceManagerImpl0.getNumberOfSources());
  }

  @Test
  public void test7()  throws Throwable  {
      BlockingCircularBuffer<EventWrapper<EventWrapper<Serializable>>> blockingCircularBuffer0 = new BlockingCircularBuffer<EventWrapper<EventWrapper<Serializable>>>(23);
      SourceManagerImpl<EventWrapper<Serializable>> sourceManagerImpl0 = new SourceManagerImpl<EventWrapper<Serializable>>(blockingCircularBuffer0);
      SourceIdentifier sourceIdentifier0 = new SourceIdentifier("!K9a8qt5", "!K9a8qt5");
      And and0 = new And((List<Condition>) null);
      EventSourceImpl<EventWrapper<Serializable>> eventSourceImpl0 = new EventSourceImpl<EventWrapper<Serializable>>(sourceIdentifier0, (Buffer<EventWrapper<EventWrapper<Serializable>>>) blockingCircularBuffer0, (Condition) and0, false);
      sourceManagerImpl0.addSource((EventSource<EventWrapper<Serializable>>) eventSourceImpl0);
      SourceIdentifier sourceIdentifier1 = new SourceIdentifier("v>Z$q:5%=+>+p8zk}Vv", "v>Z$q:5%=+>+p8zk}Vv");
      sourceManagerImpl0.removeSource(sourceIdentifier1);
      assertEquals(1, sourceManagerImpl0.getNumberOfSources());
  }

  @Test
  public void test8()  throws Throwable  {
      BlockingCircularBuffer<EventWrapper<EventWrapper<Serializable>>> blockingCircularBuffer0 = new BlockingCircularBuffer<EventWrapper<EventWrapper<Serializable>>>(745, 745);
      SourceManagerImpl<EventWrapper<Serializable>> sourceManagerImpl0 = new SourceManagerImpl<EventWrapper<Serializable>>(blockingCircularBuffer0);
      SourceIdentifier sourceIdentifier0 = new SourceIdentifier("1F", "1F");
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SerializingMessageBasedEventProducer<String> serializingMessageBasedEventProducer0 = new SerializingMessageBasedEventProducer<String>(sourceIdentifier0, (AppendOperation<EventWrapper<String>>) null, (InputStream) byteArrayInputStream0, false);
      sourceManagerImpl0.addEventProducer((EventProducer) serializingMessageBasedEventProducer0);
      sourceManagerImpl0.addEventProducer((EventProducer) serializingMessageBasedEventProducer0);
      assertEquals(0, sourceManagerImpl0.getNumberOfSources());
  }

  @Test
  public void test9()  throws Throwable  {
      SourceIdentifier sourceIdentifier0 = new SourceIdentifier("2re4VQz?", "2re4VQz?");
      BlockingCircularBuffer<EventWrapper<Integer>> blockingCircularBuffer0 = new BlockingCircularBuffer<EventWrapper<Integer>>(64, 64);
      SourceManagerImpl<Integer> sourceManagerImpl0 = new SourceManagerImpl<Integer>(blockingCircularBuffer0);
      sourceManagerImpl0.removeEventProducer(sourceIdentifier0);
      assertEquals(0, sourceManagerImpl0.getNumberOfSources());
  }

  @Test
  public void test10()  throws Throwable  {
      BlockingCircularBuffer<EventWrapper<EventWrapper<Serializable>>> blockingCircularBuffer0 = new BlockingCircularBuffer<EventWrapper<EventWrapper<Serializable>>>(745, 745);
      SourceManagerImpl<EventWrapper<Serializable>> sourceManagerImpl0 = new SourceManagerImpl<EventWrapper<Serializable>>(blockingCircularBuffer0);
      SourceIdentifier sourceIdentifier0 = new SourceIdentifier("1F", "1F");
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SerializingMessageBasedEventProducer<String> serializingMessageBasedEventProducer0 = new SerializingMessageBasedEventProducer<String>(sourceIdentifier0, (AppendOperation<EventWrapper<String>>) null, (InputStream) byteArrayInputStream0, false);
      sourceManagerImpl0.addEventProducer((EventProducer) serializingMessageBasedEventProducer0);
      sourceManagerImpl0.removeEventProducer(sourceIdentifier0);
      assertEquals("1F-1F", sourceIdentifier0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      BlockingCircularBuffer<EventWrapper<EventWrapper<Serializable>>> blockingCircularBuffer0 = new BlockingCircularBuffer<EventWrapper<EventWrapper<Serializable>>>(23);
      SourceManagerImpl<EventWrapper<Serializable>> sourceManagerImpl0 = new SourceManagerImpl<EventWrapper<Serializable>>(blockingCircularBuffer0);
      sourceManagerImpl0.addEventSourceListener((EventSourceListener<EventWrapper<Serializable>>) null);
      assertEquals(0, sourceManagerImpl0.getNumberOfSources());
  }

  @Test
  public void test12()  throws Throwable  {
      SourceManagerImpl<String> sourceManagerImpl0 = new SourceManagerImpl<String>((BlockingCircularBuffer<EventWrapper<String>>) null);
      sourceManagerImpl0.removeEventSourceListener((EventSourceListener<String>) null);
      assertEquals(0, sourceManagerImpl0.getNumberOfSources());
  }

  @Test
  public void test13()  throws Throwable  {
      BlockingCircularBuffer<EventWrapper<EventWrapper<Serializable>>> blockingCircularBuffer0 = new BlockingCircularBuffer<EventWrapper<EventWrapper<Serializable>>>(64);
      SourceManagerImpl<EventWrapper<Serializable>> sourceManagerImpl0 = new SourceManagerImpl<EventWrapper<Serializable>>(blockingCircularBuffer0);
      Vector<EventConsumer<EventWrapper<Serializable>>> vector0 = new Vector<EventConsumer<EventWrapper<Serializable>>>();
      sourceManagerImpl0.setEventConsumers((List<EventConsumer<EventWrapper<Serializable>>>) vector0);
      vector0.add((EventConsumer<EventWrapper<Serializable>>) null);
      sourceManagerImpl0.start();
      assertEquals(0, sourceManagerImpl0.getNumberOfSources());
  }

  @Test
  public void test14()  throws Throwable  {
      BlockingCircularBuffer<EventWrapper<EventWrapper<Serializable>>> blockingCircularBuffer0 = new BlockingCircularBuffer<EventWrapper<EventWrapper<Serializable>>>(64);
      SourceManagerImpl<EventWrapper<Serializable>> sourceManagerImpl0 = new SourceManagerImpl<EventWrapper<Serializable>>(blockingCircularBuffer0);
      Vector<EventConsumer<EventWrapper<Serializable>>> vector0 = new Vector<EventConsumer<EventWrapper<Serializable>>>();
      sourceManagerImpl0.setEventConsumers((List<EventConsumer<EventWrapper<Serializable>>>) vector0);
      StdoutEventConsumer<EventWrapper<Serializable>> stdoutEventConsumer0 = new StdoutEventConsumer<EventWrapper<Serializable>>();
      vector0.add((EventConsumer<EventWrapper<Serializable>>) stdoutEventConsumer0);
      sourceManagerImpl0.start();
      assertEquals(0, sourceManagerImpl0.getNumberOfSources());
  }
}
