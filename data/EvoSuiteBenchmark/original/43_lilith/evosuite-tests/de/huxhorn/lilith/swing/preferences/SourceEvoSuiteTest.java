/*
 * This file was automatically generated by EvoSuite
 */

package de.huxhorn.lilith.swing.preferences;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.huxhorn.lilith.swing.preferences.Source;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class SourceEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Source source0 = new Source();
      source0.setIdentifier("B");
      int int0 = source0.hashCode();
      assertEquals(66, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      Source source0 = new Source();
      String string0 = source0.getIdentifier();
      assertNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      Source source0 = new Source();
      String string0 = source0.getName();
      assertNull(string0);
  }

  @Test
  public void test3()  throws Throwable  {
      Source source0 = new Source();
      Source source1 = new Source();
      assertTrue(source1.equals(source0));
      
      source0.setIdentifier("J.^]L^?<HWT{HU");
      boolean boolean0 = source1.equals((Object) source0);
      assertFalse(source0.equals(source1));
      assertFalse(source1.equals(source0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      Source source0 = new Source();
      boolean boolean0 = source0.equals((Object) null);
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      Source source0 = new Source();
      boolean boolean0 = source0.equals((Object) "");
      assertEquals(false, boolean0);
  }

  @Test
  public void test6()  throws Throwable  {
      Source source0 = new Source();
      Source source1 = new Source();
      assertTrue(source1.equals(source0));
      
      source1.setIdentifier("B");
      boolean boolean0 = source1.equals((Object) source0);
      assertFalse(source1.equals(source0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      Source source0 = new Source();
      Source source1 = new Source();
      boolean boolean0 = source0.equals((Object) source1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      Source source0 = new Source();
      Source source1 = new Source();
      assertTrue(source1.equals(source0));
      
      source0.setIdentifier("B");
      source1.setName("B");
      source1.setIdentifier("B");
      boolean boolean0 = source1.equals((Object) source0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      Source source0 = new Source();
      Source source1 = new Source();
      source0.setIdentifier("B");
      source1.setName("B");
      source1.setIdentifier("B");
      assertFalse(source1.equals(source0));
      
      source0.setName("B");
      boolean boolean0 = source1.equals((Object) source0);
      assertTrue(source1.equals(source0));
      assertEquals(true, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      Source source0 = new Source();
      Source source1 = new Source();
      assertTrue(source1.equals(source0));
      
      source1.setName("B##+8EDi'");
      boolean boolean0 = source0.equals((Object) source1);
      assertFalse(source1.equals(source0));
      assertEquals(false, boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      Source source0 = new Source();
      int int0 = source0.hashCode();
      assertEquals(0, int0);
  }

  @Test
  public void test12()  throws Throwable  {
      Source source0 = new Source();
      source0.setName("");
      int int0 = source0.hashCode();
      assertEquals(0, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      Source source0 = new Source();
      Source source1 = new Source();
      source1.setName("B##+8EDi'");
      int int0 = source0.compareTo((Object) source1);
      assertEquals((-1), int0);
  }

  @Test
  public void test14()  throws Throwable  {
      Source source0 = new Source();
      int int0 = source0.compareTo((Object) source0);
      assertEquals(0, int0);
  }

  @Test
  public void test15()  throws Throwable  {
      Source source0 = new Source();
      source0.setName("");
      Source source1 = new Source();
      int int0 = source0.compareTo((Object) source1);
      assertEquals(1, int0);
  }

  @Test
  public void test16()  throws Throwable  {
      Source source0 = new Source();
      source0.setName("");
      Source source1 = new Source();
      source1.setName("FL>P<g}Gx=7u");
      int int0 = source0.compareTo((Object) source1);
      assertEquals((-12), int0);
  }
}
