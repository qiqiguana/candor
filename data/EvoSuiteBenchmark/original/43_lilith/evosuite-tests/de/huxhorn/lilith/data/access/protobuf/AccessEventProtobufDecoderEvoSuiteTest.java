/*
 * This file was automatically generated by EvoSuite
 */

package de.huxhorn.lilith.data.access.protobuf;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.ExtensionRegistry;
import com.google.protobuf.InvalidProtocolBufferException;
import de.huxhorn.lilith.data.access.AccessEvent;
import de.huxhorn.lilith.data.access.LoggerContext;
import de.huxhorn.lilith.data.access.protobuf.AccessEventProtobufDecoder;
import de.huxhorn.lilith.data.access.protobuf.generated.AccessProto;
import java.io.IOException;
import java.util.Map;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AccessEventProtobufDecoderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AccessEventProtobufDecoder accessEventProtobufDecoder0 = new AccessEventProtobufDecoder(true);
      accessEventProtobufDecoder0.setCompressing(true);
      assertEquals(true, accessEventProtobufDecoder0.isCompressing());
  }

  @Test
  public void test1()  throws Throwable  {
      AccessEventProtobufDecoder accessEventProtobufDecoder0 = new AccessEventProtobufDecoder(false);
      boolean boolean0 = accessEventProtobufDecoder0.isCompressing();
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      AccessEventProtobufDecoder accessEventProtobufDecoder0 = new AccessEventProtobufDecoder(true);
      byte[] byteArray0 = new byte[2];
      accessEventProtobufDecoder0.decode(byteArray0);
      assertEquals(true, accessEventProtobufDecoder0.isCompressing());
  }

  @Test
  public void test3()  throws Throwable  {
      AccessEventProtobufDecoder accessEventProtobufDecoder0 = new AccessEventProtobufDecoder(false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)122;
      AccessEvent accessEvent0 = accessEventProtobufDecoder0.decode(byteArray0);
      assertNotNull(accessEvent0);
      assertEquals("AccessEvent[loggerContext=LoggerContext[name=null, birthTime=null, properties=null], timeStamp=null]", accessEvent0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      AccessProto.AccessEvent accessProto_AccessEvent0 = AccessProto.AccessEvent.parseFrom(byteArray0);
      AccessEvent accessEvent0 = AccessEventProtobufDecoder.convert(accessProto_AccessEvent0);
      assertNull(accessEvent0.getRequestURL());
  }

  @Test
  public void test5()  throws Throwable  {
      LoggerContext loggerContext0 = AccessEventProtobufDecoder.convert((AccessProto.LoggerContext) null);
      assertNull(loggerContext0);
  }

  @Test
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.newInstance();
      CodedInputStream codedInputStream0 = CodedInputStream.newInstance(byteArray0);
      AccessProto.LoggerContext accessProto_LoggerContext0 = AccessProto.LoggerContext.parseFrom(codedInputStream0, extensionRegistry0);
      LoggerContext loggerContext0 = AccessEventProtobufDecoder.convert(accessProto_LoggerContext0);
      assertEquals("LoggerContext[name=null, birthTime=null, properties=null]", loggerContext0.toString());
      assertNotNull(loggerContext0);
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      CodedInputStream codedInputStream0 = CodedInputStream.newInstance(byteArray0, (int) (byte)18, 0);
      AccessProto.StringMap accessProto_StringMap0 = AccessProto.StringMap.parseFrom(codedInputStream0);
      Map<String, String> map0 = AccessEventProtobufDecoder.convertStringMap(accessProto_StringMap0);
      assertEquals(true, map0.isEmpty());
  }

  @Test
  public void test8()  throws Throwable  {
      Map<String, String> map0 = AccessEventProtobufDecoder.convertStringMap((AccessProto.StringMap) null);
      assertNull(map0);
  }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.newInstance();
      AccessProto.StringArrayMap accessProto_StringArrayMap0 = AccessProto.StringArrayMap.parseFrom(byteArray0, extensionRegistry0);
      Map<String, String[]> map0 = AccessEventProtobufDecoder.convertStringArrayMap(accessProto_StringArrayMap0);
      assertEquals(true, map0.isEmpty());
  }

  @Test
  public void test10()  throws Throwable  {
      Map<String, String[]> map0 = AccessEventProtobufDecoder.convertStringArrayMap((AccessProto.StringArrayMap) null);
      assertNull(map0);
  }
}
