/*
 * This file was automatically generated by EvoSuite
 */

package de.huxhorn.lilith.swing.preferences.table;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.huxhorn.lilith.swing.preferences.SavedCondition;
import de.huxhorn.lilith.swing.preferences.table.ConditionActiveRenderer;
import de.huxhorn.sulky.conditions.And;
import de.huxhorn.sulky.conditions.Condition;
import java.util.Vector;
import javax.swing.JCheckBox;
import javax.swing.JTable;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ConditionActiveRendererEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ConditionActiveRenderer conditionActiveRenderer0 = new ConditionActiveRenderer();
      assertNotNull(conditionActiveRenderer0);
      
      Vector<SavedCondition> vector0 = new Vector<SavedCondition>();
      JTable jTable0 = new JTable(vector0, vector0);
      JCheckBox jCheckBox0 = (JCheckBox)conditionActiveRenderer0.getTableCellRendererComponent(jTable0, (Object) "icon", false, false, (-135), 1903);
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertNotNull(jCheckBox0);
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isSelected());
      assertEquals(0, jCheckBox0.getHorizontalAlignment());
  }

  @Test
  public void test1()  throws Throwable  {
      ConditionActiveRenderer conditionActiveRenderer0 = new ConditionActiveRenderer();
      assertNotNull(conditionActiveRenderer0);
      
      Vector<SavedCondition> vector0 = new Vector<SavedCondition>();
      JTable jTable0 = new JTable(vector0, vector0);
      And and0 = new And();
      SavedCondition savedCondition0 = new SavedCondition((Condition) and0);
      JCheckBox jCheckBox0 = (JCheckBox)conditionActiveRenderer0.getTableCellRendererComponent(jTable0, (Object) savedCondition0, true, false, (-135), (-3));
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertNotNull(jCheckBox0);
      assertEquals(0, jCheckBox0.getHorizontalAlignment());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.isSelected());
  }
}
