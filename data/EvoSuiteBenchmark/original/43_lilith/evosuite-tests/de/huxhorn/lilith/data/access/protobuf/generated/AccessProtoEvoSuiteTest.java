/*
 * This file was automatically generated by EvoSuite
 */

package de.huxhorn.lilith.data.access.protobuf.generated;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.Descriptors;
import com.google.protobuf.ExtensionRegistry;
import com.google.protobuf.InvalidProtocolBufferException;
import de.huxhorn.lilith.data.access.protobuf.generated.AccessProto;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AccessProtoEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      AccessProto.AccessEvent accessProto_AccessEvent0 = AccessProto.AccessEvent.parseFrom(byteString0);
      assertNotNull(accessProto_AccessEvent0);
      
      byte[] byteArray0 = accessProto_AccessEvent0.toByteArray();
      assertNotNull(byteArray0);
      
      CodedInputStream codedInputStream0 = CodedInputStream.newInstance(byteArray0);
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.getEmptyRegistry();
      AccessProto.LoggerContext accessProto_LoggerContext0 = AccessProto.LoggerContext.parseFrom(codedInputStream0, extensionRegistry0);
      assertNotNull(accessProto_LoggerContext0);
      
      AccessProto.LoggerContext accessProto_LoggerContext1 = (AccessProto.LoggerContext)accessProto_LoggerContext0.getDefaultInstanceForType();
      assertEquals(0L, accessProto_LoggerContext0.getBirthTime());
      assertEquals(0, accessProto_AccessEvent0.getStatusCode());
      assertTrue(accessProto_LoggerContext1.equals(accessProto_LoggerContext0));
      assertEquals(0, accessProto_AccessEvent0.getLocalPort());
  }

  @Test
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      CodedInputStream codedInputStream0 = CodedInputStream.newInstance(byteArray0, (-1416), (int) (byte)0);
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.newInstance();
      AccessProto.LoggerContext accessProto_LoggerContext0 = AccessProto.LoggerContext.parseFrom(codedInputStream0, extensionRegistry0);
      assertNotNull(accessProto_LoggerContext0);
      
      String string0 = accessProto_LoggerContext0.toString();
      assertNotNull(string0);
      assertEquals(0L, accessProto_LoggerContext0.getBirthTime());
      assertEquals(0, accessProto_LoggerContext0.getSerializedSize());
  }

  @Test
  public void test2()  throws Throwable  {
      AccessProto.LoggerContext accessProto_LoggerContext0 = AccessProto.LoggerContext.getDefaultInstance();
      ByteString byteString0 = accessProto_LoggerContext0.toByteString();
      assertNotNull(byteString0);
      
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.newInstance();
      AccessProto.StringArrayMap accessProto_StringArrayMap0 = AccessProto.StringArrayMap.parseFrom(byteString0, extensionRegistry0);
      assertNotNull(accessProto_StringArrayMap0);
      
      AccessProto.StringArrayMap.Builder accessProto_StringArrayMap_Builder0 = (AccessProto.StringArrayMap.Builder)accessProto_StringArrayMap0.toBuilder();
      assertNotNull(accessProto_StringArrayMap_Builder0);
      assertEquals(0, accessProto_StringArrayMap0.getSerializedSize());
  }

  @Test
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      CodedInputStream codedInputStream0 = CodedInputStream.newInstance(byteArray0, (-1416), (int) (byte)0);
      AccessProto.StringMap accessProto_StringMap0 = AccessProto.StringMap.parseFrom(codedInputStream0);
      assertEquals(0, accessProto_StringMap0.getSerializedSize());
      assertNotNull(accessProto_StringMap0);
  }

  @Test
  public void test4()  throws Throwable  {
      AccessProto.StringArrayMapEntry accessProto_StringArrayMapEntry0 = AccessProto.StringArrayMapEntry.getDefaultInstance();
      ByteString byteString0 = accessProto_StringArrayMapEntry0.toByteString();
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.newInstance();
      try {
        AccessProto.StringMapEntry.parseFrom(byteString0, extensionRegistry0);
        fail("Expecting exception: InvalidProtocolBufferException");
      } catch(InvalidProtocolBufferException e) {
        /*
         * Message missing required fields: key
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      CodedInputStream codedInputStream0 = CodedInputStream.newInstance((InputStream) null);
      AccessProto.EventWrapper accessProto_EventWrapper0 = AccessProto.EventWrapper.parseFrom(codedInputStream0);
      assertNotNull(accessProto_EventWrapper0);
      
      AccessProto.EventIdentifier accessProto_EventIdentifier0 = accessProto_EventWrapper0.getEventIdentifier();
      assertNotNull(accessProto_EventIdentifier0);
      assertEquals(0, accessProto_EventWrapper0.getSerializedSize());
  }

  @Test
  public void test6()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try {
        AccessProto.StringMap.parseFrom((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Pipe not connected
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) (byte) (-77), (int) (byte)0);
      AccessProto.AccessEvent accessProto_AccessEvent0 = AccessProto.AccessEvent.parseFrom((InputStream) byteArrayInputStream0);
      assertNotNull(accessProto_AccessEvent0);
      
      AccessProto.AccessEvent.Builder accessProto_AccessEvent_Builder0 = (AccessProto.AccessEvent.Builder)accessProto_AccessEvent0.toBuilder();
      assertEquals(0, accessProto_AccessEvent0.getLocalPort());
      assertEquals(false, accessProto_AccessEvent_Builder0.hasProtocol());
      assertEquals(false, accessProto_AccessEvent_Builder0.hasRequestUri());
      assertEquals(0, accessProto_AccessEvent0.getStatusCode());
      assertEquals(false, accessProto_AccessEvent_Builder0.hasTimeStamp());
      assertEquals(0L, accessProto_AccessEvent0.getTimeStamp());
      assertEquals(0, accessProto_AccessEvent0.getSerializedSize());
      assertEquals(false, accessProto_AccessEvent_Builder0.hasMethod());
      assertEquals(false, accessProto_AccessEvent_Builder0.hasRemoteUser());
      assertEquals(false, accessProto_AccessEvent_Builder0.hasRemoteHost());
      assertNotNull(accessProto_AccessEvent_Builder0);
      assertEquals(false, accessProto_AccessEvent_Builder0.hasRemoteAddress());
  }

  @Test
  public void test8()  throws Throwable  {
      AccessProto.LoggerContext accessProto_LoggerContext0 = AccessProto.LoggerContext.getDefaultInstance();
      ByteString byteString0 = accessProto_LoggerContext0.toByteString();
      assertNotNull(byteString0);
      
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.newInstance();
      AccessProto.AccessEvent accessProto_AccessEvent0 = AccessProto.AccessEvent.parseFrom(byteString0, extensionRegistry0);
      assertNotNull(accessProto_AccessEvent0);
      
      AccessProto.StringMap accessProto_StringMap0 = accessProto_AccessEvent0.getRequestHeaders();
      ByteString byteString1 = accessProto_StringMap0.toByteString();
      assertEquals(0, accessProto_AccessEvent0.getLocalPort());
      assertEquals(0L, accessProto_AccessEvent0.getTimeStamp());
      assertEquals(0, accessProto_AccessEvent0.getSerializedSize());
      assertEquals(0, accessProto_AccessEvent0.getStatusCode());
      assertNotNull(byteString1);
  }

  @Test
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      CodedInputStream codedInputStream0 = CodedInputStream.newInstance(byteArray0);
      ByteString byteString0 = codedInputStream0.readBytes();
      try {
        AccessProto.StringArrayMapEntry.parseFrom(byteString0);
        fail("Expecting exception: InvalidProtocolBufferException");
      } catch(InvalidProtocolBufferException e) {
        /*
         * Message missing required fields: key
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      AccessProto.SourceIdentifier accessProto_SourceIdentifier0 = AccessProto.SourceIdentifier.parseFrom((InputStream) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) pipedOutputStream0);
      accessProto_SourceIdentifier0.writeDelimitedTo((OutputStream) bufferedOutputStream0);
  }

  @Test
  public void test11()  throws Throwable  {
      AccessProto.LoggerContext accessProto_LoggerContext0 = AccessProto.LoggerContext.getDefaultInstance();
      ByteString byteString0 = accessProto_LoggerContext0.toByteString();
      assertNotNull(byteString0);
      
      CodedInputStream codedInputStream0 = byteString0.newCodedInput();
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.newInstance();
      AccessProto.StringArrayValue accessProto_StringArrayValue0 = AccessProto.StringArrayValue.parseFrom(codedInputStream0, extensionRegistry0);
      assertNotNull(accessProto_StringArrayValue0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      accessProto_StringArrayValue0.writeDelimitedTo((OutputStream) byteArrayOutputStream0);
      assertEquals("\u0000", byteArrayOutputStream0.toString());
      assertEquals(1, byteArrayOutputStream0.size());
  }

  @Test
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1699, 0);
      AccessProto.StringArrayValue accessProto_StringArrayValue0 = AccessProto.StringArrayValue.parseFrom((InputStream) byteArrayInputStream0);
      assertNotNull(accessProto_StringArrayValue0);
      assertEquals(0, accessProto_StringArrayValue0.getSerializedSize());
  }

  @Test
  public void test13()  throws Throwable  {
      AccessProto.LoggerContext accessProto_LoggerContext0 = AccessProto.LoggerContext.getDefaultInstance();
      ByteString byteString0 = accessProto_LoggerContext0.toByteString();
      assertNotNull(byteString0);
      
      CodedInputStream codedInputStream0 = byteString0.newCodedInput();
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.newInstance();
      AccessProto.StringArrayValue accessProto_StringArrayValue0 = AccessProto.StringArrayValue.parseFrom(codedInputStream0, extensionRegistry0);
      assertNotNull(accessProto_StringArrayValue0);
      
      AccessProto.StringArrayValue accessProto_StringArrayValue1 = (AccessProto.StringArrayValue)accessProto_StringArrayValue0.getDefaultInstanceForType();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      accessProto_StringArrayValue1.writeDelimitedTo((OutputStream) byteArrayOutputStream0);
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals(0, accessProto_StringArrayValue0.getSerializedSize());
  }

  @Test
  public void test14()  throws Throwable  {
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.getEmptyRegistry();
      // Undeclared exception!
      try {
        AccessProto.StringArrayValue.parseDelimitedFrom((InputStream) null, extensionRegistry0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Descriptors.Descriptor descriptors_Descriptor0 = AccessProto.StringMapEntry.getDescriptor();
      assertEquals(6, descriptors_Descriptor0.getIndex());
  }

  @Test
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)58;
      byteArray0[2] = (byte) (-107);
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.newInstance();
      AccessProto.EventIdentifier accessProto_EventIdentifier0 = AccessProto.EventIdentifier.parseFrom(byteArray0, extensionRegistry0);
      assertNotNull(accessProto_EventIdentifier0);
      
      ByteString byteString0 = accessProto_EventIdentifier0.toByteString();
      assertNotNull(byteString0);
      
      AccessProto.AccessEvent accessProto_AccessEvent0 = AccessProto.AccessEvent.parseFrom(byteString0);
      assertEquals(0, accessProto_AccessEvent0.getLocalPort());
      assertEquals(0L, accessProto_AccessEvent0.getTimeStamp());
      assertEquals(0L, accessProto_EventIdentifier0.getLocalId());
      assertEquals(0, accessProto_AccessEvent0.getStatusCode());
      assertEquals(7, accessProto_AccessEvent0.getSerializedSize());
      assertNotNull(accessProto_AccessEvent0);
  }

  @Test
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      try {
        AccessProto.EventIdentifier.parseFrom(byteArray0);
        fail("Expecting exception: InvalidProtocolBufferException");
      } catch(InvalidProtocolBufferException e) {
        /*
         * Protocol message contained an invalid tag (zero).
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      AccessProto.LoggerContext accessProto_LoggerContext0 = AccessProto.LoggerContext.getDefaultInstance();
      ByteString byteString0 = accessProto_LoggerContext0.toByteString();
      assertNotNull(byteString0);
      
      CodedInputStream codedInputStream0 = byteString0.newCodedInput();
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.newInstance();
      AccessProto.EventIdentifier accessProto_EventIdentifier0 = AccessProto.EventIdentifier.parseFrom(codedInputStream0, extensionRegistry0);
      assertEquals(0, accessProto_EventIdentifier0.getSerializedSize());
      assertEquals(0L, accessProto_EventIdentifier0.getLocalId());
      assertNotNull(accessProto_EventIdentifier0);
  }

  @Test
  public void test19()  throws Throwable  {
      Descriptors.Descriptor descriptors_Descriptor0 = AccessProto.EventIdentifier.getDescriptor();
      assertEquals("EventIdentifier", descriptors_Descriptor0.getName());
  }

  @Test
  public void test20()  throws Throwable  {
      AccessProto.EventWrapper accessProto_EventWrapper0 = AccessProto.EventWrapper.getDefaultInstance();
      ByteString byteString0 = accessProto_EventWrapper0.toByteString();
      assertNotNull(byteString0);
      
      ExtensionRegistry extensionRegistry0 = ExtensionRegistry.newInstance();
      AccessProto.SourceIdentifier accessProto_SourceIdentifier0 = AccessProto.SourceIdentifier.parseFrom(byteString0, extensionRegistry0);
      assertNotNull(accessProto_SourceIdentifier0);
      assertEquals(0, accessProto_SourceIdentifier0.getSerializedSize());
  }

  @Test
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      AccessProto.EventWrapper accessProto_EventWrapper0 = AccessProto.EventWrapper.parseDelimitedFrom((InputStream) byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try {
        accessProto_EventWrapper0.getRepeatedFieldCount((Descriptors.FieldDescriptor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      AccessProto.EventWrapper accessProto_EventWrapper0 = AccessProto.EventWrapper.parseDelimitedFrom((InputStream) byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      
      accessProto_EventWrapper0.getDefaultInstanceForType();
      assertEquals(0, accessProto_EventWrapper0.getSerializedSize());
  }

  @Test
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-56);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      AccessProto.EventWrapper.parseDelimitedFrom((InputStream) byteArrayInputStream0);
  }

  @Test
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)19;
      ByteString byteString0 = ByteString.copyFrom(byteArray0);
      CodedInputStream codedInputStream0 = byteString0.newCodedInput();
      AccessProto.StringMap accessProto_StringMap0 = null;
      try {
        accessProto_StringMap0 = AccessProto.StringMap.parseFrom(codedInputStream0);
        fail("Expecting exception: InvalidProtocolBufferException");
      } catch(InvalidProtocolBufferException e) {
        /*
         * Protocol message contained an invalid tag (zero).
         */
      }
  }

  @Test
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-16);
      try {
        AccessProto.StringMap.parseFrom(byteArray0);
        fail("Expecting exception: InvalidProtocolBufferException");
      } catch(InvalidProtocolBufferException e) {
        /*
         * Protocol message contained an invalid tag (zero).
         */
      }
  }
}
