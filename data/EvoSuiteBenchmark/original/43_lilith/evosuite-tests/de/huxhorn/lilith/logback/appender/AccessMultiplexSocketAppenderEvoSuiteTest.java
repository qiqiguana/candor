/*
 * This file was automatically generated by EvoSuite
 */

package de.huxhorn.lilith.logback.appender;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import ch.qos.logback.access.spi.AccessEvent;
import de.huxhorn.lilith.logback.appender.AccessMultiplexSocketAppender;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class AccessMultiplexSocketAppenderEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AccessMultiplexSocketAppender accessMultiplexSocketAppender0 = new AccessMultiplexSocketAppender(false);
      assertNotNull(accessMultiplexSocketAppender0);
      
      accessMultiplexSocketAppender0.applicationIdentifierChanged();
      assertEquals(10011, accessMultiplexSocketAppender0.getPort());
  }

  @Test
  public void test1()  throws Throwable  {
      AccessMultiplexSocketAppender accessMultiplexSocketAppender0 = new AccessMultiplexSocketAppender();
      assertNotNull(accessMultiplexSocketAppender0);
      
      accessMultiplexSocketAppender0.setPort((-518));
      accessMultiplexSocketAppender0.setCompressing(false);
      assertEquals(-518, accessMultiplexSocketAppender0.getPort());
  }

  @Test
  public void test2()  throws Throwable  {
      AccessMultiplexSocketAppender accessMultiplexSocketAppender0 = new AccessMultiplexSocketAppender(false);
      assertNotNull(accessMultiplexSocketAppender0);
      
      boolean boolean0 = accessMultiplexSocketAppender0.isCompressing();
      assertEquals(10011, accessMultiplexSocketAppender0.getPort());
      assertEquals(false, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      AccessMultiplexSocketAppender accessMultiplexSocketAppender0 = new AccessMultiplexSocketAppender();
      assertNotNull(accessMultiplexSocketAppender0);
      
      accessMultiplexSocketAppender0.preProcess((AccessEvent) null);
      assertEquals(10010, accessMultiplexSocketAppender0.getPort());
      assertEquals(true, accessMultiplexSocketAppender0.isCompressing());
  }
}
