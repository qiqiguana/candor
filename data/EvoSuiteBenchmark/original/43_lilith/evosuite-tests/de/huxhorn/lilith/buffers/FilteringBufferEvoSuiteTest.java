/*
 * This file was automatically generated by EvoSuite
 */

package de.huxhorn.lilith.buffers;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.huxhorn.lilith.buffers.FilteringBuffer;
import de.huxhorn.sulky.buffers.BlockingCircularBuffer;
import de.huxhorn.sulky.buffers.Buffer;
import de.huxhorn.sulky.buffers.SoftReferenceCachingBuffer;
import de.huxhorn.sulky.conditions.BooleanValues;
import de.huxhorn.sulky.conditions.Condition;
import de.huxhorn.sulky.conditions.Not;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class FilteringBufferEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SoftReferenceCachingBuffer<Integer> softReferenceCachingBuffer0 = new SoftReferenceCachingBuffer<Integer>((Buffer<Integer>) null);
      Not not0 = new Not();
      FilteringBuffer<Integer> filteringBuffer0 = new FilteringBuffer<Integer>((Buffer<Integer>) softReferenceCachingBuffer0, (Condition) not0);
      filteringBuffer0.iterator();
  }

  @Test
  public void test1()  throws Throwable  {
      SoftReferenceCachingBuffer<Integer> softReferenceCachingBuffer0 = new SoftReferenceCachingBuffer<Integer>((Buffer<Integer>) null);
      Not not0 = new Not();
      FilteringBuffer<Integer> filteringBuffer0 = new FilteringBuffer<Integer>((Buffer<Integer>) softReferenceCachingBuffer0, (Condition) not0);
      assertEquals(false, filteringBuffer0.isDisposed());
      
      filteringBuffer0.dispose();
      assertEquals(true, filteringBuffer0.isDisposed());
  }

  @Test
  public void test2()  throws Throwable  {
      BooleanValues booleanValues0 = BooleanValues.TRUE;
      FilteringBuffer<Long> filteringBuffer0 = new FilteringBuffer<Long>((Buffer<Long>) null, (Condition) booleanValues0);
      Buffer<Long> buffer0 = FilteringBuffer.resolveSourceBuffer((Buffer<Long>) filteringBuffer0);
      assertNull(buffer0);
      assertEquals(false, filteringBuffer0.isDisposed());
  }

  @Test
  public void test3()  throws Throwable  {
      BlockingCircularBuffer<Object> blockingCircularBuffer0 = new BlockingCircularBuffer<Object>(162);
      BooleanValues booleanValues0 = BooleanValues.TRUE;
      FilteringBuffer<Object> filteringBuffer0 = new FilteringBuffer<Object>((Buffer<Object>) blockingCircularBuffer0, (Condition) booleanValues0);
      filteringBuffer0.clearFilteredIndices();
      assertEquals(false, filteringBuffer0.isDisposed());
  }

  @Test
  public void test4()  throws Throwable  {
      SoftReferenceCachingBuffer<Integer> softReferenceCachingBuffer0 = new SoftReferenceCachingBuffer<Integer>((Buffer<Integer>) null);
      Not not0 = new Not();
      FilteringBuffer<Integer> filteringBuffer0 = new FilteringBuffer<Integer>((Buffer<Integer>) softReferenceCachingBuffer0, (Condition) not0);
      boolean boolean0 = filteringBuffer0.isDisposed();
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      BlockingCircularBuffer<Object> blockingCircularBuffer0 = new BlockingCircularBuffer<Object>(162);
      BooleanValues booleanValues0 = BooleanValues.TRUE;
      FilteringBuffer<Object> filteringBuffer0 = new FilteringBuffer<Object>((Buffer<Object>) blockingCircularBuffer0, (Condition) booleanValues0);
      BooleanValues booleanValues1 = (BooleanValues)filteringBuffer0.getCondition();
      assertEquals(false, filteringBuffer0.isDisposed());
      assertNotNull(booleanValues1);
  }

  @Test
  public void test6()  throws Throwable  {
      SoftReferenceCachingBuffer<Integer> softReferenceCachingBuffer0 = new SoftReferenceCachingBuffer<Integer>((Buffer<Integer>) null);
      Not not0 = new Not();
      FilteringBuffer<Integer> filteringBuffer0 = new FilteringBuffer<Integer>((Buffer<Integer>) softReferenceCachingBuffer0, (Condition) not0);
      FilteringBuffer<Integer> filteringBuffer1 = new FilteringBuffer<Integer>((Buffer<Integer>) filteringBuffer0, (Condition) not0);
      filteringBuffer1.addFilteredIndex(0L);
      filteringBuffer1.get(0L);
      assertEquals(1L, filteringBuffer1.getSize());
  }

  @Test
  public void test7()  throws Throwable  {
      SoftReferenceCachingBuffer<Integer> softReferenceCachingBuffer0 = new SoftReferenceCachingBuffer<Integer>((Buffer<Integer>) null);
      Not not0 = new Not();
      FilteringBuffer<Integer> filteringBuffer0 = new FilteringBuffer<Integer>((Buffer<Integer>) softReferenceCachingBuffer0, (Condition) not0);
      long long0 = filteringBuffer0.getSourceIndex((-1718L));
      assertEquals((-1L), long0);
      assertEquals(false, filteringBuffer0.isDisposed());
  }

  @Test
  public void test8()  throws Throwable  {
      BlockingCircularBuffer<Integer> blockingCircularBuffer0 = new BlockingCircularBuffer<Integer>(520, 520);
      Not not0 = new Not();
      FilteringBuffer<Integer> filteringBuffer0 = new FilteringBuffer<Integer>((Buffer<Integer>) blockingCircularBuffer0, (Condition) not0);
      filteringBuffer0.addFilteredIndex((-1395L));
      assertEquals(1L, filteringBuffer0.getSize());
  }

  @Test
  public void test9()  throws Throwable  {
      BlockingCircularBuffer<Integer> blockingCircularBuffer0 = new BlockingCircularBuffer<Integer>(520, 520);
      Not not0 = new Not();
      blockingCircularBuffer0.add((Integer) 520);
      FilteringBuffer<Integer> filteringBuffer0 = new FilteringBuffer<Integer>((Buffer<Integer>) blockingCircularBuffer0, (Condition) not0);
      filteringBuffer0.addFilteredIndex(0L);
      assertEquals(1L, filteringBuffer0.getSize());
  }
}
