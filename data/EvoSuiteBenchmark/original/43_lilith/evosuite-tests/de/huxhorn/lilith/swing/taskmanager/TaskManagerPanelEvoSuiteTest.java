/*
 * This file was automatically generated by EvoSuite
 */

package de.huxhorn.lilith.swing.taskmanager;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import de.huxhorn.lilith.swing.taskmanager.TaskManagerPanel;
import de.huxhorn.sulky.tasks.Task;
import de.huxhorn.sulky.tasks.TaskManager;
import java.awt.event.ActionEvent;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TaskManagerPanelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TaskManagerPanel<String> taskManagerPanel0 = new TaskManagerPanel<String>((TaskManager<String>) null);
      taskManagerPanel0.isPaused();
  }

  @Test
  public void test1()  throws Throwable  {
      TaskManager<Object> taskManager0 = new TaskManager<Object>();
      TaskManagerPanel<Object> taskManagerPanel0 = new TaskManagerPanel<Object>(taskManager0);
      assertNotNull(taskManagerPanel0);
      
      taskManagerPanel0.setPaused(true);
      assertEquals(true, taskManagerPanel0.isPaused());
      assertEquals("de.huxhorn.lilith.swing.taskmanager.TaskManagerPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", taskManagerPanel0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      TaskManagerPanel<String> taskManagerPanel0 = new TaskManagerPanel<String>((TaskManager<String>) null);
      assertNotNull(taskManagerPanel0);
      
      TaskManagerPanel.CancelTaskAction taskManagerPanel_CancelTaskAction0 = taskManagerPanel0.new CancelTaskAction();
      taskManagerPanel_CancelTaskAction0.getTask();
      assertEquals(false, taskManagerPanel_CancelTaskAction0.isEnabled());
      assertEquals("de.huxhorn.lilith.swing.taskmanager.TaskManagerPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", taskManagerPanel0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      TaskManagerPanel<String> taskManagerPanel0 = new TaskManagerPanel<String>((TaskManager<String>) null);
      assertNotNull(taskManagerPanel0);
      
      TaskManagerPanel.CancelTaskAction taskManagerPanel_CancelTaskAction0 = taskManagerPanel0.new CancelTaskAction();
      taskManagerPanel_CancelTaskAction0.setTask((Task) null);
      assertEquals(false, taskManagerPanel_CancelTaskAction0.isEnabled());
      assertEquals("de.huxhorn.lilith.swing.taskmanager.TaskManagerPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", taskManagerPanel0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      TaskManagerPanel<String> taskManagerPanel0 = new TaskManagerPanel<String>((TaskManager<String>) null);
      assertNotNull(taskManagerPanel0);
      
      TaskManagerPanel.CancelTaskAction taskManagerPanel_CancelTaskAction0 = taskManagerPanel0.new CancelTaskAction();
      taskManagerPanel_CancelTaskAction0.actionPerformed((ActionEvent) null);
      assertEquals("de.huxhorn.lilith.swing.taskmanager.TaskManagerPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", taskManagerPanel0.toString());
      assertEquals(false, taskManagerPanel_CancelTaskAction0.isEnabled());
  }
}
