/*
 * This file was automatically generated by EvoSuite
 */

package org.fixsuite.message.info;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.List;
import org.fixsuite.message.info.ComponentInfo;
import org.fixsuite.message.info.FieldInfo;
import org.fixsuite.message.info.FixInfo;
import org.fixsuite.message.info.GroupInfo;
import org.fixsuite.message.info.MessageInfo;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ComponentInfoEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      MessageInfo messageInfo0 = new MessageInfo();
      String string0 = messageInfo0.getCategory();
      assertNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      MessageInfo messageInfo0 = new MessageInfo();
      messageInfo0.addComponent((ComponentInfo) messageInfo0, 195.48622776545608);
      // Undeclared exception!
      try {
        messageInfo0.addComponent((ComponentInfo) messageInfo0, 195.48622776545608);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      ComponentInfo componentInfo0 = new ComponentInfo();
      componentInfo0.setId((-9));
      assertEquals(-9, componentInfo0.getId());
  }

  @Test
  public void test3()  throws Throwable  {
      MessageInfo messageInfo0 = new MessageInfo();
      boolean boolean0 = messageInfo0.isNotRequiredXml();
      assertEquals(false, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      MessageInfo messageInfo0 = new MessageInfo();
      messageInfo0.setRequired(false);
      assertEquals(false, messageInfo0.isRequired());
  }

  @Test
  public void test5()  throws Throwable  {
      MessageInfo messageInfo0 = new MessageInfo();
      String string0 = messageInfo0.getComponentType();
      assertNull(string0);
  }

  @Test
  public void test6()  throws Throwable  {
      ComponentInfo componentInfo0 = new ComponentInfo();
      componentInfo0.setAbbreviation("l");
      assertNull(componentInfo0.getCategory());
  }

  @Test
  public void test7()  throws Throwable  {
      MessageInfo messageInfo0 = new MessageInfo();
      messageInfo0.setNotRequiredXml(false);
      assertEquals(false, messageInfo0.isNotRequiredXml());
  }

  @Test
  public void test8()  throws Throwable  {
      MessageInfo messageInfo0 = new MessageInfo();
      // Undeclared exception!
      try {
        messageInfo0.replaceAsGroup((FieldInfo) null, (GroupInfo) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      ComponentInfo componentInfo0 = new ComponentInfo();
      boolean boolean0 = componentInfo0.isRequired();
      assertEquals(false, boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      MessageInfo messageInfo0 = new MessageInfo();
      String string0 = messageInfo0.getAbbreviation();
      assertNull(string0);
  }

  @Test
  public void test11()  throws Throwable  {
      MessageInfo messageInfo0 = new MessageInfo();
      messageInfo0.setName("tO;P");
      assertNull(messageInfo0.getAbbreviation());
  }

  @Test
  public void test12()  throws Throwable  {
      MessageInfo messageInfo0 = new MessageInfo();
      messageInfo0.setComponentType("tO;P");
      assertNull(messageInfo0.getSection());
  }

  @Test
  public void test13()  throws Throwable  {
      MessageInfo messageInfo0 = new MessageInfo();
      messageInfo0.setCategory((String) null);
      assertNull(messageInfo0.getVolume());
  }

  @Test
  public void test14()  throws Throwable  {
      MessageInfo messageInfo0 = new MessageInfo();
      List<FieldInfo> list0 = messageInfo0.getFields();
      assertNull(list0);
  }

  @Test
  public void test15()  throws Throwable  {
      ComponentInfo componentInfo0 = new ComponentInfo();
      FieldInfo fieldInfo0 = new FieldInfo();
      componentInfo0.addField(fieldInfo0, (double) (-9));
      List<FieldInfo> list0 = componentInfo0.getFields();
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test16()  throws Throwable  {
      ComponentInfo componentInfo0 = new ComponentInfo();
      FieldInfo fieldInfo0 = componentInfo0.getField((-9));
      assertNull(fieldInfo0);
  }

  @Test
  public void test17()  throws Throwable  {
      MessageInfo messageInfo0 = new MessageInfo();
      FieldInfo fieldInfo0 = new FieldInfo();
      GroupInfo groupInfo0 = new GroupInfo(fieldInfo0);
      messageInfo0.addField((FieldInfo) groupInfo0, 195.48622776545608);
      FieldInfo fieldInfo1 = messageInfo0.getField((-18));
      assertNull(fieldInfo1);
  }

  @Test
  public void test18()  throws Throwable  {
      MessageInfo messageInfo0 = new MessageInfo();
      FieldInfo fieldInfo0 = messageInfo0.getField("");
      assertNull(fieldInfo0);
  }

  @Test
  public void test19()  throws Throwable  {
      MessageInfo messageInfo0 = new MessageInfo();
      FieldInfo fieldInfo0 = new FieldInfo();
      messageInfo0.addField(fieldInfo0, 0.0);
      // Undeclared exception!
      try {
        messageInfo0.getField("+\"ClF7uW;:[-");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test20()  throws Throwable  {
      MessageInfo messageInfo0 = new MessageInfo();
      FieldInfo fieldInfo0 = new FieldInfo();
      messageInfo0.addField(fieldInfo0, 0.0);
      // Undeclared exception!
      try {
        messageInfo0.addField(fieldInfo0, 449.0819248786899);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test21()  throws Throwable  {
      MessageInfo messageInfo0 = new MessageInfo();
      List<ComponentInfo> list0 = messageInfo0.getComponents();
      assertNull(list0);
  }

  @Test
  public void test22()  throws Throwable  {
      MessageInfo messageInfo0 = new MessageInfo();
      messageInfo0.addComponent((ComponentInfo) messageInfo0, 14.757129996541677);
      List<ComponentInfo> list0 = messageInfo0.getComponents();
      assertEquals(0, messageInfo0.getId());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test23()  throws Throwable  {
      MessageInfo messageInfo0 = new MessageInfo();
      ComponentInfo componentInfo0 = messageInfo0.getComponent(0);
      assertNull(componentInfo0);
  }

  @Test
  public void test24()  throws Throwable  {
      MessageInfo messageInfo0 = new MessageInfo();
      messageInfo0.addComponent((ComponentInfo) messageInfo0, 14.757129996541677);
      messageInfo0.getComponent((-1698));
      assertEquals(0, messageInfo0.getId());
  }

  @Test
  public void test25()  throws Throwable  {
      ComponentInfo componentInfo0 = new ComponentInfo();
      ComponentInfo componentInfo1 = componentInfo0.getComponent("l");
      assertNull(componentInfo1);
  }

  @Test
  public void test26()  throws Throwable  {
      MessageInfo messageInfo0 = new MessageInfo();
      messageInfo0.addComponent((ComponentInfo) messageInfo0, (-411.7803668080502));
      // Undeclared exception!
      try {
        messageInfo0.getComponent((String) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test27()  throws Throwable  {
      MessageInfo messageInfo0 = new MessageInfo();
      List<FixInfo> list0 = messageInfo0.getItems();
      assertNull(list0);
  }

  @Test
  public void test28()  throws Throwable  {
      ComponentInfo componentInfo0 = new ComponentInfo();
      FieldInfo fieldInfo0 = new FieldInfo();
      componentInfo0.addField(fieldInfo0, (double) (-9));
      List<FixInfo> list0 = componentInfo0.getItems();
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
  }

  @Test
  public void test29()  throws Throwable  {
      MessageInfo messageInfo0 = new MessageInfo();
      messageInfo0.addComponent((ComponentInfo) messageInfo0, 195.48622776545608);
      FieldInfo fieldInfo0 = new FieldInfo();
      GroupInfo groupInfo0 = new GroupInfo(fieldInfo0);
      messageInfo0.addField((FieldInfo) groupInfo0, 195.48622776545608);
      assertEquals(0, messageInfo0.getId());
  }
}
