/*
 * This file was automatically generated by EvoSuite
 */

package org.objectweb.asm.jip.commons;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.lang.reflect.Constructor;
import org.junit.BeforeClass;
import org.objectweb.asm.jip.Type;
import org.objectweb.asm.jip.commons.Method;

@RunWith(EvoSuiteRunner.class)
public class MethodEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Method method0 = new Method("I", "I");
      String string0 = method0.getDescriptor();
      assertEquals("I", string0);
  }

  @Test
  public void test1()  throws Throwable  {
      Method method0 = new Method("I", "I");
      String string0 = method0.toString();
      assertNotNull(string0);
      assertEquals("II", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try {
        Method.getMethod((java.lang.reflect.Method) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      Method method0 = new Method("I", "I");
      int int0 = method0.hashCode();
      assertEquals(0, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try {
        Method.getMethod((Constructor) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      Class<?> class0 = Method.class;
      Type type0 = Type.getType(class0);
      Type[] typeArray0 = new Type[10];
      typeArray0[0] = type0;
      typeArray0[1] = typeArray0[0];
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      typeArray0[5] = type0;
      typeArray0[6] = typeArray0[0];
      typeArray0[7] = typeArray0[1];
      typeArray0[8] = type0;
      typeArray0[9] = typeArray0[1];
      Method method0 = new Method("bhWGWs", type0, typeArray0);
      Type[] typeArray1 = method0.getArgumentTypes();
      assertEquals("bhWGWs", method0.getName());
      assertNotNull(typeArray1);
      assertEquals("(Lorg/objectweb/asm/jip/commons/Method;Lorg/objectweb/asm/jip/commons/Method;Lorg/objectweb/asm/jip/commons/Method;Lorg/objectweb/asm/jip/commons/Method;Lorg/objectweb/asm/jip/commons/Method;Lorg/objectweb/asm/jip/commons/Method;Lorg/objectweb/asm/jip/commons/Method;Lorg/objectweb/asm/jip/commons/Method;Lorg/objectweb/asm/jip/commons/Method;Lorg/objectweb/asm/jip/commons/Method;)Lorg/objectweb/asm/jip/commons/Method;", method0.getDescriptor());
  }

  @Test
  public void test6()  throws Throwable  {
      Method method0 = new Method("I", "I");
      Type type0 = method0.getReturnType();
      assertNotNull(type0);
      
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = type0;
      typeArray0[1] = type0;
      Method method1 = new Method("I", type0, typeArray0);
      boolean boolean0 = method0.equals((Object) method1);
      assertEquals(false, boolean0);
      assertEquals("I", method1.getName());
  }

  @Test
  public void test7()  throws Throwable  {
      Method method0 = new Method("I", "I");
      String string0 = method0.getName();
      assertEquals("I", string0);
  }

  @Test
  public void test8()  throws Throwable  {
      try {
        Method.getMethod("L2@");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      try {
        Method.getMethod("']re3u$F(AuKI dVg");
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Method method0 = Method.getMethod("(L s(o.:A5``q<;SL s(o.:A5``q<;L s(o.:A5``q<;)L s(o.:A5``q<;", true);
      assertNotNull(method0);
      assertEquals("s(Lo/:A5``q<;SL s(o/:A5``q<;L s(o/:A5``q<;;)L(L;", method0.toString());
  }

  @Test
  public void test11()  throws Throwable  {
      Method method0 = Method.getMethod("(L s(o.:A5``q<;SL s(o.:A5``q<;L s(o.:A5``q<;)L s(o.:A5``q<;");
      assertEquals("s(Lo/:A5``q<;SL s(o/:A5``q<;L s(o/:A5``q<;;)Ljava/lang/(L;", method0.toString());
      assertNotNull(method0);
  }

  @Test
  public void test12()  throws Throwable  {
      Method method0 = new Method("I", "I");
      boolean boolean0 = method0.equals((Object) method0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      Class<?> class0 = Method.class;
      Type type0 = Type.getType(class0);
      Type[] typeArray0 = new Type[10];
      typeArray0[0] = type0;
      typeArray0[1] = typeArray0[0];
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[4] = type0;
      typeArray0[5] = type0;
      typeArray0[6] = typeArray0[0];
      typeArray0[7] = typeArray0[1];
      typeArray0[8] = type0;
      typeArray0[9] = typeArray0[1];
      Method method0 = new Method("bhWGWs", type0, typeArray0);
      boolean boolean0 = method0.equals((Object) "org.objectweb.asm.jip.commons.Method");
      assertEquals(false, boolean0);
      assertEquals("bhWGWs(Lorg/objectweb/asm/jip/commons/Method;Lorg/objectweb/asm/jip/commons/Method;Lorg/objectweb/asm/jip/commons/Method;Lorg/objectweb/asm/jip/commons/Method;Lorg/objectweb/asm/jip/commons/Method;Lorg/objectweb/asm/jip/commons/Method;Lorg/objectweb/asm/jip/commons/Method;Lorg/objectweb/asm/jip/commons/Method;Lorg/objectweb/asm/jip/commons/Method;Lorg/objectweb/asm/jip/commons/Method;)Lorg/objectweb/asm/jip/commons/Method;", method0.toString());
  }

  @Test
  public void test14()  throws Throwable  {
      Method method0 = new Method("I", "I");
      Method method1 = new Method("II", "II");
      boolean boolean0 = method0.equals((Object) method1);
      assertEquals(false, boolean0);
  }
}
