/*
 * This file was automatically generated by EvoSuite
 */

package org.objectweb.asm.jip;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import org.junit.BeforeClass;
import org.objectweb.asm.jip.Type;

@RunWith(EvoSuiteRunner.class)
public class TypeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getReturnType((Method) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Type type0 = Type.getReturnType("[N\":?<G,5_9b?I2;<");
      assertNotNull(type0);
      
      String string0 = type0.getClassName();
      assertEquals(1, type0.getDimensions());
      assertNotNull(string0);
      assertEquals("\":?<G,5_9b?I2[]", string0);
      assertEquals("[N", type0.getDescriptor());
  }

  @Test
  public void test2()  throws Throwable  {
      Type type0 = Type.getObjectType("%[.}T}pjOFY>");
      assertNotNull(type0);
      
      int int0 = type0.getSort();
      assertEquals(2, type0.getDimensions());
      assertEquals(10, int0);
      assertEquals("%[.}T}pjOFY>", type0.getInternalName());
  }

  @Test
  public void test3()  throws Throwable  {
      Type type0 = Type.getType("[]");
      assertNotNull(type0);
      
      String string0 = type0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      Class<?> class0 = Type.class;
      Type type0 = Type.getType(class0);
      assertNotNull(type0);
      
      int int0 = type0.getSize();
      assertEquals(1, int0);
      assertEquals(10, type0.getSort());
      assertEquals("org.objectweb.asm.jip.Type", type0.getClassName());
  }

  @Test
  public void test5()  throws Throwable  {
      Type type0 = Type.getReturnType(")V");
      assertNotNull(type0);
      
      // Undeclared exception!
      try {
        type0.getInternalName();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      Class<?> class0 = Constructor.class;
      String string0 = Type.getInternalName(class0);
      assertNotNull(string0);
      assertEquals("java/lang/reflect/Constructor", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      Type type0 = Type.getObjectType("[B]");
      assertEquals(1, type0.getDimensions());
      assertNotNull(type0);
      assertEquals("[B]", type0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      Type[] typeArray0 = Type.getArgumentTypes("(SSSSSSSSSS)S");
      assertNotNull(typeArray0);
  }

  @Test
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getArgumentTypes("YX_0/$~LX6];T)_");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getArgumentTypes("mk;J7~%[b)feZNmI");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = Type.getArgumentsAndReturnSizes("(VVVV)V");
      assertEquals(20, int0);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = Type.getArgumentsAndReturnSizes("(Lint;Lint;Lint;Lint;Lint;Lint;Lint;)Lint;");
      assertEquals(33, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getArgumentsAndReturnSizes("S%r<h84M8N[[I'YLG");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: 17
         */
      }
  }

  @Test
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getArgumentsAndReturnSizes("S%r<h848DNI'YLG");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: 15
         */
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Type.getArgumentsAndReturnSizes("mk;J7~%[b)feZNmI");
  }

  @Test
  public void test16()  throws Throwable  {
      Type type0 = Type.getType("[B]");
      type0.getClassName();
  }

  @Test
  public void test17()  throws Throwable  {
      Type.getReturnType("C~C");
  }

  @Test
  public void test18()  throws Throwable  {
      Type type0 = Type.getReturnType("Dpt6dZm");
      type0.getClassName();
  }

  @Test
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getReturnType("EHn");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test20()  throws Throwable  {
      Type.getReturnType("FAp@u:oQO=`");
  }

  @Test
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getType("Gp");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getType("H7a/#c0*$pp$'h_");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test23()  throws Throwable  {
      Type.getType("I3vO");
  }

  @Test
  public void test24()  throws Throwable  {
      Type.getType("KBFM5g;[oL}|1r))w?S");
  }

  @Test
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getReturnType("MW,2,-4J:]K");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getReturnType("D{1# vn)O}4GvDp");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getType("P5|}RC0% S");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getType("Q>fG?\"W");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getReturnType("R2skx/%o:|tt|c|\"W");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getReturnType("J#q./5i]jv+#B{`1)U3");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try {
        Type.getType("W");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test32()  throws Throwable  {
      Type.getType("Y|Cc'0 w;w");
  }

  @Test
  public void test33()  throws Throwable  {
      Type.getType("Zd");
  }

  @Test
  public void test34()  throws Throwable  {
      Type type0 = Type.getObjectType("%[.}T}pjOFY>");
      type0.getDimensions();
  }

  @Test
  public void test35()  throws Throwable  {
      Type type0 = Type.VOID_TYPE;
      type0.getClassName();
  }

  @Test
  public void test36()  throws Throwable  {
      Type type0 = Type.BOOLEAN_TYPE;
      type0.getClassName();
  }

  @Test
  public void test37()  throws Throwable  {
      Type type0 = Type.CHAR_TYPE;
      type0.getClassName();
  }

  @Test
  public void test38()  throws Throwable  {
      Type type0 = Type.SHORT_TYPE;
      type0.getClassName();
  }

  @Test
  public void test39()  throws Throwable  {
      Type type0 = Type.INT_TYPE;
      type0.getClassName();
  }

  @Test
  public void test40()  throws Throwable  {
      Type type0 = Type.FLOAT_TYPE;
      type0.getClassName();
  }

  @Test
  public void test41()  throws Throwable  {
      Type type0 = Type.LONG_TYPE;
      type0.getClassName();
  }

  @Test
  public void test42()  throws Throwable  {
      Type type0 = Type.SHORT_TYPE;
      Type[] typeArray0 = new Type[10];
      typeArray0[1] = type0;
      typeArray0[4] = type0;
      typeArray0[6] = type0;
      typeArray0[7] = type0;
      typeArray0[0] = type0;
      typeArray0[2] = type0;
      typeArray0[3] = type0;
      typeArray0[5] = type0;
      typeArray0[8] = type0;
      typeArray0[9] = type0;
      Type.getMethodDescriptor(type0, typeArray0);
  }

  @Test
  public void test43()  throws Throwable  {
      Type type0 = Type.getObjectType("int");
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = type0;
      // Undeclared exception!
      try {
        Type.getMethodDescriptor(type0, typeArray0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test44()  throws Throwable  {
      Type type0 = Type.FLOAT_TYPE;
      type0.getSize();
  }

  @Test
  public void test45()  throws Throwable  {
      Type type0 = Type.getObjectType(" jT;N\"l3-W>BT+f");
      type0.getOpcode(46);
  }

  @Test
  public void test46()  throws Throwable  {
      Type type0 = Type.BYTE_TYPE;
      type0.getOpcode(79);
  }

  @Test
  public void test47()  throws Throwable  {
      Type type0 = Type.getObjectType(" jT;N\"l3-W>BT+f");
      type0.getOpcode(50);
  }

  @Test
  public void test48()  throws Throwable  {
      Type type0 = Type.SHORT_TYPE;
      type0.getOpcode(50);
  }

  @Test
  public void test49()  throws Throwable  {
      Type type0 = Type.FLOAT_TYPE;
      Type type1 = Type.getReturnType("Dpt6dZm");
      type0.equals((Object) type1);
  }

  @Test
  public void test50()  throws Throwable  {
      Type type0 = Type.getObjectType("int");
      type0.equals((Object) "int");
  }

  @Test
  public void test51()  throws Throwable  {
      Type type0 = Type.getObjectType(" jT;N\"l3-W>BT+f");
      Class<?> class0 = Class.class;
      Type type1 = Type.getType(class0);
      type0.equals((Object) type1);
  }

  @Test
  public void test52()  throws Throwable  {
      Type type0 = Type.getType("[[3");
      Type type1 = Type.getType("[[3");
      type0.equals((Object) type1);
  }

  @Test
  public void test53()  throws Throwable  {
      Type type0 = Type.getObjectType("int");
      Type type1 = Type.getType("(Lint;Lint;Lint;Lint;Lint;Lint;Lint;)Lint;");
      type0.equals((Object) type1);
  }

  @Test
  public void test54()  throws Throwable  {
      Class<?> class0 = Type.class;
      Type type0 = Type.getType(class0);
      type0.hashCode();
  }

  @Test
  public void test55()  throws Throwable  {
      Type type0 = Type.SHORT_TYPE;
      type0.hashCode();
  }

  @Test
  public void test56()  throws Throwable  {
      Type type0 = Type.getType("[[3");
      type0.hashCode();
  }
}
