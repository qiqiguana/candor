/*
 * This file was automatically generated by EvoSuite
 */

package org.objectweb.asm.jip;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import org.objectweb.asm.jip.Attribute;
import org.objectweb.asm.jip.ClassReader;
import org.objectweb.asm.jip.ClassWriter;
import org.objectweb.asm.jip.Type;

@RunWith(EvoSuiteRunner.class)
public class ClassWriterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-908));
      classWriter0.newField("", "", "");
      int int0 = classWriter0.newField("", "", "");
      assertEquals(5, classWriter0.index);
      assertEquals(4, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-908));
      classWriter0.newMethod("", "", "", true);
      int int0 = classWriter0.newMethod("", "", "", true);
      assertEquals(5, classWriter0.index);
      assertEquals(4, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3));
      assertNotNull(classWriter0);
      
      Double double0 = new Double((double) (-3));
      classWriter0.visitField(512, "j[Yl vU%L2", "j[Yl vU%L2", "j[Yl vU%L2", (Object) double0);
      assertEquals(4, classWriter0.index);
  }

  @Test
  public void test3()  throws Throwable  {
      ClassWriter classWriter0 = null;
      try {
        classWriter0 = new ClassWriter((ClassReader) null, (-375));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      
      classWriter0.visitEnd();
      assertEquals(192, classWriter0.threshold);
      assertEquals(1, classWriter0.index);
  }

  @Test
  public void test5()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      
      // Undeclared exception!
      try {
        classWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1962));
      classWriter0.visit((int) (byte) (-55), 1068, "htY{WRYPA<", (String) null, "ta's", (String[]) null);
      assertEquals((-55), classWriter0.version);
      assertEquals(5, classWriter0.index);
  }

  @Test
  public void test7()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      classWriter0.visit(0, (-153), "g%*[gaI$/+{8<lC[e", "", "", stringArray0);
      classWriter0.toByteArray();
      assertEquals(8, classWriter0.index);
  }

  @Test
  public void test8()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      
      classWriter0.visitSource((String) null, (String) null);
      assertEquals(192, classWriter0.threshold);
      assertEquals(1, classWriter0.index);
  }

  @Test
  public void test9()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-18));
      assertNotNull(classWriter0);
      
      classWriter0.visitSource(">s{Yv6T)%mW{q'", "");
      classWriter0.toByteArray();
      assertEquals(4, classWriter0.index);
  }

  @Test
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1962));
      assertNotNull(classWriter0);
      
      classWriter0.visitOuterClass("ta's", (String) null, "ta's");
      assertEquals(3, classWriter0.index);
  }

  @Test
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      
      classWriter0.visitOuterClass("g%*[gaI$/+{8<lC[e", "g%*[gaI$/+{8<lC[e", "g%*[gaI$/+{8<lC[e");
      classWriter0.toByteArray();
      assertEquals(5, classWriter0.index);
  }

  @Test
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      
      classWriter0.visitOuterClass("i7eC`R$Qoj1)$", "i7eC`R$Qoj1)$", (String) null);
      assertEquals(3, classWriter0.index);
  }

  @Test
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-18));
      classWriter0.visitAnnotation("", false);
      classWriter0.toByteArray();
      assertEquals(3, classWriter0.index);
  }

  @Test
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-18));
      classWriter0.visitAnnotation(">s{Yv6T)%mW{q'", true);
      classWriter0.toByteArray();
      assertEquals(3, classWriter0.index);
  }

  @Test
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1962));
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, (int) (byte) (-55));
      classWriter0.visitInnerClass("htY{WRYPA<", (String) null, "htY{WRYPA<", (int) (byte) (-55));
      assertEquals(3, classWriter0.index);
  }

  @Test
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((int) (byte) (-55));
      assertNotNull(classWriter0);
      
      classWriter0.visitInnerClass((String) null, "", "", 192);
      assertEquals(3, classWriter0.index);
  }

  @Test
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitField((-153), "g%*[gaI$/+{8<lC[e", "g%*[gaI$/+{8<lC[e", "g%*[gaI$/+{8<lC[e", (Object) classWriter0.invalidFrames);
      classWriter0.toByteArray();
      assertEquals(7, classWriter0.index);
      assertEquals(192, classWriter0.threshold);
  }

  @Test
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      classWriter0.visitMethod(0, "", "", "", stringArray0);
      classWriter0.toByteArray();
      assertEquals(5, classWriter0.index);
  }

  @Test
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1962));
      assertNotNull(classWriter0);
      
      classWriter0.visitInnerClass((String) null, (String) null, (String) null, (int) (byte) (-55));
      classWriter0.toByteArray();
      assertEquals(2, classWriter0.index);
  }

  @Test
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-18));
      assertNotNull(classWriter0);
      
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try {
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 51966
         */
      }
  }

  @Test
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      
      int int0 = classWriter0.newConst((Object) classWriter0.index);
      assertEquals(2, classWriter0.index);
      assertEquals(1, int0);
  }

  @Test
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(992);
      Byte byte0 = new Byte((byte)68);
      int int0 = classWriter0.newConst((Object) byte0);
      assertEquals(2, classWriter0.index);
      assertEquals(1, int0);
  }

  @Test
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(992);
      Character character0 = new Character('p');
      classWriter0.newConst((Object) character0);
      int int0 = classWriter0.newConst((Object) character0);
      assertEquals(2, classWriter0.index);
      assertEquals(1, int0);
  }

  @Test
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((int) (byte) (-55));
      Short short0 = new Short((short)0);
      int int0 = classWriter0.newConst((Object) short0);
      assertEquals(2, classWriter0.index);
      assertEquals(1, int0);
  }

  @Test
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      
      Boolean boolean0 = Boolean.TRUE;
      int int0 = classWriter0.newConst((Object) boolean0);
      assertEquals(2, classWriter0.index);
      assertEquals(1, int0);
  }

  @Test
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((int) (byte) (-55));
      assertNotNull(classWriter0);
      
      Type type0 = Type.LONG_TYPE;
      int int0 = classWriter0.newConst((Object) type0);
      assertEquals(3, classWriter0.index);
      assertEquals(2, int0);
  }

  @Test
  public void test27()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((int) (byte) (-55));
      assertNotNull(classWriter0);
      
      classWriter0.visitField((int) (byte) (-55), "", "r]*|4TBW_CG ", "l&~Xz", (Object) "r]*|4TBW_CG ");
      assertEquals(5, classWriter0.index);
      assertEquals(192, classWriter0.threshold);
  }

  @Test
  public void test28()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      assertNotNull(classWriter0);
      
      // Undeclared exception!
      try {
        classWriter0.newConst((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * value null
         */
      }
  }

  @Test
  public void test29()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1970));
      Class<?> class0 = Type.class;
      Type type0 = Type.getType(class0);
      int int0 = classWriter0.newConst((Object) type0);
      assertEquals(3, classWriter0.index);
      assertEquals(2, int0);
  }

  @Test
  public void test30()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(992);
      // Undeclared exception!
      try {
        classWriter0.newMethod((String) null, "", (String) null, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test31()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-908));
      classWriter0.newField("", "", "");
      int int0 = classWriter0.newMethod("", "", "", true);
      assertEquals(6, classWriter0.index);
      assertEquals(5, int0);
  }

  @Test
  public void test32()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(992);
      classWriter0.addType("Lorg/objectweb/asm/jip/ClassWriter;");
      int int0 = classWriter0.addUninitializedType("", 1);
      assertEquals(2, int0);
      assertEquals(192, classWriter0.threshold);
  }

  @Test
  public void test33()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(992);
      assertNotNull(classWriter0);
      
      int int0 = classWriter0.addUninitializedType("", 1);
      assertEquals(192, classWriter0.threshold);
      assertEquals(1, int0);
  }

  @Test
  public void test34()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3));
      // Undeclared exception!
      try {
        classWriter0.getMergedType(1024, 1024);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test35()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(992);
      assertNotNull(classWriter0);
      
      Float float0 = new Float(0.0F);
      classWriter0.newConst((Object) float0);
      Long long0 = new Long(4294967295L);
      classWriter0.visitField(9, "cvWw'8", "&z", "&z", (Object) long0);
      assertEquals(6, classWriter0.index);
  }

  @Test
  public void test36()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-908));
      assertNotNull(classWriter0);
      
      classWriter0.newUTF8("Exceptions");
      classWriter0.threshold = (-908);
      int int0 = classWriter0.newField("", "", "");
      assertEquals(384, classWriter0.threshold);
      assertEquals(5, int0);
  }
}
