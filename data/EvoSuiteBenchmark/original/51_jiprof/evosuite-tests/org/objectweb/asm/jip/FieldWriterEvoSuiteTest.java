/*
 * This file was automatically generated by EvoSuite
 */

package org.objectweb.asm.jip;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import org.objectweb.asm.jip.Attribute;
import org.objectweb.asm.jip.ByteVector;
import org.objectweb.asm.jip.ClassWriter;
import org.objectweb.asm.jip.FieldWriter;

@RunWith(EvoSuiteRunner.class)
public class FieldWriterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-5));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "", "", "", (Object) null);
      assertNotNull(fieldWriter0);
      
      // Undeclared exception!
      try {
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-5));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "", "", "", (Object) null);
      assertNotNull(fieldWriter0);
      
      fieldWriter0.visitEnd();
      assertEquals(16, fieldWriter0.getSize());
  }

  @Test
  public void test2()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-5));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "", "", "", (Object) null);
      assertNotNull(fieldWriter0);
      assertEquals(16, fieldWriter0.getSize());
      
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, (-5), "", "", (String) null, (Object) null);
      assertNotNull(fieldWriter1);
      assertEquals(20, fieldWriter1.getSize());
  }

  @Test
  public void test3()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-705), "C.;>44./7f_l<(d", "C.;>44./7f_l<(d", "C.;>44./7f_l<(d", (Object) "/");
      assertNotNull(fieldWriter0);
      
      fieldWriter0.visitAnnotation("C.;>44./7f_l<(d", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, fieldWriter0.getSize());
      assertEquals(48, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-705), "C.;>44./7f_l<(d", "C.;>44./7f_l<(d", "C.;>44./7f_l<(d", (Object) "/");
      assertNotNull(fieldWriter0);
      
      fieldWriter0.visitAnnotation("C.;>44./7f_l<(d", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, fieldWriter0.getSize());
      assertEquals(48, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-5));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "", "", "", (Object) null);
      assertNotNull(fieldWriter0);
      
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-705), "C.;>44./7f_l<(d", "C.;>44./7f_l<(d", "C.;>44./7f_l<(d", (Object) "/");
      assertNotNull(fieldWriter0);
      assertEquals(36, fieldWriter0.getSize());
      
      classWriter0.version = (-705);
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-5));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-5), "", "", (String) null, (Object) null);
      assertNotNull(fieldWriter0);
      
      int int0 = fieldWriter0.getSize();
      assertEquals(20, int0);
  }

  @Test
  public void test8()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-5));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "", "", "", (Object) null);
      assertNotNull(fieldWriter0);
      
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      assertEquals(16, fieldWriter0.getSize());
  }

  @Test
  public void test9()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-705), "C.;>44./7f_l<(d", "C.;>44./7f_l<(d", "C.;>44./7f_l<(d", (Object) "/");
      assertNotNull(fieldWriter0);
      
      ByteVector byteVector0 = new ByteVector(0);
      classWriter0.version = (-705);
      fieldWriter0.put(byteVector0);
      assertEquals(30, fieldWriter0.getSize());
  }

  @Test
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-5));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-5), "", "", (String) null, (Object) null);
      assertNotNull(fieldWriter0);
      
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      assertEquals(20, fieldWriter0.getSize());
  }

  @Test
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-705), "C.;>44./7f_l<(d", "C.;>44./7f_l<(d", "C.;>44./7f_l<(d", (Object) "/");
      assertNotNull(fieldWriter0);
      
      ByteVector byteVector0 = new ByteVector(0);
      fieldWriter0.visitAnnotation("C.;>44./7f_l<(d", true);
      fieldWriter0.put(byteVector0);
      assertEquals(48, fieldWriter0.getSize());
  }

  @Test
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-705), "C.;>44./7f_l<(d", "C.;>44./7f_l<(d", "C.;>44./7f_l<(d", (Object) "/");
      assertNotNull(fieldWriter0);
      
      fieldWriter0.visitAnnotation("C.;>44./7f_l<(d", false);
      ByteVector byteVector0 = new ByteVector(0);
      fieldWriter0.put(byteVector0);
      assertEquals(48, fieldWriter0.getSize());
  }
}
