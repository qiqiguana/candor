/*
 * This file was automatically generated by EvoSuite
 */

package org.objectweb.asm.jip.attrs;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import org.junit.BeforeClass;
import org.objectweb.asm.jip.ByteVector;
import org.objectweb.asm.jip.ClassReader;
import org.objectweb.asm.jip.ClassWriter;
import org.objectweb.asm.jip.Label;
import org.objectweb.asm.jip.attrs.StackMapFrame;
import org.objectweb.asm.jip.attrs.StackMapTableAttribute;

@RunWith(EvoSuiteRunner.class)
public class StackMapTableAttributeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      StackMapTableAttribute stackMapTableAttribute0 = new StackMapTableAttribute((List) linkedList0);
      boolean boolean0 = stackMapTableAttribute0.isCodeAttribute();
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      StackMapTableAttribute stackMapTableAttribute0 = new StackMapTableAttribute((List) linkedList0);
      boolean boolean0 = stackMapTableAttribute0.isUnknown();
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      StackMapTableAttribute stackMapTableAttribute0 = new StackMapTableAttribute();
      List<Object> list0 = stackMapTableAttribute0.getFrames();
      assertNull(list0);
  }

  @Test
  public void test3()  throws Throwable  {
      LinkedList<StackMapFrame> linkedList0 = new LinkedList<StackMapFrame>();
      StackMapTableAttribute stackMapTableAttribute0 = new StackMapTableAttribute((List) linkedList0);
      StackMapFrame stackMapFrame0 = stackMapTableAttribute0.getFrame((Label) null);
      assertNull(stackMapFrame0);
  }

  @Test
  public void test4()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      StackMapTableAttribute stackMapTableAttribute0 = new StackMapTableAttribute((List) linkedList0);
      linkedList0.add((Integer) 32767);
      // Undeclared exception!
      try {
        stackMapTableAttribute0.getFrame((Label) null);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * java.lang.Integer cannot be cast to org.objectweb.asm.jip.attrs.StackMapFrame
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Throwable");
      char[] charArray0 = new char[12];
      StackMapTableAttribute stackMapTableAttribute0 = new StackMapTableAttribute();
      Label[] labelArray0 = new Label[9];
      // Undeclared exception!
      try {
        stackMapTableAttribute0.read(classReader0, 0, (-313), charArray0, 1089, labelArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      StackMapTableAttribute stackMapTableAttribute0 = new StackMapTableAttribute((List) linkedList0);
      ClassWriter classWriter0 = new ClassWriter(32767);
      byte[] byteArray0 = new byte[32];
      ByteVector byteVector0 = stackMapTableAttribute0.write(classWriter0, byteArray0, 8, 8, 0);
      assertNotNull(byteVector0);
  }

  @Test
  public void test7()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      StackMapTableAttribute stackMapTableAttribute0 = new StackMapTableAttribute((List) linkedList0);
      linkedList0.add(0, (Integer) 0);
      linkedList0.push((Integer) null);
      ClassWriter classWriter0 = new ClassWriter(419);
      byte[] byteArray0 = new byte[6];
      // Undeclared exception!
      try {
        stackMapTableAttribute0.write(classWriter0, byteArray0, (int) (byte)4, (int) (byte)4, (-884));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      List<Object> list0 = StackMapTableAttribute.calculateLocals("!)", 1, "!)", "!)");
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
  }

  @Test
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try {
        StackMapTableAttribute.calculateLocals("<init>", (-1261), "<init>", "<init>");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * 6
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      List<Object> list0 = StackMapTableAttribute.calculateLocals("!)", (-1777), "!)", "!)");
      assertNotNull(list0);
      assertEquals(0, list0.size());
  }

  @Test
  public void test11()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Throwable");
      StackMapTableAttribute stackMapTableAttribute0 = new StackMapTableAttribute();
      char[] charArray0 = new char[8];
      ClassWriter classWriter0 = new ClassWriter(classReader0, (-1839));
      Label[] labelArray0 = new Label[2];
      Label label0 = new Label();
      labelArray0[0] = label0;
      // Undeclared exception!
      try {
        stackMapTableAttribute0.read(classReader0, (-1), (-1), charArray0, 0, labelArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      StackMapTableAttribute stackMapTableAttribute0 = new StackMapTableAttribute((List) linkedList0);
      linkedList0.add(0, (Integer) 0);
      String string0 = stackMapTableAttribute0.toString();
      assertEquals("StackMapTable[\n[0]\n]", stackMapTableAttribute0.toString());
      assertNotNull(string0);
      assertEquals("StackMapTable[\n[0]\n]", string0);
  }
}
