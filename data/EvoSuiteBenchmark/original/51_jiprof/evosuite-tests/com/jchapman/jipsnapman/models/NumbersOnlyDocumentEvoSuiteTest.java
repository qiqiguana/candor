/*
 * This file was automatically generated by EvoSuite
 */

package com.jchapman.jipsnapman.models;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.jchapman.jipsnapman.models.NumbersOnlyDocument;
import javax.swing.JTextPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.SimpleAttributeSet;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class NumbersOnlyDocumentEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NumbersOnlyDocument numbersOnlyDocument0 = new NumbersOnlyDocument();
      JTextPane jTextPane0 = new JTextPane();
      MutableAttributeSet mutableAttributeSet0 = jTextPane0.getInputAttributes();
      numbersOnlyDocument0.insertString(0, (String) null, (AttributeSet) mutableAttributeSet0);
      assertEquals(-1, numbersOnlyDocument0.getAsynchronousLoadPriority());
  }

  @Test
  public void test1()  throws Throwable  {
      NumbersOnlyDocument numbersOnlyDocument0 = new NumbersOnlyDocument();
      numbersOnlyDocument0.insertString(1698, "Xh0%Fn`", (AttributeSet) null);
      assertEquals(-1, numbersOnlyDocument0.getAsynchronousLoadPriority());
  }

  @Test
  public void test2()  throws Throwable  {
      NumbersOnlyDocument numbersOnlyDocument0 = new NumbersOnlyDocument();
      numbersOnlyDocument0.insertString(1, "", (AttributeSet) null);
      assertEquals(-1, numbersOnlyDocument0.getAsynchronousLoadPriority());
  }

  @Test
  public void test3()  throws Throwable  {
      NumbersOnlyDocument numbersOnlyDocument0 = new NumbersOnlyDocument();
      SimpleAttributeSet simpleAttributeSet0 = new SimpleAttributeSet();
      try {
        numbersOnlyDocument0.insertString(198, "9", (AttributeSet) simpleAttributeSet0);
        fail("Expecting exception: BadLocationException");
      } catch(BadLocationException e) {
        /*
         * Invalid insert
         */
      }
  }
}
