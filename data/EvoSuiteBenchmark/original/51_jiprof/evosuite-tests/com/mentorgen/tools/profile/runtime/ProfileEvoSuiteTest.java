/*
 * This file was automatically generated by EvoSuite
 */

package com.mentorgen.tools.profile.runtime;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.mentorgen.tools.profile.runtime.Frame;
import com.mentorgen.tools.profile.runtime.Profile;
import java.util.Comparator;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ProfileEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      // Undeclared exception!
      try {
        Profile.getThreadTotalTime((-764L));
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      Profile.allocations();
  }

  @Test
  public void test2()  throws Throwable  {
      Profile.threads();
  }

  @Test
  public void test3()  throws Throwable  {
      Profile.shutdown();
  }

  @Test
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try {
        Profile.start();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try {
        Profile.sortFrameList((Comparator<Frame>) null);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * com.mentorgen.tools.profile.runtime.Frame cannot be cast to java.lang.Comparable
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      // Undeclared exception!
      try {
        Profile.stop();
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
          Profile profile0 = new Profile();
          // Undeclared exception!
          try {
            profile0.run();
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (java.io.FilePermission profile.txt write)
             * java.lang.Thread.getStackTrace(Thread.java:1479)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:962)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:183)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:84)
             * java.io.FileWriter.<init>(FileWriter.java:46)
             * com.mentorgen.tools.profile.output.ProfileTextDump.dump(ProfileTextDump.java:86)
             * com.mentorgen.tools.profile.output.ProfileDump.dump(ProfileDump.java:53)
             * com.mentorgen.tools.profile.runtime.Profile.run(Profile.java:405)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
             * java.lang.reflect.Method.invoke(Method.java:597)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
             * java.util.concurrent.FutureTask.run(FutureTask.java:138)
             * java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
             * java.lang.Thread.run(Thread.java:662)
             */
          }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test8()  throws Throwable  {
      Profile.interactions(1867L);
  }

  @Test
  public void test9()  throws Throwable  {
      // Undeclared exception!
      try {
        Profile.setFileName("L?5");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Profile.clear();
  }

  @Test
  public void test11()  throws Throwable  {
      Profile.start("output-summary-only", "output-summary-only");
  }

  @Test
  public void test12()  throws Throwable  {
      Profile.end("]DV!=]xK:", "]DV!=]xK:");
  }

  @Test
  public void test13()  throws Throwable  {
      Profile.beginWait("output-summary-only", "output-summary-only");
  }

  @Test
  public void test14()  throws Throwable  {
      Profile.endWait("]DV!=]xK:", "]DV!=]xK:");
  }

  @Test
  public void test15()  throws Throwable  {
      Profile.unwind((String) null, (String) null, (String) null);
  }

  @Test
  public void test16()  throws Throwable  {
      Profile.alloc((String) null);
  }
}
