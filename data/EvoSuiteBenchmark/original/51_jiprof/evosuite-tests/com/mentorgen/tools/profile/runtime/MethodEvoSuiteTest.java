/*
 * This file was automatically generated by EvoSuite
 */

package com.mentorgen.tools.profile.runtime;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.mentorgen.tools.profile.runtime.Method;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MethodEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Method method0 = new Method("-t", "-t");
      int int0 = method0.hashCode();
      assertEquals(3022, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      Method method0 = new Method("-t", "-t");
      String string0 = method0.getMethodName();
      assertEquals("-t", string0);
  }

  @Test
  public void test2()  throws Throwable  {
      Method method0 = new Method("1", "1");
      String string0 = method0.toString();
      assertNotNull(string0);
      assertEquals("1:1", string0);
  }

  @Test
  public void test3()  throws Throwable  {
      Method method0 = new Method("1", "1");
      String string0 = method0.getClassName();
      assertEquals("1", string0);
  }

  @Test
  public void test4()  throws Throwable  {
      Method method0 = new Method("1", "1");
      String string0 = method0.toInvertedString();
      assertEquals("1:1\t()", string0);
      assertNotNull(string0);
  }

  @Test
  public void test5()  throws Throwable  {
      Method method0 = new Method("}y\"/=}xFrY4o9X+0", "}y\"/=}xFrY4o9X+0");
      String string0 = method0.toInvertedString();
      assertNotNull(string0);
      assertEquals("=}xFrY4o9X+0:}y\"/=}xFrY4o9X+0\t(}y\")", string0);
  }

  @Test
  public void test6()  throws Throwable  {
      Method method0 = new Method("-t", "-t");
      boolean boolean0 = method0.equals((Object) method0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      Method method0 = new Method("1", "1");
      // Undeclared exception!
      try {
        method0.equals((Object) "1");
        fail("Expecting exception: AssertionError");
      } catch(AssertionError e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      Method method0 = new Method("-t", "-t");
      Method method1 = new Method((String) null, "-t");
      boolean boolean0 = method0.equals((Object) method1);
      assertEquals(false, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      Method method0 = new Method("}y\"/=}xFrY4o9X+0", "}y\"/=}xFrY4o9X+0");
      Method method1 = new Method("}y\"/=}xFrY4o9X+0", "=}xFrY4o9X+0:}y\"/=}xFrY4o9X+0\t(}y\")");
      boolean boolean0 = method0.equals((Object) method1);
      assertEquals(false, boolean0);
      assertEquals("}y\"/=}xFrY4o9X+0", method1.getClassName());
  }
}
