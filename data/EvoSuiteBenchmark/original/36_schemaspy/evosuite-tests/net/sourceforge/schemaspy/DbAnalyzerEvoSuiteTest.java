/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.schemaspy;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.sql.DatabaseMetaData;
import java.sql.SQLException;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.TreeSet;
import net.sourceforge.schemaspy.DbAnalyzer;
import net.sourceforge.schemaspy.model.ForeignKeyConstraint;
import net.sourceforge.schemaspy.model.ImpliedForeignKeyConstraint;
import net.sourceforge.schemaspy.model.RailsForeignKeyConstraint;
import net.sourceforge.schemaspy.model.Table;
import net.sourceforge.schemaspy.model.TableColumn;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DbAnalyzerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      TreeSet<Table> treeSet0 = new TreeSet<Table>();
      List<ImpliedForeignKeyConstraint> list0 = DbAnalyzer.getImpliedConstraints((Collection<Table>) treeSet0);
      assertEquals(0, list0.size());
  }

  @Test
  public void test1()  throws Throwable  {
      HashSet<Table> hashSet0 = new HashSet<Table>();
      List<Table> list0 = DbAnalyzer.getTablesWithoutIndexes((Collection<Table>) hashSet0);
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test2()  throws Throwable  {
      DbAnalyzer dbAnalyzer0 = new DbAnalyzer();
      assertNotNull(dbAnalyzer0);
  }

  @Test
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try {
        DbAnalyzer.getPopulatedSchemas((DatabaseMetaData) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      TreeSet<Table> treeSet0 = new TreeSet<Table>();
      treeSet0.add((Table) null);
      // Undeclared exception!
      try {
        DbAnalyzer.getImpliedConstraints((Collection<Table>) treeSet0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      HashMap<String, Table> hashMap0 = new HashMap<String, Table>();
      List<RailsForeignKeyConstraint> list0 = DbAnalyzer.getRailsConstraints((Map<String, Table>) hashMap0);
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test6()  throws Throwable  {
      HashMap<String, Table> hashMap0 = new HashMap<String, Table>();
      hashMap0.put("f@NY}J$)%", (Table) null);
      // Undeclared exception!
      try {
        DbAnalyzer.getRailsConstraints((Map<String, Table>) hashMap0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      TreeSet<Table> treeSet0 = new TreeSet<Table>();
      List<ForeignKeyConstraint> list0 = DbAnalyzer.getForeignKeyConstraints((Collection<Table>) treeSet0);
      assertEquals(0, list0.size());
  }

  @Test
  public void test8()  throws Throwable  {
      LinkedHashSet<Table> linkedHashSet0 = new LinkedHashSet<Table>();
      linkedHashSet0.add((Table) null);
      // Undeclared exception!
      try {
        DbAnalyzer.getForeignKeyConstraints((Collection<Table>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      TreeSet<Table> treeSet0 = new TreeSet<Table>();
      List<Table> list0 = DbAnalyzer.getOrphans((Collection<Table>) treeSet0);
      List<Table> list1 = DbAnalyzer.getTablesWithIncrementingColumnNames((Collection<Table>) list0);
      assertTrue(list1.equals(list0));
  }

  @Test
  public void test10()  throws Throwable  {
      LinkedHashSet<Table> linkedHashSet0 = new LinkedHashSet<Table>();
      linkedHashSet0.add((Table) null);
      // Undeclared exception!
      try {
        DbAnalyzer.getOrphans((Collection<Table>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      LinkedHashSet<Table> linkedHashSet0 = new LinkedHashSet<Table>();
      List<TableColumn> list0 = DbAnalyzer.getMustBeUniqueNullableColumns((Collection<Table>) linkedHashSet0);
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test12()  throws Throwable  {
      TreeSet<Table> treeSet0 = new TreeSet<Table>();
      treeSet0.add((Table) null);
      // Undeclared exception!
      try {
        DbAnalyzer.getMustBeUniqueNullableColumns((Collection<Table>) treeSet0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      HashSet<Table> hashSet0 = new HashSet<Table>();
      hashSet0.add((Table) null);
      // Undeclared exception!
      try {
        DbAnalyzer.getTablesWithoutIndexes((Collection<Table>) hashSet0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      LinkedHashSet<Table> linkedHashSet0 = new LinkedHashSet<Table>();
      linkedHashSet0.add((Table) null);
      // Undeclared exception!
      try {
        DbAnalyzer.getTablesWithIncrementingColumnNames((Collection<Table>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      TreeSet<Table> treeSet0 = new TreeSet<Table>();
      List<Table> list0 = DbAnalyzer.getOrphans((Collection<Table>) treeSet0);
      List<Table> list1 = DbAnalyzer.getTablesWithOneColumn((Collection<Table>) list0);
      assertNotSame(list1, list0);
  }

  @Test
  public void test16()  throws Throwable  {
      HashSet<Table> hashSet0 = new HashSet<Table>();
      hashSet0.add((Table) null);
      // Undeclared exception!
      try {
        DbAnalyzer.getTablesWithOneColumn((Collection<Table>) hashSet0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test17()  throws Throwable  {
      TreeSet<Table> treeSet0 = new TreeSet<Table>();
      List<TableColumn> list0 = DbAnalyzer.getDefaultNullStringColumns((Collection<Table>) treeSet0);
      assertEquals(0, list0.size());
  }

  @Test
  public void test18()  throws Throwable  {
      LinkedList<Table> linkedList0 = new LinkedList<Table>();
      linkedList0.addLast((Table) null);
      // Undeclared exception!
      try {
        DbAnalyzer.getDefaultNullStringColumns((Collection<Table>) linkedList0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try {
        DbAnalyzer.getPopulatedSchemas((DatabaseMetaData) null, "=|Prh", true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
