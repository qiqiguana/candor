/*
 * This file was automatically generated by EvoSuite
 */

package net.sourceforge.schemaspy.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.List;
import net.sourceforge.schemaspy.model.Routine;
import net.sourceforge.schemaspy.model.RoutineParameter;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class RoutineEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Routine routine0 = new Routine("K#>.~26w)-13~", "K#>.~26w)-13~", "K#>.~26w)-13~", "K#>.~26w)-13~", "K#>.~26w)-13~", false, "K#>.~26w)-13~", "K#>.~26w)-13~", "K#>.~26w)-13~");
      List<RoutineParameter> list0 = routine0.getParameters();
      assertEquals(false, routine0.isDeterministic());
      assertNotNull(list0);
  }

  @Test
  public void test1()  throws Throwable  {
      Routine routine0 = new Routine("", "", (String) null, (String) null, "", true, (String) null, "", (String) null);
      String string0 = routine0.getComment();
      assertEquals(true, routine0.isDeterministic());
      assertNull(string0);
  }

  @Test
  public void test2()  throws Throwable  {
      Routine routine0 = new Routine("", "", "", "", "", false, "", "", "");
      String string0 = routine0.getSecurityType();
      assertNotNull(string0);
      assertEquals(false, routine0.isDeterministic());
  }

  @Test
  public void test3()  throws Throwable  {
      Routine routine0 = new Routine("", "", (String) null, (String) null, "", true, (String) null, "", (String) null);
      String string0 = routine0.getDataAccess();
      assertEquals(true, routine0.isDeterministic());
      assertNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      Routine routine0 = new Routine("", "", "", "", "", false, "", "", "");
      int int0 = routine0.compareTo(routine0);
      assertEquals(0, int0);
      assertEquals(false, routine0.isDeterministic());
  }

  @Test
  public void test5()  throws Throwable  {
      Routine routine0 = new Routine("", "", "", "", "", false, "", "", "");
      RoutineParameter routineParameter0 = new RoutineParameter("", "", "");
      routine0.addParameter(routineParameter0);
      assertEquals(false, routine0.isDeterministic());
  }

  @Test
  public void test6()  throws Throwable  {
      Routine routine0 = new Routine("K#>.~26w)-13~", "K#>.~26w)-13~", "K#>.~26w)-13~", "K#>.~26w)-13~", "K#>.~26w)-13~", false, "K#>.~26w)-13~", "K#>.~26w)-13~", "K#>.~26w)-13~");
      String string0 = routine0.getDefinitionLanguage();
      assertEquals(false, routine0.isDeterministic());
      assertNotNull(string0);
  }

  @Test
  public void test7()  throws Throwable  {
      Routine routine0 = new Routine("3w@8Jt.Bp&nE", "", "", "3w@8Jt.Bp&nE", "3w@8Jt.Bp&nE", true, "3w@8Jt.Bp&nE", "3w@8Jt.Bp&nE", "");
      boolean boolean0 = routine0.isDeterministic();
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      Routine routine0 = new Routine("K#>.~26w)-13~", "K#>.~26w)-13~", "K#>.~26w)-13~", "K#>.~26w)-13~", "K#>.~26w)-13~", false, "K#>.~26w)-13~", "K#>.~26w)-13~", "K#>.~26w)-13~");
      Routine routine1 = new Routine("-%|D.Y", "-%|D.Y", "K#>.~26w)-13~", "-%|D.Y", "-%|D.Y", false, "-%|D.Y", "", "-%|D.Y");
      int int0 = routine0.compareTo(routine1);
      assertEquals(30, int0);
      assertEquals("-%|D.Y", routine1.getType());
      assertEquals("-%|D.Y", routine1.getDefinition());
      assertEquals("", routine1.getSecurityType());
      assertEquals("-%|D.Y", routine1.getComment());
      assertEquals("-%|D.Y", routine1.getDefinitionLanguage());
      assertEquals("K#>.~26w)-13~", routine1.getReturnType());
      assertEquals("-%|D.Y", routine1.getName());
      assertEquals(false, routine0.isDeterministic());
      assertEquals("-%|D.Y", routine1.getDataAccess());
  }
}
