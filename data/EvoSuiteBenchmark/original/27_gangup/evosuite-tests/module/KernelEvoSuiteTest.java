/*
 * This file was automatically generated by EvoSuite
 */

package module;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.Vector;
import module.Kernel;
import module.Message;
import module.MessageDeliveryException;
import module.MessageFactory;
import module.Module;
import module.ModuleLoadException;
import module.ModuleRegisterException;
import module.ModuleSubscriptionException;
import module.ModuleUnloadException;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class KernelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      assertNotNull(kernel0);
      
      Thread thread0 = kernel0.getThread();
      assertEquals(6345L, thread0.getId());
      assertNotNull(thread0);
  }

  @Test
  public void test1()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      try {
        kernel0.unloadModule("*");
        fail("Expecting exception: ModuleUnloadException");
      } catch(ModuleUnloadException e) {
        /*
         * mod=*
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      Kernel kernel1 = kernel0.getKernel();
      assertNull(kernel1);
  }

  @Test
  public void test3()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      assertNotNull(kernel0);
      
      Object[] objectArray0 = new Object[9];
      Message message0 = MessageFactory.createWarningMessage("Bv.G/'ChcT/`>u -", objectArray0);
      try {
        kernel0.sendMessage(message0);
        fail("Expecting exception: MessageDeliveryException");
      } catch(MessageDeliveryException e) {
        /*
         * module.MessageDeliveryException: modnull,msg=Message[id=72,session=72,head=WARNING,recip=*,sender=null,state=1,ttl=3000,time=0,body=Reading string from locale failed: key=Bv.G/'ChcT/`>u -
         * This probably means that you have an old or otherwise
         * inaccurate locale file (maybe it's missing altogether)
         * or that the classpath does not contain the directory.]
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      try {
        kernel0.loadModule("ID:");
        fail("Expecting exception: ModuleLoadException");
      } catch(ModuleLoadException e) {
        /*
         * java.lang.ClassNotFoundException: Class 'ID:.class' should be in target project, but could not be found!
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      assertNotNull(kernel0);
      
      Vector<Module> vector0 = new Vector<Module>(563, (-1653));
      Object[] objectArray0 = new Object[7];
      vector0.add((Module) kernel0);
      Message message0 = MessageFactory.createErrorMessage("4Ot65B?KK", objectArray0);
      kernel0.sendMessageNotify((Collection<Module>) vector0, message0);
      assertEquals("Message[id=9,session=9,head=ERROR,recip=*,sender=null,state=1,ttl=3000,time=0,body=Reading string from locale failed: key=4Ot65B?KK\nThis probably means that you have an old or otherwise\ninaccurate locale file (maybe it's missing altogether)\nor that the classpath does not contain the directory.]", message0.toString());
      assertEquals(5, message0.getState());
  }

  @Test
  public void test6()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      kernel0.register((Module) kernel0);
  }

  @Test
  public void test7()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      try {
        kernel0.register((Module) null);
        fail("Expecting exception: ModuleRegisterException");
      } catch(ModuleRegisterException e) {
        /*
         * mod=null
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      try {
        kernel0.unloadModule((Module) kernel0);
        fail("Expecting exception: ModuleRegisterException");
      } catch(ModuleRegisterException e) {
        /*
         * mod=module.Kernel@1ea4f1ca: Not registered!
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      kernel0.subscribe((Module) null, "#4c:4e");
      kernel0.subscribe((Module) null, "#4c:4e");
  }

  @Test
  public void test10()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      kernel0.subscribe((Module) null, "RadioButtonMenuItem.checkIcon");
      kernel0.unsubscribe((Module) kernel0);
  }

  @Test
  public void test11()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      kernel0.unsubscribe((Module) kernel0, "*");
  }

  @Test
  public void test12()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      kernel0.subscribe((Module) null, "#4c:4e");
      kernel0.unsubscribe((Module) null, "#4c:4e");
  }

  @Test
  public void test13()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      kernel0.subscribe((Module) null, "RadioButtonMenuItem.checkIcon");
      kernel0.unsubscribe((Module) kernel0, "RadioButtonMenuItem.checkIcon");
  }

  @Test
  public void test14()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      assertNotNull(kernel0);
      
      Object[] objectArray0 = new Object[9];
      Message message0 = MessageFactory.createWarningMessage("Bv.G/'ChcT/`>u -", objectArray0);
      kernel0.processMessage(message0);
      assertEquals("Message[id=43,session=43,head=WARNING,recip=*,sender=null,state=1,ttl=3000,time=0,body=Reading string from locale failed: key=Bv.G/'ChcT/`>u -\nThis probably means that you have an old or otherwise\ninaccurate locale file (maybe it's missing altogether)\nor that the classpath does not contain the directory.]", message0.toString());
      assertEquals(43L, message0.getID());
  }
}
