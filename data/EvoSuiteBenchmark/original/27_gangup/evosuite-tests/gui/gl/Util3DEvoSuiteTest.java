/*
 * This file was automatically generated by EvoSuite
 */

package gui.gl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.xith3d.scenegraph.Appearance;
import com.xith3d.scenegraph.BranchGroup;
import com.xith3d.scenegraph.Canvas3D;
import com.xith3d.scenegraph.Geometry;
import com.xith3d.scenegraph.Group;
import com.xith3d.scenegraph.IndexedTriangleArray;
import com.xith3d.scenegraph.LineArray;
import com.xith3d.scenegraph.Link;
import com.xith3d.scenegraph.Morph;
import com.xith3d.scenegraph.Node;
import com.xith3d.scenegraph.QuadArray;
import com.xith3d.scenegraph.Shape3D;
import com.xith3d.scenegraph.SharedGroup;
import gui.gl.Util3D;
import java.awt.GraphicsConfiguration;
import javax.vecmath.Color3f;
import javax.vecmath.Point3f;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class Util3DEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Color3f color3f0 = new Color3f((-208.59392F), (-208.59392F), (-208.59392F));
      LineArray lineArray0 = (LineArray)Util3D.createRectangle((-19.452162F), (-1114.5267F), color3f0);
      assertEquals(0, lineArray0.getTexCoordSetCount());
      assertNotNull(lineArray0);
  }

  @Test
  public void test1()  throws Throwable  {
      float float0 = Util3D.deg((-1114.5267F));
      assertEquals((-63857.68F), float0, 0.01F);
  }

  @Test
  public void test2()  throws Throwable  {
      float float0 = Util3D.rad((-1114.5267F));
      assertEquals((-19.452162F), float0, 0.01F);
  }

  @Test
  public void test3()  throws Throwable  {
      QuadArray quadArray0 = (QuadArray)Util3D.createPlane((-1793.9939F), (-1793.9939F));
      assertEquals(4, quadArray0.getValidVertexCount());
  }

  @Test
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try {
        Util3D.setTexture2D("glSeco&daryColor3uiEXT(", (Appearance) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      Canvas3D canvas3D0 = new Canvas3D();
      Point3f point3f0 = new Point3f();
      // Undeclared exception!
      try {
        Util3D.toScreen(canvas3D0, point3f0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      Canvas3D canvas3D0 = new Canvas3D();
      // Undeclared exception!
      try {
        Util3D.castRay(canvas3D0, 1, 1);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      LineArray lineArray0 = (LineArray)Util3D.createCoordAxes(1693.442F);
      assertEquals(true, lineArray0.isChanged());
  }

  @Test
  public void test8()  throws Throwable  {
      Util3D util3D0 = new Util3D();
      assertNotNull(util3D0);
  }

  @Test
  public void test9()  throws Throwable  {
      Canvas3D canvas3D0 = new Canvas3D((GraphicsConfiguration) null, true);
      // Undeclared exception!
      try {
        Util3D.toWorld(canvas3D0, (-12), 564, 1178.8412F);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Morph morph0 = new Morph();
      // Undeclared exception!
      try {
        Util3D.setTexture2D((Shape3D) morph0, "\"1.");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try {
        Util3D.createTexturedPlane("glGetVariantFloatvEXT(", (float) (-1280L), (float) (-1280L));
        fail("Expecting exception: Error");
      } catch(Error e) {
        /*
         * Cannot load image glGetVariantFloatvEXT(
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Shape3D shape3D0 = Util3D.createGrid(35169, 35169, 35169);
      assertEquals(true, shape3D0.getBoundsAutoCompute());
  }

  @Test
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[8];
      IndexedTriangleArray indexedTriangleArray0 = new IndexedTriangleArray(1299, 1299, 86, intArray0, 0);
      Appearance appearance0 = new Appearance();
      Shape3D shape3D0 = new Shape3D((Geometry) indexedTriangleArray0, appearance0);
      // Undeclared exception!
      try {
        Util3D.setTexture2D(shape3D0, "", false, false, false);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Morph morph0 = new Morph();
      // Undeclared exception!
      try {
        Util3D.setTexture2D((Shape3D) morph0, "", true, true, true);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      SharedGroup sharedGroup0 = new SharedGroup();
      BranchGroup branchGroup0 = new BranchGroup();
      sharedGroup0.moveTo(branchGroup0);
      Util3D.setPickable((Node) branchGroup0, ">*4gB|D8N|W]h^YKO");
      assertEquals(true, branchGroup0.getPickable());
  }

  @Test
  public void test16()  throws Throwable  {
      SharedGroup sharedGroup0 = new SharedGroup();
      Link link0 = new Link(sharedGroup0);
      Util3D.setPickable((Node) link0, (String) null);
      assertEquals(true, link0.getRenderable());
  }

  @Test
  public void test17()  throws Throwable  {
      Util3D.setPickableRecursive((Group) null, "FN5[,n~4l(4i $q");
  }

  @Test
  public void test18()  throws Throwable  {
      SharedGroup sharedGroup0 = new SharedGroup();
      BranchGroup branchGroup0 = new BranchGroup();
      sharedGroup0.moveTo(branchGroup0);
      Util3D.setPickable((Node) sharedGroup0, "EQJ\"B8zN");
      assertEquals(true, sharedGroup0.getPickable());
  }
}
