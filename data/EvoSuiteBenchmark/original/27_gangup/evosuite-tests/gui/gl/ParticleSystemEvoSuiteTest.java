/*
 * This file was automatically generated by EvoSuite
 */

package gui.gl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.xith3d.datatypes.Coord3f;
import com.xith3d.scenegraph.Node;
import com.xith3d.scenegraph.Transform3D;
import gui.gl.ParticleManager;
import gui.gl.ParticleSystem;
import javax.vecmath.Tuple3d;
import javax.vecmath.Vector3d;
import javax.vecmath.Vector3f;
import org.evosuite.testcase.TestCaseExecutor;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ParticleSystemEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ParticleManager particleManager0 = new ParticleManager();
      Coord3f coord3f0 = new Coord3f();
      ParticleSystem particleSystem0 = particleManager0.createParticleSystem((-1102), coord3f0, 0, 0);
      assertNotNull(particleSystem0);
      
      int int0 = particleSystem0.getType();
      assertEquals((-1102), int0);
      assertEquals(0.1F, particleSystem0.particleLifetimeRandomness, 0.01F);
  }

  @Test
  public void test1()  throws Throwable  {
      ParticleManager particleManager0 = new ParticleManager();
      double[] doubleArray0 = new double[4];
      Vector3d vector3d0 = new Vector3d(doubleArray0);
      Vector3f vector3f0 = new Vector3f((Tuple3d) vector3d0);
      Coord3f coord3f0 = new Coord3f(vector3f0);
      ParticleSystem particleSystem0 = particleManager0.createParticleSystem(0, coord3f0, 0, 0);
      assertNotNull(particleSystem0);
      
      int int0 = particleSystem0.getParticleCount();
      assertEquals(0, int0);
      assertEquals(0.2F, particleSystem0.particleSize, 0.01F);
      assertEquals(0.0010F, particleSystem0.particleSpeedRandomness, 0.01F);
      assertEquals(0.05F, particleSystem0.particleLocationRandomness, 0.01F);
      assertEquals(0.0F, particleSystem0.particleAccelerationRandomness, 0.01F);
  }

  @Test
  public void test2()  throws Throwable  {
      ParticleManager particleManager0 = new ParticleManager();
      Vector3d vector3d0 = new Vector3d();
      Coord3f coord3f0 = new Coord3f((Tuple3d) vector3d0);
      ParticleSystem particleSystem0 = new ParticleSystem(particleManager0, 1, coord3f0, 1, 1);
      assertNotNull(particleSystem0);
      
      Transform3D transform3D0 = particleSystem0.getLocalToVworld();
      boolean boolean0 = particleSystem0.updateSystem(transform3D0);
      assertEquals(1841L, transform3D0.getStateId());
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      ParticleManager particleManager0 = new ParticleManager();
      Coord3f coord3f0 = new Coord3f();
      ParticleSystem particleSystem0 = particleManager0.createParticleSystem(2, coord3f0, 2, 2);
      assertNotNull(particleSystem0);
      assertEquals(0.02F, particleSystem0.particleLocationRandomness, 0.01F);
  }

  @Test
  public void test4()  throws Throwable  {
      ParticleManager particleManager0 = new ParticleManager();
      Vector3d vector3d0 = new Vector3d((double) 5, (double) 1563, (double) 1563);
      Coord3f coord3f0 = new Coord3f((Tuple3d) vector3d0);
      ParticleSystem particleSystem0 = particleManager0.createParticleSystem(5, coord3f0, 0, 0);
      assertNotNull(particleSystem0);
      
      Transform3D transform3D0 = Node.IDENTITY;
      boolean boolean0 = particleSystem0.updateSystem(transform3D0);
      assertEquals(true, boolean0);
      assertEquals(0.1F, particleSystem0.particleAccelerationRandomness, 0.01F);
  }

  @Test
  public void test5()  throws Throwable  {
      ParticleManager particleManager0 = new ParticleManager();
      float[] floatArray0 = new float[5];
      Coord3f coord3f0 = new Coord3f(floatArray0);
      ParticleSystem particleSystem0 = new ParticleSystem(particleManager0, 34818, coord3f0, 34818, (-891));
      Transform3D transform3D0 = Node.IDENTITY;
      particleSystem0.updateSystem(transform3D0);
  }
}
