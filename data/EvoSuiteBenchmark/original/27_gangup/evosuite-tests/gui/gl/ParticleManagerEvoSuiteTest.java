/*
 * This file was automatically generated by EvoSuite
 */

package gui.gl;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.xith3d.datatypes.Coord3f;
import com.xith3d.scenegraph.Node;
import com.xith3d.scenegraph.Transform3D;
import com.xith3d.scenegraph.TransformGroup;
import gui.gl.ParticleManager;
import gui.gl.ParticleSystem;
import org.evosuite.runtime.System;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ParticleManagerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ParticleManager particleManager0 = new ParticleManager();
      TransformGroup transformGroup0 = particleManager0.getParticles();
      assertEquals(false, transformGroup0.isLive());
  }

  @Test
  public void test1()  throws Throwable  {
      ParticleManager particleManager0 = new ParticleManager();
      Transform3D transform3D0 = Node.IDENTITY;
      particleManager0.updateSystems(transform3D0);
      assertEquals(true, transform3D0.isChanged());
  }

  @Test
  public void test2()  throws Throwable  {
      ParticleManager particleManager0 = new ParticleManager();
      Transform3D transform3D0 = Node.IDENTITY;
      Coord3f coord3f0 = new Coord3f();
      System.setCurrentTimeMillis((long) 1);
      ParticleSystem particleSystem0 = new ParticleSystem(particleManager0, 781, coord3f0, 1, (-603));
      particleManager0.addParticleSystem(particleSystem0);
      particleManager0.updateSystems(transform3D0);
      ParticleSystem particleSystem1 = particleManager0.createParticleSystem(781, coord3f0, 1, 1);
      assertSame(particleSystem1, particleSystem0);
      assertNotNull(particleSystem1);
      assertEquals(781, particleSystem1.getType());
  }

  @Test
  public void test3()  throws Throwable  {
      ParticleManager particleManager0 = new ParticleManager();
      Transform3D transform3D0 = Node.IDENTITY;
      Coord3f coord3f0 = new Coord3f();
      System.setCurrentTimeMillis((long) 1);
      particleManager0.createParticleSystem(781, coord3f0, 781, 1);
      particleManager0.updateSystems(transform3D0);
      assertEquals(1.0F, transform3D0.getScale(), 0.01F);
  }

  @Test
  public void test4()  throws Throwable  {
      ParticleManager particleManager0 = new ParticleManager();
      Transform3D transform3D0 = Node.IDENTITY;
      Coord3f coord3f0 = new Coord3f();
      System.setCurrentTimeMillis((long) 1);
      ParticleSystem particleSystem0 = new ParticleSystem(particleManager0, 781, coord3f0, 1, (-603));
      particleManager0.addParticleSystem(particleSystem0);
      particleManager0.updateSystems(transform3D0);
      // Undeclared exception!
      try {
        particleManager0.createParticleSystem(32808, coord3f0, (-603), 781);
        fail("Expecting exception: NegativeArraySizeException");
      } catch(NegativeArraySizeException e) {
      }
  }
}
