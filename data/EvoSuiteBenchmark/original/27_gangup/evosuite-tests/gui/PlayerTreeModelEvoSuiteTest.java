/*
 * This file was automatically generated by EvoSuite
 */

package gui;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import gui.GUIState;
import gui.PlayerTreeModel;
import java.util.Observable;
import javax.swing.JTree;
import javax.swing.event.TreeModelListener;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
import org.junit.BeforeClass;
import state.Action;
import state.GameState;
import state.Party;
import state.Player;

@RunWith(EvoSuiteRunner.class)
public class PlayerTreeModelEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      PlayerTreeModel playerTreeModel0 = new PlayerTreeModel();
      BasicTreeUI basicTreeUI0 = new BasicTreeUI();
      BasicTreeUI.TreeModelHandler basicTreeUI_TreeModelHandler0 = basicTreeUI0.new TreeModelHandler();
      playerTreeModel0.removeTreeModelListener((TreeModelListener) basicTreeUI_TreeModelHandler0);
  }

  @Test
  public void test1()  throws Throwable  {
      PlayerTreeModel playerTreeModel0 = new PlayerTreeModel();
      GUIState gUIState0 = new GUIState();
      playerTreeModel0.update((Observable) gUIState0, (Object) "ToolTipText");
      assertEquals(0, gUIState0.countObservers());
  }

  @Test
  public void test2()  throws Throwable  {
      PlayerTreeModel playerTreeModel0 = new PlayerTreeModel();
      GameState gameState0 = new GameState();
      playerTreeModel0.setState(gameState0);
      Action action0 = new Action();
      playerTreeModel0.update((Observable) gameState0, (Object) action0);
      assertEquals(0, gameState0.countObservers());
  }

  @Test
  public void test3()  throws Throwable  {
      PlayerTreeModel playerTreeModel0 = new PlayerTreeModel();
      Party party0 = (Party)playerTreeModel0.getRoot();
      playerTreeModel0.valueForPathChanged((TreePath) null, (Object) party0);
      assertEquals("", party0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      PlayerTreeModel playerTreeModel0 = new PlayerTreeModel();
      JTree jTree0 = new JTree((TreeModel) playerTreeModel0);
      Player player0 = new Player();
      playerTreeModel0.fireTreeStructureChanged((Party) player0);
      assertEquals("0.0.0.0", player0.getIP());
  }

  @Test
  public void test5()  throws Throwable  {
      PlayerTreeModel playerTreeModel0 = new PlayerTreeModel();
      Party party0 = (Party)playerTreeModel0.getRoot();
      Object object0 = playerTreeModel0.getChild((Object) party0, (-18));
      assertNull(object0);
  }

  @Test
  public void test6()  throws Throwable  {
      PlayerTreeModel playerTreeModel0 = new PlayerTreeModel();
      GameState gameState0 = new GameState(8L);
      playerTreeModel0.setState(gameState0);
      // Undeclared exception!
      try {
        playerTreeModel0.getChild((Object) playerTreeModel0, 0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
      }
  }

  @Test
  public void test7()  throws Throwable  {
      PlayerTreeModel playerTreeModel0 = new PlayerTreeModel();
      Party party0 = (Party)playerTreeModel0.getRoot();
      GameState gameState0 = new GameState((-1648L));
      playerTreeModel0.setState(gameState0);
      Player player0 = new Player(1, ")+HR!E|uhIq^tQ5+", ")+HR!E|uhIq^tQ5+", 1);
      gameState0.addPlayer(player0);
      Player player1 = (Player)playerTreeModel0.getChild((Object) party0, 0);
      assertNotNull(player1);
      
      int int0 = playerTreeModel0.getIndexOfChild((Object) player1, (Object) player1);
      assertEquals((-1), int0);
  }

  @Test
  public void test8()  throws Throwable  {
      PlayerTreeModel playerTreeModel0 = new PlayerTreeModel();
      Party party0 = (Party)playerTreeModel0.getRoot();
      GameState gameState0 = new GameState((-1648L));
      playerTreeModel0.setState(gameState0);
      Player player0 = new Player(1, "5;]Hq9\"ED$2K", "5;]Hq9\"ED$2K", 1);
      gameState0.addPlayer(player0);
      Player player1 = (Player)playerTreeModel0.getChild((Object) party0, 1);
      assertNull(player1);
  }

  @Test
  public void test9()  throws Throwable  {
      PlayerTreeModel playerTreeModel0 = new PlayerTreeModel();
      GameState gameState0 = new GameState(0L);
      playerTreeModel0.setState(gameState0);
      // Undeclared exception!
      try {
        playerTreeModel0.getChildCount((Object) playerTreeModel0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      PlayerTreeModel playerTreeModel0 = new PlayerTreeModel();
      int int0 = playerTreeModel0.getIndexOfChild((Object) playerTreeModel0, (Object) playerTreeModel0);
      assertEquals((-1), int0);
  }

  @Test
  public void test11()  throws Throwable  {
      PlayerTreeModel playerTreeModel0 = new PlayerTreeModel();
      GameState gameState0 = new GameState();
      playerTreeModel0.setState(gameState0);
      int int0 = playerTreeModel0.getIndexOfChild((Object) "-1741.0", (Object) null);
      assertEquals((-1), int0);
  }

  @Test
  public void test12()  throws Throwable  {
      PlayerTreeModel playerTreeModel0 = new PlayerTreeModel();
      GameState gameState0 = new GameState((-1648L));
      playerTreeModel0.setState(gameState0);
      int int0 = playerTreeModel0.getIndexOfChild((Object) null, (Object) null);
      assertEquals((-1), int0);
  }

  @Test
  public void test13()  throws Throwable  {
      PlayerTreeModel playerTreeModel0 = new PlayerTreeModel();
      Party party0 = (Party)playerTreeModel0.getRoot();
      assertNotNull(party0);
      
      GameState gameState0 = new GameState((-1648L));
      playerTreeModel0.setState(gameState0);
      Player player0 = new Player(1, ")+HR!E|uhIq^tQ5+", ")+HR!E|uhIq^tQ5+", 1);
      gameState0.addPlayer(player0);
      int int0 = playerTreeModel0.getIndexOfChild((Object) party0, (Object) party0);
      assertEquals((-1), int0);
  }

  @Test
  public void test14()  throws Throwable  {
      PlayerTreeModel playerTreeModel0 = new PlayerTreeModel();
      GameState gameState0 = new GameState((-1648L));
      playerTreeModel0.setState(gameState0);
      Player player0 = new Player(1, "5;]Hq9\"ED$2K", "5;]Hq9\"ED$2K", 1);
      gameState0.addPlayer(player0);
      JTree jTree0 = new JTree((TreeModel) playerTreeModel0);
      assertEquals(2, jTree0.getRowCount());
      assertNotNull(jTree0);
  }
}
