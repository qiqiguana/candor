/*
 * This file was automatically generated by EvoSuite
 */

package map;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import map.DirtyNode;
import map.Node;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DirtyNodeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode(1952L);
      assertNotNull(dirtyNode0);
      
      dirtyNode0.setParent((Node) dirtyNode0);
      assertEquals(1952L, dirtyNode0.bits);
      assertEquals("DirtyNode[x=0.0,y=0.0,score=0.0]", dirtyNode0.toString());
      assertEquals(0.0F, dirtyNode0.getX(), 0.01F);
  }

  @Test
  public void test1()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode((long) 0, 0, 0);
      assertNotNull(dirtyNode0);
      
      dirtyNode0.setData((long) 0);
      assertEquals("DirtyNode[x=0.0,y=0.0,score=0.0]", dirtyNode0.toString());
      assertEquals(0.0F, dirtyNode0.getX(), 0.01F);
  }

  @Test
  public void test2()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode(0L);
      assertNotNull(dirtyNode0);
      
      float float0 = dirtyNode0.getCost();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("DirtyNode[x=0.0,y=0.0,score=0.0]", dirtyNode0.toString());
  }

  @Test
  public void test3()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode((-1594L), 1353, 1353);
      assertNotNull(dirtyNode0);
      
      dirtyNode0.setZ((float) 1353);
      assertEquals(1353.0F, dirtyNode0.z, 0.01F);
      assertEquals("DirtyNode[x=1353.0,y=1353.0,score=0.0]", dirtyNode0.toString());
  }

  @Test
  public void test4()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode((-392L), 133, 133);
      assertNotNull(dirtyNode0);
      
      long long0 = dirtyNode0.getData();
      assertEquals("DirtyNode[x=133.0,y=133.0,score=0.0]", dirtyNode0.toString());
      assertEquals((-392L), long0);
  }

  @Test
  public void test5()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode((long) 0);
      assertNotNull(dirtyNode0);
      
      dirtyNode0.setLocation(0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, dirtyNode0.z, 0.01F);
      assertEquals("DirtyNode[x=0.0,y=0.0,score=0.0]", dirtyNode0.toString());
  }

  @Test
  public void test6()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode((long) 0, 0, 0);
      assertNotNull(dirtyNode0);
      
      dirtyNode0.setX(0.0F);
      assertEquals("DirtyNode[x=0.0,y=0.0,score=0.0]", dirtyNode0.toString());
      assertEquals(0.0F, dirtyNode0.getY(), 0.01F);
  }

  @Test
  public void test7()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode((long) 0, 0, 0);
      assertNotNull(dirtyNode0);
      
      dirtyNode0.setY(0.0F);
      assertEquals("DirtyNode[x=0.0,y=0.0,score=0.0]", dirtyNode0.toString());
      assertEquals(0.0F, dirtyNode0.getX(), 0.01F);
  }

  @Test
  public void test8()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode(0L);
      assertNotNull(dirtyNode0);
      
      dirtyNode0.getChildNode(1);
      assertEquals("DirtyNode[x=0.0,y=0.0,score=0.0]", dirtyNode0.toString());
      assertEquals(0.0F, dirtyNode0.getY(), 0.01F);
  }

  @Test
  public void test9()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode((-1594L), 1353, 1353);
      assertNotNull(dirtyNode0);
      
      dirtyNode0.addChildNode((Node) dirtyNode0);
      assertEquals((-1594L), dirtyNode0.bits);
      assertEquals("DirtyNode[x=1353.0,y=1353.0,score=0.0]", dirtyNode0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode(1673L, (-10), (-10));
      assertNotNull(dirtyNode0);
      
      // Undeclared exception!
      try {
        dirtyNode0.isSolid();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Method not implemented!
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode((-392L), 133, 133);
      assertNotNull(dirtyNode0);
      
      dirtyNode0.setChildNode(0, (Node) dirtyNode0);
      assertEquals("DirtyNode[x=133.0,y=133.0,score=0.0]", dirtyNode0.toString());
      assertEquals((-392L), dirtyNode0.bits);
  }

  @Test
  public void test12()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode((long) 0, 0, 0);
      assertNotNull(dirtyNode0);
      
      float float0 = dirtyNode0.getVisibility();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("DirtyNode[x=0.0,y=0.0,score=0.0]", dirtyNode0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode((long) 0, 0, 0);
      assertNotNull(dirtyNode0);
      
      dirtyNode0.setVisibility(1.0F);
      boolean boolean0 = dirtyNode0.isVisible();
      assertEquals(1.0F, dirtyNode0.visibility, 0.01F);
      assertEquals(true, boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode((-392L), 133, 133);
      assertNotNull(dirtyNode0);
      
      dirtyNode0.setLocation(133, 133);
      assertEquals("DirtyNode[x=133.0,y=133.0,score=0.0]", dirtyNode0.toString());
      assertEquals((-392L), dirtyNode0.bits);
  }

  @Test
  public void test15()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode(1952L);
      assertNotNull(dirtyNode0);
      
      dirtyNode0.getParent();
      assertEquals(1952L, dirtyNode0.bits);
      assertEquals("DirtyNode[x=0.0,y=0.0,score=0.0]", dirtyNode0.toString());
      assertEquals(0.0F, dirtyNode0.getX(), 0.01F);
  }

  @Test
  public void test16()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode(17L, (-932), (-932));
      assertNotNull(dirtyNode0);
      
      // Undeclared exception!
      try {
        dirtyNode0.setSolid(true);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Method not implemented!
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode(0L);
      assertNotNull(dirtyNode0);
      
      Node[] nodeArray0 = dirtyNode0.getAllChildren();
      assertEquals("DirtyNode[x=0.0,y=0.0,score=0.0]", dirtyNode0.toString());
      assertNotNull(nodeArray0);
      assertEquals(0.0F, dirtyNode0.getX(), 0.01F);
  }

  @Test
  public void test18()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode(0L);
      assertNotNull(dirtyNode0);
      
      float float0 = dirtyNode0.getScore();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("DirtyNode[x=0.0,y=0.0,score=0.0]", dirtyNode0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode((long) 0);
      assertNotNull(dirtyNode0);
      
      boolean boolean0 = dirtyNode0.equals((Object) dirtyNode0);
      assertEquals("DirtyNode[x=0.0,y=0.0,score=0.0]", dirtyNode0.toString());
      assertEquals(true, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode((-392L), 133, 133);
      assertNotNull(dirtyNode0);
      
      float float0 = dirtyNode0.getTotal();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("DirtyNode[x=133.0,y=133.0,score=0.0]", dirtyNode0.toString());
      assertEquals((-392L), dirtyNode0.bits);
  }

  @Test
  public void test21()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode((-392L), 133, 133);
      assertNotNull(dirtyNode0);
      
      float float0 = dirtyNode0.getX();
      assertEquals("DirtyNode[x=133.0,y=133.0,score=0.0]", dirtyNode0.toString());
      assertEquals(133.0F, float0, 0.01F);
      assertEquals((-392L), dirtyNode0.bits);
  }

  @Test
  public void test22()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode((-392L), 133, 133);
      assertNotNull(dirtyNode0);
      
      String string0 = dirtyNode0.toString();
      assertNotNull(string0);
      assertEquals("DirtyNode[x=133.0,y=133.0,score=0.0]", string0);
      assertEquals((-392L), dirtyNode0.bits);
  }

  @Test
  public void test23()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode(0L, 1, 1);
      assertNotNull(dirtyNode0);
      
      int int0 = dirtyNode0.compareTo((Object) dirtyNode0);
      assertEquals("DirtyNode[x=1.0,y=1.0,score=0.0]", dirtyNode0.toString());
      assertEquals(0, int0);
  }

  @Test
  public void test24()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode((-392L), 133, 133);
      assertNotNull(dirtyNode0);
      
      dirtyNode0.setTotal(0.0F);
      assertEquals(0.0F, dirtyNode0.total, 0.01F);
      assertEquals((-392L), dirtyNode0.bits);
      assertEquals("DirtyNode[x=133.0,y=133.0,score=0.0]", dirtyNode0.toString());
      assertEquals(133.0F, dirtyNode0.getY(), 0.01F);
  }

  @Test
  public void test25()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode(17L, (-932), (-932));
      assertNotNull(dirtyNode0);
      
      float float0 = dirtyNode0.getY();
      assertEquals(17L, dirtyNode0.bits);
      assertEquals("DirtyNode[x=-932.0,y=-932.0,score=0.0]", dirtyNode0.toString());
      assertEquals((-932.0F), float0, 0.01F);
  }

  @Test
  public void test26()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode(0L);
      assertNotNull(dirtyNode0);
      
      float float0 = dirtyNode0.getZ();
      assertEquals("DirtyNode[x=0.0,y=0.0,score=0.0]", dirtyNode0.toString());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test27()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode(0L, 1, 1);
      assertNotNull(dirtyNode0);
      
      dirtyNode0.setCost((float) 0L);
      assertEquals(0.0F, dirtyNode0.cost, 0.01F);
      assertEquals("DirtyNode[x=1.0,y=1.0,score=0.0]", dirtyNode0.toString());
      assertEquals(1.0F, dirtyNode0.getX(), 0.01F);
  }

  @Test
  public void test28()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode(1673L, (-10), (-10));
      assertNotNull(dirtyNode0);
      
      dirtyNode0.setClosed(false);
      assertEquals("DirtyNode[x=-10.0,y=-10.0,score=0.0]", dirtyNode0.toString());
      assertEquals(1673L, dirtyNode0.bits);
      assertEquals(0, dirtyNode0.state);
      assertEquals(false, dirtyNode0.isOpen());
  }

  @Test
  public void test29()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode(0L);
      assertNotNull(dirtyNode0);
      
      dirtyNode0.setClosed(true);
      boolean boolean0 = dirtyNode0.isClosed();
      assertEquals(2, dirtyNode0.state);
      assertEquals(true, boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode(0L);
      assertNotNull(dirtyNode0);
      
      boolean boolean0 = dirtyNode0.isClosed();
      assertEquals("DirtyNode[x=0.0,y=0.0,score=0.0]", dirtyNode0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test31()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode(0L, 1, 1);
      assertNotNull(dirtyNode0);
      
      dirtyNode0.setOpen(false);
      assertEquals("DirtyNode[x=1.0,y=1.0,score=0.0]", dirtyNode0.toString());
      assertEquals(0, dirtyNode0.state);
      assertEquals(false, dirtyNode0.isClosed());
  }

  @Test
  public void test32()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode(0L);
      assertNotNull(dirtyNode0);
      
      dirtyNode0.setOpen(true);
      boolean boolean0 = dirtyNode0.isOpen();
      assertEquals(1, dirtyNode0.state);
      assertEquals(true, boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode(0L, 1, 1);
      assertNotNull(dirtyNode0);
      
      boolean boolean0 = dirtyNode0.isOpen();
      assertEquals("DirtyNode[x=1.0,y=1.0,score=0.0]", dirtyNode0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test34()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode(1862L);
      assertNotNull(dirtyNode0);
      
      dirtyNode0.setVisible(false);
      assertEquals("DirtyNode[x=0.0,y=0.0,score=0.0]", dirtyNode0.toString());
      assertEquals(0.0F, dirtyNode0.visibility, 0.01F);
      assertEquals(1862L, dirtyNode0.bits);
  }

  @Test
  public void test35()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode(0L);
      assertNotNull(dirtyNode0);
      
      dirtyNode0.setVisible(true);
      assertEquals(1.0F, dirtyNode0.visibility, 0.01F);
      assertEquals(0.0F, dirtyNode0.getX(), 0.01F);
  }

  @Test
  public void test36()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode(0L);
      assertNotNull(dirtyNode0);
      
      boolean boolean0 = dirtyNode0.isVisible();
      assertEquals(false, boolean0);
      assertEquals("DirtyNode[x=0.0,y=0.0,score=0.0]", dirtyNode0.toString());
  }

  @Test
  public void test37()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode(1952L);
      assertNotNull(dirtyNode0);
      
      DirtyNode dirtyNode1 = new DirtyNode(1952L, 0, 0);
      dirtyNode0.setScore((-1779.9558F));
      int int0 = dirtyNode0.compareTo((Object) dirtyNode1);
      assertEquals((-1779.9558F), dirtyNode0.score, 0.01F);
      assertEquals((-1), int0);
  }

  @Test
  public void test38()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode(1952L);
      assertNotNull(dirtyNode0);
      
      DirtyNode dirtyNode1 = new DirtyNode(1952L, 0, 0);
      dirtyNode0.setScore((-1779.9558F));
      int int0 = dirtyNode1.compareTo(dirtyNode0);
      assertEquals((-1779.9558F), dirtyNode0.score, 0.01F);
      assertEquals(1, int0);
  }

  @Test
  public void test39()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode((-392L), 133, 133);
      assertNotNull(dirtyNode0);
      
      DirtyNode dirtyNode1 = new DirtyNode((long) 0, 0, 0);
      boolean boolean0 = dirtyNode0.equals(dirtyNode1);
      assertEquals(false, boolean0);
      assertEquals((-392L), dirtyNode0.bits);
      assertEquals("DirtyNode[x=133.0,y=133.0,score=0.0]", dirtyNode0.toString());
  }

  @Test
  public void test40()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode((long) 0);
      assertNotNull(dirtyNode0);
      
      DirtyNode dirtyNode1 = new DirtyNode((-624L), 0, 16);
      boolean boolean0 = dirtyNode1.equals((Object) dirtyNode0);
      assertFalse(dirtyNode0.equals(dirtyNode1));
      assertEquals(false, boolean0);
      assertEquals("DirtyNode[x=0.0,y=16.0,score=0.0]", dirtyNode1.toString());
      assertEquals((-624L), dirtyNode1.bits);
  }
}
