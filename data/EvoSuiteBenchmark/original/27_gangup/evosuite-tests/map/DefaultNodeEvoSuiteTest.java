/*
 * This file was automatically generated by EvoSuite
 */

package map;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import map.DefaultNode;
import map.DirtyNode;
import map.Node;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DefaultNodeEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode((Node) null, 1L, 2, 2);
      long long0 = defaultNode0.getData();
      assertEquals("DefaultNode[x=2.0,y=2.0,score=0.0]", defaultNode0.toString());
      assertEquals(1L, long0);
      assertEquals(false, defaultNode0.isOpen());
  }

  @Test
  public void test1()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode(1792L);
      DefaultNode defaultNode0 = new DefaultNode((Node) dirtyNode0, (long) 0, 0, (-1781));
      int int0 = defaultNode0.compareTo((Object) defaultNode0);
      assertEquals(false, defaultNode0.isOpen());
      assertEquals(0, int0);
      assertEquals("DefaultNode[x=0.0,y=-1781.0,score=0.0]", defaultNode0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      float float0 = defaultNode0.getY();
      assertEquals("DefaultNode[x=0.0,y=0.0,score=0.0]", defaultNode0.toString());
      assertEquals(false, defaultNode0.isOpen());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      float float0 = defaultNode0.getX();
      assertEquals(false, defaultNode0.isOpen());
      assertEquals("DefaultNode[x=0.0,y=0.0,score=0.0]", defaultNode0.toString());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      // Undeclared exception!
      try {
        defaultNode0.setSolid(false);
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Method not implemented!
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      defaultNode0.setVisibility((float) 0L);
      assertEquals("DefaultNode[x=0.0,y=0.0,score=0.0]", defaultNode0.toString());
      assertEquals(false, defaultNode0.isOpen());
      assertEquals(0.0F, defaultNode0.getVisibility(), 0.01F);
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      float float0 = defaultNode0.getTotal();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(false, defaultNode0.isOpen());
      assertEquals("DefaultNode[x=0.0,y=0.0,score=0.0]", defaultNode0.toString());
  }

  @Test
  public void test7()  throws Throwable  {
      DirtyNode dirtyNode0 = new DirtyNode(1792L);
      DefaultNode defaultNode0 = new DefaultNode((Node) dirtyNode0, (long) 0, 0, (-1781));
      defaultNode0.setX(0.0F);
      assertEquals(false, defaultNode0.isOpen());
      assertEquals("DefaultNode[x=0.0,y=-1781.0,score=0.0]", defaultNode0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      String string0 = defaultNode0.toString();
      assertEquals(false, defaultNode0.isOpen());
      assertEquals("DefaultNode[x=0.0,y=0.0,score=0.0]", string0);
      assertNotNull(string0);
  }

  @Test
  public void test9()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      float float0 = defaultNode0.getCost();
      assertEquals(false, defaultNode0.isOpen());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("DefaultNode[x=0.0,y=0.0,score=0.0]", defaultNode0.toString());
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      // Undeclared exception!
      try {
        defaultNode0.setChildNode((-1841), (Node) defaultNode0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -1841
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode((Node) null, 1L, 2, 2);
      Node[] nodeArray0 = defaultNode0.getAllChildren();
      assertEquals(false, defaultNode0.isOpen());
      assertNotNull(nodeArray0);
      assertEquals(1L, defaultNode0.bits);
      assertEquals("DefaultNode[x=2.0,y=2.0,score=0.0]", defaultNode0.toString());
      assertEquals(2.0F, defaultNode0.getX(), 0.01F);
  }

  @Test
  public void test12()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      float float0 = defaultNode0.getScore();
      assertEquals(false, defaultNode0.isOpen());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("DefaultNode[x=0.0,y=0.0,score=0.0]", defaultNode0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      defaultNode0.setCost((float) 0L);
      assertEquals(false, defaultNode0.isOpen());
      assertEquals("DefaultNode[x=0.0,y=0.0,score=0.0]", defaultNode0.toString());
      assertEquals(0.0F, defaultNode0.getCost(), 0.01F);
  }

  @Test
  public void test14()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode((Node) null, 1L, 2, 2);
      defaultNode0.addChildNode((Node) defaultNode0);
      assertEquals(1L, defaultNode0.bits);
      assertEquals("DefaultNode[x=2.0,y=2.0,score=0.0]", defaultNode0.toString());
      assertEquals(false, defaultNode0.isOpen());
      assertEquals(2.0F, defaultNode0.getX(), 0.01F);
  }

  @Test
  public void test15()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      defaultNode0.setParent((Node) defaultNode0);
      assertEquals("DefaultNode[x=0.0,y=0.0,score=0.0]", defaultNode0.toString());
      assertEquals(false, defaultNode0.isOpen());
  }

  @Test
  public void test16()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      defaultNode0.setY((float) 0L);
      assertEquals("DefaultNode[x=0.0,y=0.0,score=0.0]", defaultNode0.toString());
      assertEquals(false, defaultNode0.isOpen());
  }

  @Test
  public void test17()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      float float0 = defaultNode0.getZ();
      assertEquals("DefaultNode[x=0.0,y=0.0,score=0.0]", defaultNode0.toString());
      assertEquals(false, defaultNode0.isOpen());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test18()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      defaultNode0.setData(0L);
      assertEquals("DefaultNode[x=0.0,y=0.0,score=0.0]", defaultNode0.toString());
      assertEquals(false, defaultNode0.isOpen());
  }

  @Test
  public void test19()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      defaultNode0.setLocation(1258, 1258);
      assertEquals(1258.0F, defaultNode0.getX(), 0.01F);
      assertEquals("DefaultNode[x=1258.0,y=1258.0,score=0.0]", defaultNode0.toString());
  }

  @Test
  public void test20()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode((Node) null, 1L, 2, 2);
      defaultNode0.getParent();
      assertEquals("DefaultNode[x=2.0,y=2.0,score=0.0]", defaultNode0.toString());
      assertEquals(false, defaultNode0.isOpen());
      assertEquals(1L, defaultNode0.bits);
      assertEquals(2.0F, defaultNode0.getX(), 0.01F);
  }

  @Test
  public void test21()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      defaultNode0.setTotal((float) 1607L);
      assertEquals(1607.0F, defaultNode0.getTotal(), 0.01F);
      assertEquals(0.0F, defaultNode0.getX(), 0.01F);
  }

  @Test
  public void test22()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      // Undeclared exception!
      try {
        defaultNode0.isSolid();
        fail("Expecting exception: RuntimeException");
      } catch(RuntimeException e) {
        /*
         * Method not implemented!
         */
      }
  }

  @Test
  public void test23()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      defaultNode0.setZ((float) 0L);
      assertEquals("DefaultNode[x=0.0,y=0.0,score=0.0]", defaultNode0.toString());
      assertEquals(false, defaultNode0.isOpen());
      assertEquals(0.0F, defaultNode0.getZ(), 0.01F);
  }

  @Test
  public void test24()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      float float0 = defaultNode0.getVisibility();
      assertEquals(false, defaultNode0.isOpen());
      assertEquals("DefaultNode[x=0.0,y=0.0,score=0.0]", defaultNode0.toString());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test25()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      // Undeclared exception!
      try {
        defaultNode0.getChildNode(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * Array index out of range: 0
         */
      }
  }

  @Test
  public void test26()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      defaultNode0.setLocation((-1635.1593F), (float) 0L, (-1635.1593F));
      assertEquals((-1635.1593F), defaultNode0.getX(), 0.01F);
      assertEquals(0.0F, defaultNode0.getTotal(), 0.01F);
  }

  @Test
  public void test27()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode((Node) null, 1L, 2, 2);
      defaultNode0.setClosed(false);
      assertEquals(false, defaultNode0.isOpen());
      assertEquals(false, defaultNode0.isClosed());
      assertEquals("DefaultNode[x=2.0,y=2.0,score=0.0]", defaultNode0.toString());
      assertEquals(1L, defaultNode0.bits);
  }

  @Test
  public void test28()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      assertEquals(false, defaultNode0.isClosed());
      
      defaultNode0.setClosed(true);
      boolean boolean0 = defaultNode0.isClosed();
      assertEquals(true, defaultNode0.isClosed());
      assertEquals(true, boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      boolean boolean0 = defaultNode0.isClosed();
      assertEquals(false, boolean0);
      assertEquals("DefaultNode[x=0.0,y=0.0,score=0.0]", defaultNode0.toString());
      assertEquals(false, defaultNode0.isOpen());
  }

  @Test
  public void test30()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      defaultNode0.setOpen(false);
      assertEquals(false, defaultNode0.isOpen());
      assertEquals(false, defaultNode0.isClosed());
      assertEquals("DefaultNode[x=0.0,y=0.0,score=0.0]", defaultNode0.toString());
  }

  @Test
  public void test31()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      assertEquals(false, defaultNode0.isOpen());
      
      defaultNode0.setOpen(true);
      boolean boolean0 = defaultNode0.isOpen();
      assertEquals(true, defaultNode0.isOpen());
      assertEquals(true, boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      boolean boolean0 = defaultNode0.isOpen();
      assertEquals("DefaultNode[x=0.0,y=0.0,score=0.0]", defaultNode0.toString());
      assertEquals(false, boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      defaultNode0.setVisible(false);
      assertEquals("DefaultNode[x=0.0,y=0.0,score=0.0]", defaultNode0.toString());
      assertEquals(0.0F, defaultNode0.getVisibility(), 0.01F);
      assertEquals(false, defaultNode0.isOpen());
  }

  @Test
  public void test34()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      defaultNode0.setVisible(true);
      boolean boolean0 = defaultNode0.isVisible();
      assertEquals(1.0F, defaultNode0.getVisibility(), 0.01F);
      assertEquals(true, boolean0);
  }

  @Test
  public void test35()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      boolean boolean0 = defaultNode0.isVisible();
      assertEquals(false, boolean0);
      assertEquals(false, defaultNode0.isOpen());
      assertEquals("DefaultNode[x=0.0,y=0.0,score=0.0]", defaultNode0.toString());
  }

  @Test
  public void test36()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      defaultNode0.setScore((-121.10783F));
      DefaultNode defaultNode1 = new DefaultNode();
      int int0 = defaultNode0.compareTo(defaultNode1);
      assertEquals((-121.10783F), defaultNode0.getScore(), 0.01F);
      assertEquals((-1), int0);
  }

  @Test
  public void test37()  throws Throwable  {
      DefaultNode defaultNode0 = new DefaultNode();
      defaultNode0.setScore((-121.10783F));
      DefaultNode defaultNode1 = new DefaultNode();
      int int0 = defaultNode1.compareTo(defaultNode0);
      assertEquals((-121.10783F), defaultNode0.getScore(), 0.01F);
      assertEquals(1, int0);
  }
}
