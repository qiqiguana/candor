/*
 * This file was automatically generated by EvoSuite
 */

package map;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import map.DefaultNode;
import map.DefaultPath;
import map.Node;
import map.Path;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class DefaultPathEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultPath defaultPath0 = new DefaultPath();
      int int0 = defaultPath0.length();
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      Node[] nodeArray0 = new Node[5];
      DefaultPath defaultPath0 = new DefaultPath(nodeArray0);
      assertNotNull(defaultPath0);
      
      boolean boolean0 = defaultPath0.isEmpty();
      assertEquals(true, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      Node[] nodeArray0 = new Node[5];
      DefaultPath defaultPath0 = new DefaultPath(nodeArray0);
      Node[] nodeArray1 = defaultPath0.asNodeArray();
      assertFalse(nodeArray1.equals(nodeArray0));
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultPath defaultPath0 = new DefaultPath();
      // Undeclared exception!
      try {
        defaultPath0.next();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * Array index out of range: 0
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Node[] nodeArray0 = new Node[5];
      DefaultNode defaultNode0 = new DefaultNode();
      DefaultNode defaultNode1 = new DefaultNode((Node) defaultNode0, 7L, 0, 0);
      nodeArray0[4] = (Node) defaultNode1;
      DefaultPath defaultPath0 = new DefaultPath(nodeArray0);
      assertNotNull(defaultPath0);
      
      DefaultPath defaultPath1 = new DefaultPath((Path) defaultPath0);
      assertNotNull(defaultPath1);
      assertEquals("DefaultNode[x=0.0,y=0.0,score=0.0]\n", defaultPath1.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultPath defaultPath0 = new DefaultPath();
      defaultPath0.reconstruct();
      assertEquals(true, defaultPath0.isEmpty());
  }

  @Test
  public void test6()  throws Throwable  {
      Node[] nodeArray0 = new Node[5];
      DefaultPath defaultPath0 = new DefaultPath(nodeArray0);
      String string0 = defaultPath0.toString();
      assertEquals("", string0);
  }

  @Test
  public void test7()  throws Throwable  {
      Node[] nodeArray0 = new Node[5];
      DefaultNode defaultNode0 = new DefaultNode();
      DefaultNode defaultNode1 = new DefaultNode((Node) defaultNode0, 7L, 0, 0);
      nodeArray0[4] = (Node) defaultNode1;
      DefaultPath defaultPath0 = new DefaultPath(nodeArray0);
      assertNotNull(defaultPath0);
      
      String string0 = defaultPath0.toString();
      assertEquals("DefaultNode[x=0.0,y=0.0,score=0.0]\n", string0);
      assertNotNull(string0);
  }
}
