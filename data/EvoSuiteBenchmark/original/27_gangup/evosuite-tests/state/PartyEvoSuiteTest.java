/*
 * This file was automatically generated by EvoSuite
 */

package state;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.LinkedList;
import org.junit.BeforeClass;
import state.Party;

@RunWith(EvoSuiteRunner.class)
public class PartyEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Party party0 = new Party();
      int int0 = party0.getId();
      assertEquals((-1), int0);
  }

  @Test
  public void test1()  throws Throwable  {
      Party party0 = new Party();
      party0.toString();
      assertEquals((-1), party0.id);
      assertEquals(-1, party0.getId());
  }

  @Test
  public void test2()  throws Throwable  {
      Party party0 = new Party();
      Party party1 = party0.gangBoss();
      assertEquals((-1), party0.id);
      assertNotNull(party1);
      assertEquals(true, party0.isBoss());
  }

  @Test
  public void test3()  throws Throwable  {
      Party party0 = new Party();
      party0.add(party0);
      // Undeclared exception!
      try {
        party0.gangBoss();
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      Party party0 = new Party();
      party0.add(party0);
      party0.add(party0);
      assertEquals(false, party0.isBoss());
      
      party0.remove(party0);
      assertEquals(true, party0.isBoss());
  }

  @Test
  public void test5()  throws Throwable  {
      Party party0 = new Party();
      party0.remove((Party) null);
      assertEquals((-1), party0.id);
      assertEquals(-1, party0.getId());
  }

  @Test
  public void test6()  throws Throwable  {
      Party party0 = new Party();
      party0.remove(party0);
      assertEquals((-1), party0.id);
      assertEquals(-1, party0.getId());
  }

  @Test
  public void test7()  throws Throwable  {
      Party party0 = new Party();
      LinkedList<Party> linkedList0 = party0.getSubparty();
      assertEquals(1, linkedList0.size());
      assertNotNull(linkedList0);
      assertEquals((-1), party0.id);
  }

  @Test
  public void test8()  throws Throwable  {
      Party party0 = new Party();
      party0.add(party0);
      // Undeclared exception!
      try {
        party0.getSubparty();
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }
}
