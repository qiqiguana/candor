/*
 * This file was automatically generated by EvoSuite
 */


import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.HashMap;
import java.util.Random;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class EntityEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Entity entity0 = new Entity((-2.164158430026921), (-2.164158430026921), (-1));
      assertNotNull(entity0);
      
      double double0 = entity0.getX();
      assertEquals(-1, entity0.getTeam());
      assertEquals((-2.164158430026921), double0, 0.01D);
  }

  @Test
  public void test1()  throws Throwable  {
      Entity entity0 = new Entity((-20.924804293155262), (-20.924804293155262), (-1771));
      assertNotNull(entity0);
      
      double double0 = entity0.getVx();
      assertEquals(-1771, entity0.getTeam());
      assertEquals(0.0, double0, 0.01D);
      assertEquals((-20.924804293155262), entity0.getX(), 0.01D);
  }

  @Test
  public void test2()  throws Throwable  {
      Entity entity0 = new Entity((-1650.2535845584132), (-1650.2535845584132), (-192));
      assertNotNull(entity0);
      
      entity0.setVx(15.0);
      assertEquals(15.0, entity0.getVx(), 0.01D);
      assertEquals(-192, entity0.getTeam());
  }

  @Test
  public void test3()  throws Throwable  {
      Entity entity0 = new Entity((-1650.2535845584132), (-1650.2535845584132), (-192));
      assertNotNull(entity0);
      
      double double0 = entity0.getY();
      assertEquals(-192, entity0.getTeam());
      assertEquals((-1650.2535845584132), double0, 0.01D);
      assertEquals((-1650.2535845584132), entity0.getX(), 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      Entity entity0 = new Entity((-1650.2535845584132), (-1650.2535845584132), (-192));
      assertNotNull(entity0);
      
      double double0 = entity0.getVy();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(-192, entity0.getTeam());
      assertEquals((-1650.2535845584132), entity0.getX(), 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      Entity entity0 = new Entity((-20.924804293155262), (-20.924804293155262), (-1771));
      assertNotNull(entity0);
      
      entity0.setY((double) (-1771));
      assertEquals((-1771.0), entity0.getY(), 0.01D);
      assertEquals(-1771, entity0.getTeam());
  }

  @Test
  public void test6()  throws Throwable  {
      Entity entity0 = new Entity((-7.370232386979949), (double) 870, 870);
      assertNotNull(entity0);
      
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      entity0.setProperties(hashMap0);
      assertEquals(870, entity0.getTeam());
      assertEquals((-7.370232386979949), entity0.getX(), 0.01D);
  }

  @Test
  public void test7()  throws Throwable  {
      Entity entity0 = new Entity((-2.164158430026921), (-2.164158430026921), (-1));
      assertNotNull(entity0);
      
      // Undeclared exception!
      try {
        entity0.integrate((Server) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      Entity entity0 = new Entity((-1650.2535845584132), (-1650.2535845584132), (-192));
      assertNotNull(entity0);
      
      entity0.setSize((double) (-192));
      assertEquals((-192.0), entity0.getSize(), 0.01D);
      assertEquals(-192, entity0.getTeam());
  }

  @Test
  public void test9()  throws Throwable  {
      Entity entity0 = new Entity((-20.924804293155262), (-20.924804293155262), (-1771));
      assertNotNull(entity0);
      
      entity0.setVy((-20.924804293155262));
      assertEquals((-20.924804293155262), entity0.getVy(), 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      Entity entity0 = new Entity((-2.164158430026921), (-2.164158430026921), (-1));
      assertNotNull(entity0);
      
      Random random0 = entity0.getGen();
      assertEquals(0.3303496236145552, random0.nextDouble(), 0.01D);
      assertNotNull(random0);
  }

  @Test
  public void test11()  throws Throwable  {
      Entity entity0 = new Entity((-20.924804293155262), (-20.924804293155262), (-1771));
      assertNotNull(entity0);
      
      double double0 = entity0.dist((double) (-1771), (-20.924804293155262), (double) (-1771), (-20.924804293155262));
      assertEquals(0.0, double0, 0.01D);
      assertEquals((-20.924804293155262), entity0.getX(), 0.01D);
      assertEquals(-1771, entity0.getTeam());
  }

  @Test
  public void test12()  throws Throwable  {
      Entity entity0 = new Entity((-1650.2535845584132), (-1650.2535845584132), (-192));
      assertNotNull(entity0);
      
      entity0.setX((double) (-192));
      assertEquals((-192.0), entity0.getX(), 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      Entity entity0 = new Entity((-1650.2535845584132), (-1650.2535845584132), (-192));
      assertNotNull(entity0);
      
      double double0 = entity0.getSize();
      assertEquals(-192, entity0.getTeam());
      assertEquals((-1650.2535845584132), entity0.getX(), 0.01D);
      assertEquals(15.0, double0, 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      Entity entity0 = new Entity((-1650.2535845584132), (-1650.2535845584132), (-192));
      assertNotNull(entity0);
      
      HashMap<String, Double> hashMap0 = entity0.getProperties();
      assertEquals("{id=0.0, age=1.0}", hashMap0.toString());
      assertEquals(-192, entity0.getTeam());
      assertNotNull(hashMap0);
      assertEquals((-1650.2535845584132), entity0.getX(), 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      Entity entity0 = new Entity((-20.924804293155262), (-20.924804293155262), (-1771));
      assertNotNull(entity0);
      
      Entity entity1 = new Entity((-20.924804293155262), (-20.924804293155262), (-1771), entity0);
      assertNotNull(entity1);
      assertEquals((-20.924804293155262), entity0.getX(), 0.01D);
      assertEquals(-1771, entity0.getTeam());
      assertEquals(-1771, entity1.getTeam());
  }

  @Test
  public void test16()  throws Throwable  {
      Entity entity0 = new Entity((-7.370232386979949), (double) 870, 870);
      assertNotNull(entity0);
      
      Entity entity1 = new Entity((-7.370232386979949), (-7.370232386979949), 870, entity0);
      assertEquals(870, entity0.getTeam());
      assertEquals((-7.370232386979949), entity0.getX(), 0.01D);
      assertEquals(870, entity1.getTeam());
      assertNotNull(entity1);
  }

  @Test
  public void test17()  throws Throwable  {
      Entity entity0 = new Entity((-7.370232386979949), (double) 870, 870);
      assertNotNull(entity0);
      
      // Undeclared exception!
      try {
        entity0.integrate((Server) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test18()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom((-3));
      Entity entity0 = new Entity(0.0, 0.0, (-3));
      assertNotNull(entity0);
      assertEquals(0.0, entity0.getX(), 0.01D);
      
      // Undeclared exception!
      try {
        entity0.integrate((Server) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      Entity entity0 = new Entity((double) (-5), (double) (-5), (-5));
      assertNotNull(entity0);
      
      // Undeclared exception!
      try {
        entity0.integrate((Server) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test20()  throws Throwable  {
      Entity entity0 = new Entity(7.991825544233597, 7.991825544233597, (-5));
      assertNotNull(entity0);
      
      // Undeclared exception!
      try {
        entity0.integrate((Server) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
