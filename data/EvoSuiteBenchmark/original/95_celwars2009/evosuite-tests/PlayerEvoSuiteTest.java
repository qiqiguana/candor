/*
 * This file was automatically generated by EvoSuite
 */


import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class PlayerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Player player0 = new Player();
      player0.getObserving();
      assertEquals(1, player0.getNumCells());
      assertEquals(100.0, player0.getPower(), 0.01D);
      assertEquals(15, player0.getScore());
  }

  @Test
  public void test1()  throws Throwable  {
      Player player0 = new Player();
      Entity entity0 = new Entity(0.0, 0.0, 1);
      player0.setObserving(entity0);
      assertEquals(1, player0.getNumCells());
      assertEquals(100.0, player0.getPower(), 0.01D);
      assertEquals(15, player0.getScore());
  }

  @Test
  public void test2()  throws Throwable  {
      Player player0 = new Player();
      int int0 = player0.getNumCells();
      assertEquals(15, player0.getScore());
      assertEquals(1, int0);
      assertEquals(100.0, player0.getPower(), 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      Player player0 = new Player();
      player0.setScore(6);
      assertEquals(6, player0.getScore());
  }

  @Test
  public void test4()  throws Throwable  {
      Player player0 = new Player();
      assertEquals(1, player0.getNumCells());
      
      player0.setNumCells(0);
      assertEquals(0, player0.getNumCells());
      assertEquals(100.0, player0.getPower(), 0.01D);
  }

  @Test
  public void test5()  throws Throwable  {
      Player player0 = new Player();
      double double0 = player0.getPower();
      assertEquals(1, player0.getNumCells());
      assertEquals(15, player0.getScore());
      assertEquals(100.0, double0, 0.01D);
  }

  @Test
  public void test6()  throws Throwable  {
      Player player0 = new Player();
      int int0 = player0.getScore();
      assertEquals(15, int0);
      assertEquals(1, player0.getNumCells());
      assertEquals(100.0, player0.getPower(), 0.01D);
  }

  @Test
  public void test7()  throws Throwable  {
      Player player0 = new Player();
      player0.setPower(2013.4113078893256);
      assertEquals(2013.4113078893256, player0.getPower(), 0.01D);
      assertEquals(15, player0.getScore());
  }

  @Test
  public void test8()  throws Throwable  {
      Player player0 = new Player();
      player0.setPower((-1993.6549784044264));
      assertEquals((-1993.6549784044264), player0.getPower(), 0.01D);
      assertEquals(15, player0.getScore());
  }
}
