/*
 * This file was automatically generated by EvoSuite
 */

package ioproject.common.network;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import ioproject.client.network.Server;
import ioproject.client.network.ServerHandler;
import ioproject.client.network.ServerToMessageHandlerAdapter;
import ioproject.client.network.StateMultiplexer;
import ioproject.common.network.AlwaysFailMessageHandler;
import ioproject.common.network.MessageHandler;
import ioproject.common.network.MessageMultiplexer;
import ioproject.common.network.Node;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class MessageMultiplexerEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AlwaysFailMessageHandler alwaysFailMessageHandler0 = new AlwaysFailMessageHandler();
      StateMultiplexer stateMultiplexer0 = new StateMultiplexer();
      ServerToMessageHandlerAdapter serverToMessageHandlerAdapter0 = new ServerToMessageHandlerAdapter((MessageHandler) alwaysFailMessageHandler0, (ServerHandler) stateMultiplexer0);
      MessageMultiplexer messageMultiplexer0 = new MessageMultiplexer((MessageHandler) serverToMessageHandlerAdapter0);
      Server server0 = new Server();
      // Undeclared exception!
      try {
        messageMultiplexer0.messageSent((Node) server0, (Object) "127.0.0.1");
        fail("Expecting exception: AssertionError");
      } catch(AssertionError e) {
        /*
         * Method called with the following arguments: ioproject.client.network.Server@64554e04 (node), 127.0.0.1 (message).
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      StateMultiplexer stateMultiplexer0 = new StateMultiplexer();
      MessageMultiplexer messageMultiplexer0 = new MessageMultiplexer((MessageHandler) stateMultiplexer0);
      Server server0 = new Server();
      Class<?> class0 = MessageMultiplexer.class;
      messageMultiplexer0.addMessageHandler(class0, (MessageHandler) messageMultiplexer0);
      // Undeclared exception!
      try {
        messageMultiplexer0.messageSent((Node) server0, (Object) messageMultiplexer0);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      AlwaysFailMessageHandler alwaysFailMessageHandler0 = new AlwaysFailMessageHandler();
      ServerToMessageHandlerAdapter serverToMessageHandlerAdapter0 = new ServerToMessageHandlerAdapter((MessageHandler) alwaysFailMessageHandler0, (ServerHandler) null);
      MessageMultiplexer messageMultiplexer0 = new MessageMultiplexer((MessageHandler) serverToMessageHandlerAdapter0);
      Server server0 = new Server();
      Object object0 = new Object();
      // Undeclared exception!
      try {
        messageMultiplexer0.messageReceived((Node) server0, object0);
        fail("Expecting exception: AssertionError");
      } catch(AssertionError e) {
        /*
         * Method called with the following arguments: ioproject.client.network.Server@224ec3fa (node), java.lang.Object@612463ae (message).
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      AlwaysFailMessageHandler alwaysFailMessageHandler0 = new AlwaysFailMessageHandler();
      MessageMultiplexer messageMultiplexer0 = new MessageMultiplexer((MessageHandler) alwaysFailMessageHandler0);
      StateMultiplexer stateMultiplexer0 = new StateMultiplexer();
      Class<?> class0 = MessageMultiplexer.class;
      messageMultiplexer0.addMessageHandler(class0, (MessageHandler) alwaysFailMessageHandler0);
      ServerToMessageHandlerAdapter serverToMessageHandlerAdapter0 = new ServerToMessageHandlerAdapter((MessageHandler) messageMultiplexer0, (ServerHandler) stateMultiplexer0);
      Server server0 = new Server();
      // Undeclared exception!
      try {
        serverToMessageHandlerAdapter0.messageReceived((Node) server0, (Object) messageMultiplexer0);
        fail("Expecting exception: AssertionError");
      } catch(AssertionError e) {
        /*
         * Method called with the following arguments: ioproject.client.network.Server@159a1675 (node), ioproject.common.network.MessageMultiplexer@37386667 (message).
         */
      }
  }
}
