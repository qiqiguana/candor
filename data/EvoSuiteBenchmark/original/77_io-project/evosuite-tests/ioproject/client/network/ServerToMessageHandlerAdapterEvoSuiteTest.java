/*
 * This file was automatically generated by EvoSuite
 */

package ioproject.client.network;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import ioproject.client.network.Server;
import ioproject.client.network.ServerHandler;
import ioproject.client.network.ServerToMessageHandlerAdapter;
import ioproject.client.network.StateMultiplexer;
import ioproject.common.network.AlwaysFailMessageHandler;
import ioproject.common.network.MessageHandler;
import ioproject.common.network.MessageMultiplexer;
import ioproject.common.network.Node;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ServerToMessageHandlerAdapterEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      AlwaysFailMessageHandler alwaysFailMessageHandler0 = new AlwaysFailMessageHandler();
      StateMultiplexer stateMultiplexer0 = new StateMultiplexer();
      ServerToMessageHandlerAdapter serverToMessageHandlerAdapter0 = new ServerToMessageHandlerAdapter((MessageHandler) alwaysFailMessageHandler0, (ServerHandler) stateMultiplexer0);
      Server server0 = new Server();
      // Undeclared exception!
      try {
        serverToMessageHandlerAdapter0.messageSent((Node) server0, (Object) "lo");
        fail("Expecting exception: AssertionError");
      } catch(AssertionError e) {
        /*
         * Method called with the following arguments: ioproject.client.network.Server@41c28278 (node), lo (message).
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      AlwaysFailMessageHandler alwaysFailMessageHandler0 = new AlwaysFailMessageHandler();
      MessageMultiplexer messageMultiplexer0 = new MessageMultiplexer((MessageHandler) alwaysFailMessageHandler0);
      StateMultiplexer stateMultiplexer0 = new StateMultiplexer();
      ServerToMessageHandlerAdapter serverToMessageHandlerAdapter0 = new ServerToMessageHandlerAdapter((MessageHandler) messageMultiplexer0, (ServerHandler) stateMultiplexer0);
      Server server0 = new Server();
      // Undeclared exception!
      try {
        serverToMessageHandlerAdapter0.messageReceived((Node) server0, (Object) "vm:1962");
        fail("Expecting exception: AssertionError");
      } catch(AssertionError e) {
        /*
         * Method called with the following arguments: ioproject.client.network.Server@63017675 (node), vm:1962 (message).
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      AlwaysFailMessageHandler alwaysFailMessageHandler0 = new AlwaysFailMessageHandler();
      StateMultiplexer stateMultiplexer0 = new StateMultiplexer();
      ServerToMessageHandlerAdapter serverToMessageHandlerAdapter0 = new ServerToMessageHandlerAdapter((MessageHandler) alwaysFailMessageHandler0, (ServerHandler) stateMultiplexer0);
      Server server0 = new Server();
      // Undeclared exception!
      try {
        serverToMessageHandlerAdapter0.exceptionCaught(server0, (Throwable) null);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * You must set a state before events can be handled.
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      StateMultiplexer stateMultiplexer0 = new StateMultiplexer();
      ServerToMessageHandlerAdapter serverToMessageHandlerAdapter0 = new ServerToMessageHandlerAdapter((MessageHandler) stateMultiplexer0, (ServerHandler) stateMultiplexer0);
      Server server0 = new Server();
      // Undeclared exception!
      try {
        serverToMessageHandlerAdapter0.connectionClosed(server0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * You must set a state before events can be handled.
         */
      }
  }
}
