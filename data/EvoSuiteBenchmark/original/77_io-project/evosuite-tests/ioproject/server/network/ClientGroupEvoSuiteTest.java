/*
 * This file was automatically generated by EvoSuite
 */

package ioproject.server.network;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import ioproject.client.network.ServerHandler;
import ioproject.client.network.ServerToMessageHandlerAdapter;
import ioproject.client.network.StateMultiplexer;
import ioproject.common.network.AlwaysFailMessageHandler;
import ioproject.common.network.MessageHandler;
import ioproject.common.network.MessageMultiplexer;
import ioproject.server.network.Client;
import ioproject.server.network.ClientGroup;
import ioproject.server.network.ClientHandler;
import ioproject.server.network.ClientToMessageHandlerAdapter;
import java.net.SocketAddress;
import java.util.ArrayDeque;
import java.util.Iterator;
import java.util.Set;
import org.apache.mina.common.IoHandler;
import org.apache.mina.common.IoHandlerAdapter;
import org.apache.mina.common.IoService;
import org.apache.mina.common.IoServiceConfig;
import org.apache.mina.common.IoSession;
import org.apache.mina.common.support.IoServiceListenerSupport;
import org.apache.mina.transport.socket.nio.SocketAcceptorConfig;
import org.apache.mina.transport.vmpipe.VmPipeAcceptor;
import org.apache.mina.transport.vmpipe.VmPipeAddress;
import org.apache.mina.transport.vmpipe.support.VmPipe;
import org.apache.mina.transport.vmpipe.support.VmPipeSessionImpl;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class ClientGroupEvoSuiteTest {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ClientGroup clientGroup0 = new ClientGroup((ClientGroup) null);
      Iterator<Client> iterator0 = clientGroup0.iterator();
      assertEquals(false, iterator0.hasNext());
  }

  @Test
  public void test1()  throws Throwable  {
      ClientGroup clientGroup0 = new ClientGroup((ClientGroup) null);
      int int0 = clientGroup0.size();
      assertEquals(0, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      ClientGroup clientGroup0 = new ClientGroup((ClientGroup) null);
      clientGroup0.createSubGroup();
      Client client0 = new Client((IoSession) null);
      clientGroup0.add(client0);
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(1975);
      boolean boolean0 = clientGroup0.notifyMessageSent(client0, (Object) arrayDeque0);
      assertEquals(1, clientGroup0.size());
      assertEquals(true, boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      ClientGroup clientGroup0 = new ClientGroup((ClientGroup) null);
      ClientGroup clientGroup1 = clientGroup0.createSubGroup();
      clientGroup0.createSubGroup();
      Client client0 = new Client((IoSession) null);
      clientGroup1.add(client0);
      clientGroup0.add(client0);
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(1975);
      boolean boolean0 = clientGroup0.notifyMessageSent(client0, (Object) arrayDeque0);
      assertEquals(1, clientGroup0.size());
      assertEquals(true, boolean0);
  }

  @Test
  public void test4()  throws Throwable  {
      ClientGroup clientGroup0 = new ClientGroup((ClientGroup) null);
      ClientGroup clientGroup1 = clientGroup0.createSubGroup();
      clientGroup0.createSubGroup();
      Client client0 = new Client((IoSession) null);
      clientGroup1.add(client0);
      VmPipeAcceptor vmPipeAcceptor0 = new VmPipeAcceptor();
      VmPipeAddress vmPipeAddress0 = new VmPipeAddress(1975);
      clientGroup0.add(client0);
      IoHandlerAdapter ioHandlerAdapter0 = new IoHandlerAdapter();
      SocketAcceptorConfig socketAcceptorConfig0 = new SocketAcceptorConfig();
      IoServiceListenerSupport ioServiceListenerSupport0 = new IoServiceListenerSupport();
      VmPipe vmPipe0 = new VmPipe(vmPipeAcceptor0, vmPipeAddress0, (IoHandler) ioHandlerAdapter0, (IoServiceConfig) socketAcceptorConfig0, ioServiceListenerSupport0);
      VmPipeSessionImpl vmPipeSessionImpl0 = new VmPipeSessionImpl((IoService) vmPipeAcceptor0, (IoServiceConfig) socketAcceptorConfig0, ioServiceListenerSupport0, (SocketAddress) vmPipeAddress0, (IoHandler) ioHandlerAdapter0, vmPipe0);
      Set<String> set0 = vmPipeSessionImpl0.getAttributeKeys();
      boolean boolean0 = clientGroup0.notifyMessageReceived(client0, (Object) set0);
      assertEquals(1, clientGroup0.size());
      assertEquals(true, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      ClientGroup clientGroup0 = new ClientGroup((ClientGroup) null);
      ClientGroup clientGroup1 = clientGroup0.createSubGroup();
      Client client0 = new Client((IoSession) null);
      ClientGroup clientGroup2 = clientGroup1.parentGroup();
      VmPipeAcceptor vmPipeAcceptor0 = new VmPipeAcceptor();
      VmPipeAddress vmPipeAddress0 = new VmPipeAddress(0);
      clientGroup2.add(client0);
      IoHandlerAdapter ioHandlerAdapter0 = new IoHandlerAdapter();
      SocketAcceptorConfig socketAcceptorConfig0 = new SocketAcceptorConfig();
      IoServiceListenerSupport ioServiceListenerSupport0 = new IoServiceListenerSupport();
      VmPipe vmPipe0 = new VmPipe(vmPipeAcceptor0, vmPipeAddress0, (IoHandler) ioHandlerAdapter0, (IoServiceConfig) socketAcceptorConfig0, ioServiceListenerSupport0);
      VmPipeSessionImpl vmPipeSessionImpl0 = new VmPipeSessionImpl((IoService) vmPipeAcceptor0, (IoServiceConfig) socketAcceptorConfig0, ioServiceListenerSupport0, (SocketAddress) vmPipeAddress0, (IoHandler) ioHandlerAdapter0, vmPipe0);
      Set<String> set0 = vmPipeSessionImpl0.getAttributeKeys();
      StateMultiplexer stateMultiplexer0 = new StateMultiplexer();
      MessageMultiplexer messageMultiplexer0 = new MessageMultiplexer((MessageHandler) stateMultiplexer0);
      ClientToMessageHandlerAdapter clientToMessageHandlerAdapter0 = new ClientToMessageHandlerAdapter((MessageHandler) messageMultiplexer0, (ClientHandler) null);
      clientGroup0.addClientHandler((ClientHandler) clientToMessageHandlerAdapter0);
      // Undeclared exception!
      try {
        clientGroup0.notifyMessageReceived(client0, (Object) set0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * You must set a state before events can be handled.
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      ClientGroup clientGroup0 = new ClientGroup((ClientGroup) null);
      Client client0 = new Client((IoSession) null);
      clientGroup0.createSubGroup();
      clientGroup0.add(client0);
      boolean boolean0 = clientGroup0.notifyExceptionCaught(client0, (Throwable) null);
      assertEquals(1, clientGroup0.size());
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      ClientGroup clientGroup0 = new ClientGroup((ClientGroup) null);
      ClientGroup clientGroup1 = clientGroup0.createSubGroup();
      Client client0 = new Client((IoSession) null);
      clientGroup0.createSubGroup();
      clientGroup0.add(client0);
      clientGroup1.add(client0);
      boolean boolean0 = clientGroup0.notifyExceptionCaught(client0, (Throwable) null);
      assertEquals(1, clientGroup0.size());
      assertEquals(true, boolean0);
  }

  @Test
  public void test8()  throws Throwable  {
      ClientGroup clientGroup0 = new ClientGroup((ClientGroup) null);
      clientGroup0.createSubGroup();
      Client client0 = new Client((IoSession) null);
      clientGroup0.add(client0);
      assertEquals(1, clientGroup0.size());
      
      boolean boolean0 = clientGroup0.remove(client0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      ClientGroup clientGroup0 = new ClientGroup((ClientGroup) null);
      Client client0 = new Client((IoSession) null);
      AlwaysFailMessageHandler alwaysFailMessageHandler0 = new AlwaysFailMessageHandler();
      StateMultiplexer stateMultiplexer0 = new StateMultiplexer();
      ServerToMessageHandlerAdapter serverToMessageHandlerAdapter0 = new ServerToMessageHandlerAdapter((MessageHandler) alwaysFailMessageHandler0, (ServerHandler) stateMultiplexer0);
      MessageMultiplexer messageMultiplexer0 = new MessageMultiplexer((MessageHandler) serverToMessageHandlerAdapter0);
      ClientToMessageHandlerAdapter clientToMessageHandlerAdapter0 = new ClientToMessageHandlerAdapter((MessageHandler) messageMultiplexer0, (ClientHandler) null);
      clientGroup0.addClientHandler((ClientHandler) clientToMessageHandlerAdapter0);
      // Undeclared exception!
      try {
        clientGroup0.remove(client0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
