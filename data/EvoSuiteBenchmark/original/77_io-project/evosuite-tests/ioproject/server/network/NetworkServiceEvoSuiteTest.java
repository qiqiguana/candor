/*
 * This file was automatically generated by EvoSuite
 */

package ioproject.server.network;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import ioproject.server.network.ClientGroup;
import ioproject.server.network.NetworkService;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.mina.common.IoAcceptor;
import org.apache.mina.transport.vmpipe.VmPipeAcceptor;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class NetworkServiceEvoSuiteTest {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      NetworkService networkService0 = new NetworkService();
      ClientGroup clientGroup0 = networkService0.globalClientGroup();
      assertEquals(0, clientGroup0.size());
  }

  @Test
  public void test1()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          NetworkService networkService0 = new NetworkService();
          InetSocketAddress inetSocketAddress0 = new InetSocketAddress("", 1530);
          networkService0.connect((SocketAddress) inetSocketAddress0);
          networkService0.disconnect();
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test2()  throws Throwable  {
      VmPipeAcceptor vmPipeAcceptor0 = new VmPipeAcceptor();
      NetworkService networkService0 = new NetworkService((IoAcceptor) vmPipeAcceptor0);
      // Undeclared exception!
      try {
        networkService0.connect((SocketAddress) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * Parameters must not be null.
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          NetworkService networkService0 = new NetworkService();
          InetSocketAddress inetSocketAddress0 = new InetSocketAddress(0);
          networkService0.connect((SocketAddress) inetSocketAddress0);
          // Undeclared exception!
          try {
            networkService0.connect((SocketAddress) inetSocketAddress0);
            fail("Expecting exception: IllegalStateException");
          } catch(IllegalStateException e) {
            /*
             * Already connected.
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  @Test
  public void test4()  throws Throwable  {
      NetworkService networkService0 = new NetworkService();
      // Undeclared exception!
      try {
        networkService0.disconnect();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
        /*
         * Not connected.
         */
      }
  }
}
