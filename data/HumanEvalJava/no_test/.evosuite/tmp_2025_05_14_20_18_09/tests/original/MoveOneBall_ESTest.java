/*
 * This file was automatically generated by EvoSuite
 * Wed May 14 20:54:42 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.MoveOneBall;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MoveOneBall_ESTest extends MoveOneBall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(1057);
      linkedList0.add((Object) integer0);
      List<Object> list0 = linkedList0.subList(0, 0);
      linkedList0.pollFirst();
      // Undeclared exception!
      try { 
        MoveOneBall.moveOneBall(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        MoveOneBall.moveOneBall((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.MoveOneBall", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      // Undeclared exception!
      try { 
        MoveOneBall.moveOneBall(linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.lang.Integer (java.lang.Object and java.lang.Integer are in module java.base of loader 'bootstrap')
         //
         verifyException("original.MoveOneBall", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-19));
      Integer integer2 = new Integer((-1046));
      List<Object> list0 = List.of((Object) integer1, (Object) integer2, (Object) integer0);
      Boolean boolean0 = MoveOneBall.moveOneBall(list0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-1046));
      List<Object> list0 = List.of((Object) integer0, (Object) integer1, (Object) integer1);
      Boolean boolean0 = MoveOneBall.moveOneBall(list0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Boolean boolean0 = MoveOneBall.moveOneBall(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MoveOneBall moveOneBall0 = new MoveOneBall();
  }
}
