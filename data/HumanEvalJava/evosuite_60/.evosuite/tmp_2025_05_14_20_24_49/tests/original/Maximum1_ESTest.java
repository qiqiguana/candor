/*
 * This file was automatically generated by EvoSuite
 * Wed May 14 19:58:14 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Maximum1;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Maximum1_ESTest extends Maximum1_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-24));
      List<Integer> list0 = List.of(integer0, integer0, integer1, integer1, integer1, integer1, integer1, integer1);
      List<Object> list1 = Maximum1.maximum(list0, 4);
      assertTrue(list1.contains(0));
      assertEquals(4, list1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      List<Object> list0 = Maximum1.maximum(linkedList0, 1);
      assertTrue(list0.contains(0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.addFirst(integer0);
      List<Object> list0 = Maximum1.maximum(linkedList0, 75);
      assertTrue(list0.contains(1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      List<Integer> list0 = linkedList0.subList(0, 0);
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        Maximum1.maximum(list0, 0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        Maximum1.maximum((List<Integer>) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Maximum1", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      List<Integer> list0 = List.of(integer0, integer0, integer0, integer0, integer0, integer0, integer0, integer0);
      // Undeclared exception!
      try { 
        Maximum1.maximum(list0, (-5898));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1);
      List<Integer> list0 = List.of(integer0, integer0, integer1, integer0, integer1, integer1, integer0, integer1);
      List<Object> list1 = Maximum1.maximum(list0, 1);
      assertEquals(1, list1.size());
      assertTrue(list1.contains(1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(0);
      List<Integer> list0 = List.of(integer0, integer0, integer0, integer0, integer0, integer0, integer0, integer0);
      // Undeclared exception!
      try { 
        Maximum1.maximum(list0, 2913);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ImmutableCollections", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.addFirst(integer0);
      List<Object> list0 = Maximum1.maximum(linkedList0, 0);
      assertFalse(list0.contains(1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      List<Object> list0 = Maximum1.maximum(linkedList0, 0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Maximum1 maximum1_0 = new Maximum1();
  }
}
