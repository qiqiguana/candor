/*
 * This file was automatically generated by EvoSuite
 * Wed May 14 20:32:46 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.StrongestExtension;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StrongestExtension_ESTest extends StrongestExtension_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = StrongestExtension.strongestExtension("Aj~MHf}X", linkedList0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("+D");
      List<String> list0 = linkedList0.subList(1, 1);
      linkedList0.add(1, "+D");
      // Undeclared exception!
      try { 
        StrongestExtension.strongestExtension("+D.+D", list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        StrongestExtension.strongestExtension("", (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.StrongestExtension", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      List<String> list0 = List.of("q3*e,<#jj^]e<", "q3*e,<#jj^]e<", "q3*e,<#jj^]e<", "q3*e,<#jj^]e<", "q3*e,<#jj^]e<", "q3*e,<#jj^]e<", "original.StrongestExtension", "", "q3*e,<#jj^]e<");
      String string0 = StrongestExtension.strongestExtension("q3*e,<#jj^]e<", list0);
      assertEquals("q3*e,<#jj^]e<.", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StrongestExtension strongestExtension0 = new StrongestExtension();
  }
}
