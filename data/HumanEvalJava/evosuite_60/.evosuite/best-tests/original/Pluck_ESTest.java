/*
 * This file was automatically generated by EvoSuite
 * Wed May 14 20:35:15 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Pluck;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Pluck_ESTest extends Pluck_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(2976);
      Integer integer2 = Integer.valueOf((-282));
      List<Object> list0 = List.of((Object) integer1, object0, (Object) integer2, object0, (Object) integer0, (Object) integer1);
      List<Object> list1 = Pluck.pluck(list0);
      assertTrue(list1.contains((-282)));
      assertFalse(list1.contains(2976));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Object object0 = new Object();
      Integer integer1 = new Integer(1827);
      List<Object> list0 = List.of(object0, object0, object0, object0, object0, object0, (Object) integer0, (Object) integer1, (Object) integer1);
      List<Object> list1 = Pluck.pluck(list0);
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        Pluck.pluck((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Pluck", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer(0);
      integerArray0[0] = integer1;
      Object object0 = new Object();
      List<Object> list0 = List.of(object0, object0, object0, object0, object0, object0, (Object) integer0, (Object) integerArray0[0], (Object) integerArray0[0]);
      List<Object> list1 = Pluck.pluck(list0);
      assertFalse(list1.contains((-1)));
      assertTrue(list1.contains(0));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Pluck pluck0 = new Pluck();
      List<Object> list0 = List.of((Object) pluck0, (Object) pluck0, (Object) pluck0, (Object) pluck0);
      List<Object> list1 = Pluck.pluck(list0);
      assertEquals(0, list1.size());
  }
}
