/*
 * This file was automatically generated by EvoSuite
 * Wed May 14 20:36:47 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.ParseNestedParens;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class ParseNestedParens_ESTest extends ParseNestedParens_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      List<Integer> list0 = ParseNestedParens.parseNestedParens("zS(()#fT(H0]g");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        ParseNestedParens.parseNestedParens((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.ParseNestedParens", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      List<Integer> list0 = ParseNestedParens.parseNestedParens("coFg'~m;IS(.Jwn)8");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      List<Integer> list0 = ParseNestedParens.parseNestedParens("`|G0@eGr\"=)WCtDmh;'");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ParseNestedParens parseNestedParens0 = new ParseNestedParens();
  }
}
