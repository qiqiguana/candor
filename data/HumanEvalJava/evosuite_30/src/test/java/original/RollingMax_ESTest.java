/*
 * This file was automatically generated by EvoSuite
 * Wed May 14 21:06:40 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.RollingMax;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class RollingMax_ESTest extends RollingMax_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer((-4846));
      Integer integer1 = new Integer((-1856));
      Object object0 = new Object();
      List<Object> list0 = List.of((Object) integer0, (Object) integer1, (Object) integer1, (Object) integer1, (Object) integer0, (Object) integer0, object0);
      // Undeclared exception!
      try { 
        RollingMax.rollingMax(list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid number type
         //
         verifyException("original.RollingMax", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        RollingMax.rollingMax((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.RollingMax", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer((-1720));
      Integer integer1 = new Integer(786);
      List<Object> list0 = List.of((Object) integer0, (Object) integer0, (Object) integer1, (Object) integer1);
      List<Object> list1 = RollingMax.rollingMax(list0);
      assertTrue(list1.contains(786));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = RollingMax.rollingMax(linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RollingMax rollingMax0 = new RollingMax();
      List<Object> list0 = List.of((Object) rollingMax0, (Object) rollingMax0);
      // Undeclared exception!
      try { 
        RollingMax.rollingMax(list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid number type
         //
         verifyException("original.RollingMax", e);
      }
  }
}
