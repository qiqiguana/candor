/*
 * This file was automatically generated by EvoSuite
 * Wed May 14 22:15:06 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Compare;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Compare_ESTest extends Compare_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(2238);
      List<Integer> list0 = List.of(integer0, integer0, integer0, integer0, integer0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>(list0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      List<Integer> list1 = Compare.compare(linkedList1, linkedList0);
      assertFalse(list1.contains(2238));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      List<Integer> list0 = linkedList0.subList(0, 0);
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        Compare.compare(list0, list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      // Undeclared exception!
      try { 
        Compare.compare(linkedList0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Compare", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer(2238);
      List<Integer> list0 = List.of(integer0, integer0, integer0, integer0, integer0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        Compare.compare(list0, linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      List<Integer> list0 = List.of();
      Integer integer0 = new Integer(646);
      List<Integer> list1 = List.of(integer0);
      // Undeclared exception!
      try { 
        Compare.compare(list1, list0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(2238);
      List<Integer> list0 = List.of(integer0, integer0, integer0, integer0, integer0);
      List<Integer> list1 = Compare.compare(list0, list0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>(list1);
      List<Integer> list2 = Compare.compare(linkedList0, linkedList0);
      assertFalse(list2.contains(2238));
      assertEquals(5, list2.size());
      assertTrue(list2.equals((Object)list1));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Compare compare0 = new Compare();
  }
}
