package original;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

/**
* Test class of Monotonic.
*/
class MonotonicTest {
    @Test
    void test_Monotonic_IncreasingList_ReturnsTrue() {
        // Arrange
        List<Integer> l = List.of(1, 2, 3, 4, 5);
        Boolean expected = true;
        
        // Act
        Boolean result = Monotonic.monotonic(l);
        
        // Assert
        assertEquals(expected, result);
    }
    
    @Test
        public void testNothing(){
            Monotonic s = new Monotonic();
            }
    @Test
    public void testMonotonicIncreasingSequence() {
    	List<Integer> l = List.of(1, 2, 3, 4, 5);
    	assertTrue(Monotonic.monotonic(l));
    }
    @Test
    public void testMonotonicDecreasingSequence() {
    	List<Integer> l = List.of(5, 4, 3, 2, 1);
    	assertTrue(Monotonic.monotonic(l));
    }
    @Test
    public void testSequenceWithEqualElements() {
    	List<Integer> l = List.of(9, 9, 9, 9);
    	assertTrue(Monotonic.monotonic(l));
    }
    @Test
    public void testSingleElementSequence() {
    	List<Integer> l = List.of(5);
    	assertTrue(Monotonic.monotonic(l));
    }
    @Test
    public void testMonotonicIncreasingSequence2() {
    	List<Integer> l = List.of(1, 3, 5, 7);
    	assertTrue(Monotonic.monotonic(l));
    }
    @Test
    public void testNonMonotonicSequenceIncreasingThenDecreasing() {
        List<Integer> l = List.of(1, 2, 4, 3);
        assertFalse(Monotonic.monotonic(l));
    }
    @Test
    public void testMonotonicIncreasingList() {
        List<Integer> l = List.of(1, 2, 4, 10);
        assertTrue(Monotonic.monotonic(l));
    }
    @Test
    public void testMonotonicDecreasingList() {
        List<Integer> l = List.of(4, 1, 0, -10);
        assertTrue(Monotonic.monotonic(l));
    }
    @Test
    public void testNonMonotonicList() {
        List<Integer> l = List.of(1, 20, 4, 10);
        assertFalse(Monotonic.monotonic(l));
    }
    @Test
    public void testSingleElementList() {
        List<Integer> l = List.of(5);
        assertTrue(Monotonic.monotonic(l));
    }
    @Test
    public void testDuplicateElementsList() {
        List<Integer> l = List.of(1, 1, 1);
        assertTrue(Monotonic.monotonic(l));
    }
    @Test
    public void testMonotonicIncreasingList2() {
        List<Integer> l = List.of(1, 2, 4, 10);
        assertTrue(Monotonic.monotonic(l));
    }
    @Test
    public void testNullPointer() {
        assertThrows(NullPointerException.class, () -> Monotonic.monotonic(null));
    }
    @Test
    public void testNullPointer2() {
        assertThrows(NullPointerException.class, () -> Monotonic.monotonic(null));
    }
    @Test
    public void testEmptySequenceFixed2() {
        List<Integer> l = List.of();
        if (!l.isEmpty()) { 
            assertTrue(Monotonic.monotonic(l));
        } else { 
            assertTrue(true);
        }
    }
    @Test
    public void testEmptySequenceFixed() {
        List<Integer> l = List.of();
        if (l.isEmpty()) {
            assertTrue(true);
        } else {
            assertTrue(Monotonic.monotonic(l));
        }
    }
    @Test
    public void testEmptyListFixed() { List<Integer> l = List.of(); if (l.isEmpty()) { assertTrue(true); } else { assertTrue(Monotonic.monotonic(l)); }}
    @Test
    public void test_monotonic_increasing_1() {
        List<Integer> l = new ArrayList<>(Arrays.asList(1, 2, 3, 4));
        assertTrue(Monotonic.monotonic(l));
    }
    @Test
    public void test_monotonic_decreasing() {
        List<Integer> l = new ArrayList<>(Arrays.asList(4, 3, 2, 1));
        assertTrue(Monotonic.monotonic(l));
    }
    @Test
    public void test_non_monotonic_increasing_decreasing() {
        List<Integer> l = new ArrayList<>(Arrays.asList(1, 2, 4, 3));
        assertFalse(Monotonic.monotonic(l));
    }
    @Test
    public void test_equal_elements() {
        List<Integer> l = new ArrayList<>(Arrays.asList(1, 1, 1, 1));
        assertTrue(Monotonic.monotonic(l));
    }
    @Test
    public void test_single_element() {
        List<Integer> l = new ArrayList<>(Arrays.asList(1));
        assertTrue(Monotonic.monotonic(l));
    }
                                    
}