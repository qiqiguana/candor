/*
 * This file was automatically generated by EvoSuite
 * Wed May 14 21:08:07 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Minsubarraysum;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class Minsubarraysum_ESTest extends Minsubarraysum_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-262));
      List<Integer> list0 = List.of(integer0, integer0);
      linkedList0.addAll((Collection<?>) list0);
      Integer integer1 = new Integer(1);
      linkedList0.add((Object) integer1);
      long long0 = Minsubarraysum.minsubarraysum(linkedList0);
      assertEquals((-524L), long0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-2743));
      Integer integer1 = new Integer(2147035415);
      Object object0 = new Object();
      List<Object> list0 = List.of((Object) integer0, (Object) integer1, (Object) integer0, (Object) linkedList0, (Object) integer0, (Object) integer1, object0, object0);
      // Undeclared exception!
      try { 
        Minsubarraysum.minsubarraysum(list0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.util.LinkedList cannot be cast to class java.lang.Number (java.util.LinkedList and java.lang.Number are in module java.base of loader 'bootstrap')
         //
         verifyException("original.Minsubarraysum", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        Minsubarraysum.minsubarraysum((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Minsubarraysum", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      // Undeclared exception!
      try { 
        Minsubarraysum.minsubarraysum(linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      List<Object> list0 = List.of();
      // Undeclared exception!
      try { 
        Minsubarraysum.minsubarraysum(list0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(0);
      List<Object> list0 = List.of((Object) integer0);
      long long0 = Minsubarraysum.minsubarraysum(list0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer integer0 = new Integer(1);
      List<Object> list0 = List.of((Object) integer0, (Object) integer0);
      long long0 = Minsubarraysum.minsubarraysum(list0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Minsubarraysum minsubarraysum0 = new Minsubarraysum();
  }
}
