/*
 * This file was automatically generated by EvoSuite
 * Wed May 14 19:35:56 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.ByLength;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class ByLength_ESTest extends ByLength_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      List<Object> list0 = linkedList0.subList(1, 1);
      Integer integer0 = new Integer(1);
      linkedList0.add((Object) integer0);
      // Undeclared exception!
      try { 
        ByLength.byLength(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByLength.byLength((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.ByLength", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(9);
      List<Object> list0 = List.of((Object) integer0, (Object) integer0, (Object) integer0, (Object) integer0, (Object) integer0, (Object) integer0);
      List<Object> list1 = ByLength.byLength(list0);
      assertFalse(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(8);
      List<Object> list0 = List.of((Object) integer0, (Object) integer0, (Object) integer0, (Object) integer0, (Object) integer0, (Object) integer0);
      List<Object> list1 = ByLength.byLength(list0);
      assertEquals(6, list1.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(6);
      List<Object> list0 = List.of((Object) integer0, (Object) integer0, (Object) integer0, (Object) integer0, (Object) integer0, (Object) integer0);
      List<Object> list1 = ByLength.byLength(list0);
      assertEquals(6, list1.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(5);
      Object object0 = new Object();
      List<Object> list0 = List.of((Object) integer0, object0, object0, object0);
      List<Object> list1 = ByLength.byLength(list0);
      assertEquals(1, list1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(3);
      List<Object> list0 = List.of((Object) integer0, (Object) integer0, (Object) integer0, (Object) integer0, (Object) integer0, (Object) integer0);
      List<Object> list1 = ByLength.byLength(list0);
      assertEquals(6, list1.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer(2);
      List<Object> list0 = List.of((Object) integer0, (Object) integer0, (Object) integer0, (Object) integer0, (Object) integer0, (Object) integer0);
      List<Object> list1 = ByLength.byLength(list0);
      assertEquals(6, list1.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Object object0 = new Object();
      Integer integer1 = new Integer(1341);
      List<Object> list0 = List.of((Object) integer0, (Object) integer0, object0, object0, (Object) integer0, object0, object0, (Object) integer0, (Object) integer1);
      List<Object> list1 = ByLength.byLength(list0);
      assertFalse(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer((-133));
      Object object0 = new Object();
      List<Object> list0 = List.of((Object) integer0, object0, object0, (Object) integer1, object0, object0);
      List<Object> list1 = ByLength.byLength(list0);
      assertFalse(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      linkedList0.add(object0);
      List<Object> list0 = ByLength.byLength(linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByLength byLength0 = new ByLength();
      Integer integer0 = new Integer(7);
      Object object0 = new Object();
      List<Object> list0 = List.of((Object) integer0, object0, (Object) byLength0, (Object) integer0, object0);
      List<Object> list1 = ByLength.byLength(list0);
      assertEquals(2, list1.size());
  }
}
