/*
 * This file was automatically generated by EvoSuite
 * Wed May 14 19:30:51 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Encode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Encode_ESTest extends Encode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String string0 = Encode.encode("9Z@Ug=V+0Hnf $.4");
      assertEquals("9z@wG=v+0hNF $.4", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String string0 = Encode.encode("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        Encode.encode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Encode", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = Encode.encode("ulG@c!n+");
      assertEquals("WLg@C!N+", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = Encode.encode("original.Encode");
      assertEquals("QRKGKNCL.gNCQDG", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String string0 = Encode.encode("`(I>nr[1A@x@PS%0<BM");
      assertEquals("`(k>NR[1c@X@ps%0<bm", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String string0 = Encode.encode(":MT5rh}[7y'SON6");
      assertEquals(":mt5RH}[7Y'sqn6", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String string0 = Encode.encode("22 ss!$UaTtIO8]zK");
      assertEquals("22 SS!$wCtTkq8]Zk", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Encode encode0 = new Encode();
  }
}
