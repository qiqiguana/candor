/*
 * This file was automatically generated by EvoSuite
 * Wed May 14 20:50:07 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.StrangeSortList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StrangeSortList_ESTest extends StrangeSortList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = new Object();
      List<Object> list0 = linkedList0.subList(0, 0);
      linkedList0.offerLast(object0);
      // Undeclared exception!
      try { 
        StrangeSortList.strangeSortList(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        StrangeSortList.strangeSortList((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.StrangeSortList", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(0);
      List<Object> list0 = List.of((Object) integer0, object0, (Object) integer0, object0, object0, object0, object0, object0, (Object) integer0);
      List<Object> list1 = StrangeSortList.strangeSortList(list0);
      assertFalse(list1.contains(object0));
      assertEquals(3, list1.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.addLast((Object) null);
      List<Object> list0 = StrangeSortList.strangeSortList(linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      StrangeSortList strangeSortList0 = new StrangeSortList();
  }
}
