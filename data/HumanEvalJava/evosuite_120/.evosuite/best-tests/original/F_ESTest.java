/*
 * This file was automatically generated by EvoSuite
 * Wed May 14 21:10:47 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.F;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class F_ESTest extends F_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      F f0 = new F();
      assertNotNull(f0);
      
      List<Integer> list0 = F.f(0);
      assertFalse(list0.contains(0));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<Integer> list1 = F.f((-214));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      assertFalse(list1.contains((-214)));
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      List<Integer> list2 = F.f(131);
      assertFalse(list2.equals((Object)list1));
      assertFalse(list2.equals((Object)list0));
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertFalse(list2.contains((-214)));
      assertTrue(list2.contains(0));
      assertEquals(131, list2.size());
      assertFalse(list2.isEmpty());
      assertNotNull(list2);
      
      int int0 = (-83);
      List<Integer> list3 = F.f((-83));
      assertTrue(list3.equals((Object)list1));
      assertFalse(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list0));
      assertNotSame(list3, list2);
      assertNotSame(list3, list1);
      assertNotSame(list3, list0);
      assertFalse(list3.contains((-214)));
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertNotNull(list3);
      
      List<Integer> list4 = F.f(0);
      assertTrue(list4.equals((Object)list1));
      assertFalse(list4.equals((Object)list2));
      assertTrue(list4.equals((Object)list3));
      assertTrue(list4.equals((Object)list0));
      assertNotSame(list4, list0);
      assertNotSame(list4, list3);
      assertNotSame(list4, list2);
      assertNotSame(list4, list1);
      assertFalse(list4.contains(0));
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      assertNotNull(list4);
      
      List<Integer> list5 = F.f((-1191));
      assertTrue(list5.equals((Object)list0));
      assertTrue(list5.equals((Object)list3));
      assertTrue(list5.equals((Object)list4));
      assertFalse(list5.equals((Object)list2));
      assertTrue(list5.equals((Object)list1));
      assertNotSame(list5, list0);
      assertNotSame(list5, list1);
      assertNotSame(list5, list4);
      assertNotSame(list5, list2);
      assertNotSame(list5, list3);
      assertFalse(list5.contains(0));
      assertTrue(list5.isEmpty());
      assertEquals(0, list5.size());
      assertNotNull(list5);
      
      int int1 = (-236);
      List<Integer> list6 = F.f((-236));
      assertTrue(list6.equals((Object)list4));
      assertTrue(list6.equals((Object)list3));
      assertTrue(list6.equals((Object)list5));
      assertFalse(list6.equals((Object)list2));
      assertTrue(list6.equals((Object)list1));
      assertTrue(list6.equals((Object)list0));
      assertNotSame(list6, list4);
      assertNotSame(list6, list2);
      assertNotSame(list6, list0);
      assertNotSame(list6, list3);
      assertNotSame(list6, list5);
      assertNotSame(list6, list1);
      assertFalse(list6.contains((-236)));
      assertEquals(0, list6.size());
      assertTrue(list6.isEmpty());
      assertNotNull(list6);
      
      int int2 = 1;
      List<Integer> list7 = F.f(1);
      assertFalse(list7.equals((Object)list3));
      assertFalse(list7.equals((Object)list5));
      assertFalse(list7.equals((Object)list4));
      assertFalse(list7.equals((Object)list2));
      assertFalse(list7.equals((Object)list1));
      assertFalse(list7.equals((Object)list0));
      assertFalse(list7.equals((Object)list6));
      assertNotSame(list7, list3);
      assertNotSame(list7, list5);
      assertNotSame(list7, list4);
      assertNotSame(list7, list2);
      assertNotSame(list7, list1);
      assertNotSame(list7, list0);
      assertNotSame(list7, list6);
      assertFalse(list7.contains((-236)));
      assertTrue(list7.contains(int2));
      assertEquals(1, list7.size());
      assertFalse(list7.isEmpty());
      assertNotNull(list7);
      
      List<Integer> list8 = F.f((-1323));
      assertTrue(list8.equals((Object)list6));
      assertFalse(list8.equals((Object)list2));
      assertTrue(list8.equals((Object)list1));
      assertTrue(list8.equals((Object)list3));
      assertTrue(list8.equals((Object)list4));
      assertTrue(list8.equals((Object)list5));
      assertTrue(list8.equals((Object)list0));
      assertFalse(list8.equals((Object)list7));
      assertNotSame(list8, list0);
      assertNotSame(list8, list1);
      assertNotSame(list8, list2);
      assertNotSame(list8, list4);
      assertNotSame(list8, list3);
      assertNotSame(list8, list5);
      assertNotSame(list8, list6);
      assertNotSame(list8, list7);
      assertFalse(list8.contains(0));
      assertEquals(0, list8.size());
      assertTrue(list8.isEmpty());
      assertNotNull(list8);
      
      // Undeclared exception!
      F.f(1701);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      List<Integer> list0 = F.f(0);
      assertFalse(list0.contains(0));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int int0 = 0;
      List<Integer> list0 = F.f(0);
      assertFalse(list0.contains(int0));
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      F f0 = new F();
      assertNotNull(f0);
      
      List<Integer> list1 = F.f(0);
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      assertFalse(list1.contains(0));
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      List<Integer> list2 = F.f(0);
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertFalse(list2.contains(0));
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotNull(list2);
      
      List<Integer> list3 = F.f((-1598));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list1));
      assertNotSame(list3, list0);
      assertNotSame(list3, list1);
      assertNotSame(list3, list2);
      assertFalse(list3.contains(0));
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertNotNull(list3);
      
      // Undeclared exception!
      F.f(3512);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      F.f(437);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      F f0 = new F();
      int int0 = 2698;
      // Undeclared exception!
      F.f(2698);
  }
}
