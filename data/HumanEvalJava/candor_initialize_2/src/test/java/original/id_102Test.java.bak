package original;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
/**
* Test class of ChooseNum.
*/
class ChooseNumTest {
    @Test
    void testChooseNum_BiggestEvenInRange_ReturnsBiggestEven() {
        // Arrange & Act
        int result = ChooseNum.chooseNum(12, 15);
        // Assert
        assertEquals(14, result);
    }
    @Test
    public void testChooseNum_XLessThanY_EvenNumbersInRange() {
        int result = ChooseNum.chooseNum(12, 15);
        assertEquals(14, result);
    }
    @Test
    public void testChooseNum_XGreaterThanY() {
        int result = ChooseNum.chooseNum(13, 12);
        assertEquals(-1, result);
    }
    @Test
    public void testChooseNum_NoEvenNumbersInRange() {
        int result = ChooseNum.chooseNum(33, 12354);
        assertEquals(12354, result);
    }
    @Test
    public void testChooseNum_XEqualY_Even() {
        int result = ChooseNum.chooseNum(546, 546);
        assertEquals(546, result);
    }
    @Test
    public void testChooseNum_XEqualY_Odd() {
        int result = ChooseNum.chooseNum(7, 7);
        assertEquals(-1, result);
    }
    @Test
    public void testChooseNum_Zero() {
        int result = ChooseNum.chooseNum(0, 10);
        assertEquals(10, result);
    }
    @Test
    public void testChooseNum_EvenNumbersInRange_ReturnsBiggestEvenNumber() {
        int result = ChooseNum.chooseNum(12, 15);
        assertEquals(14, result);
    }
    @Test
    public void testChooseNum_NoEvenNumbersInRange_ReturnsMinusOne() {
        int result = ChooseNum.chooseNum(13, 12);
        assertEquals(-1, result);
    }
    @Test
    public void testChooseNum_EqualNumbers_ReturnsNumber() {
        int result = ChooseNum.chooseNum(546, 546);
        assertEquals(546, result);
    }
    @Test
    public void testChooseNum_LargeEvenNumberInRange_ReturnsBiggestEvenNumber() {
        int result = ChooseNum.chooseNum(33, 12354);
        assertEquals(12354, result);
    }
    @Test
    public void testChooseNum_NumbersOutOfOrder_ReturnsMinusOne() {
        int result = ChooseNum.chooseNum(27, 10);
        assertEquals(-1, result);
    }
    @Test
    public void testChooseNum_SingleOddNumberInRange_ReturnsMinusOne() {
        int result = ChooseNum.chooseNum(11, 11);
        assertEquals(-1, result);
    }
    @Test
    public void test_chooseNum_with_two_positive_numbers_and_even_result() {
        int x = 12;
        int y = 15;
        int expected_result = 14;
        assertEquals(expected_result, ChooseNum.chooseNum(x, y));
    }
    @Test
    public void test_chooseNum_with_two_positive_numbers_and_no_even_result() {
        int x = 13;
        int y = 12;
        int expected_result = -1;
        assertEquals(expected_result, ChooseNum.chooseNum(x, y));
    }
    @Test
    public void test_chooseNum_with_two_positive_numbers_and_result_equal_to_y() {
        int x = 33;
        int y = 12354;
        int expected_result = 12354;
        assertEquals(expected_result, ChooseNum.chooseNum(x, y));
    }
    @Test
    public void test_chooseNum_with_two_positive_numbers_and_result_equal_to_x() {
        int x = 546;
        int y = 546;
        int expected_result = 546;
        assertEquals(expected_result, ChooseNum.chooseNum(x, y));
    }
    @Test
    public void test_chooseNum_with_two_negative_numbers() {
        int x = -12;
        int y = -15;
        int expected_result = -1;
        assertEquals(expected_result, ChooseNum.chooseNum(x, y));
    }
}