/*
 * This file was automatically generated by EvoSuite
 * Wed May 14 19:48:32 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Minpath;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Minpath_ESTest extends Minpath_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<List<Integer>> linkedList0 = new LinkedList<List<Integer>>();
      List<Integer> list0 = Minpath.minpath(linkedList0, 4054);
      List<List<Integer>> list1 = List.of(list0, list0, list0);
      List<Integer> list2 = Minpath.minpath(list1, 4054);
      assertTrue(list1.contains(list2));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<List<Integer>> linkedList0 = new LinkedList<List<Integer>>();
      List<Integer> list0 = Minpath.minpath(linkedList0, 0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<List<Integer>> linkedList0 = new LinkedList<List<Integer>>();
      Minpath.minpath(linkedList0, 5417);
      // Undeclared exception!
      Minpath.minpath(linkedList0, 5417);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<List<Integer>> linkedList0 = new LinkedList<List<Integer>>();
      List<Integer> list0 = Minpath.minpath(linkedList0, 4054);
      linkedList0.add(list0);
      // Undeclared exception!
      try { 
        Minpath.minpath(linkedList0, 1227);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        Minpath.minpath((List<List<Integer>>) null, 880);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Minpath", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      List<List<Integer>> list0 = List.of((List<Integer>) linkedList0);
      // Undeclared exception!
      try { 
        Minpath.minpath(list0, 4018);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<List<Integer>> linkedList0 = new LinkedList<List<Integer>>();
      List<Integer> list0 = List.of();
      linkedList0.add(list0);
      // Undeclared exception!
      try { 
        Minpath.minpath(linkedList0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Integer integer0 = new Integer(998);
      List<Integer> list0 = List.of(integer0, integer0, integer0);
      List<List<Integer>> list1 = List.of(list0, list0);
      List<Integer> list2 = Minpath.minpath(list1, 998);
      assertFalse(list2.contains(998));
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Minpath minpath0 = new Minpath();
  }
}
