/*
 * This file was automatically generated by EvoSuite
 * Wed May 14 21:59:14 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.MaxFill;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class MaxFill_ESTest extends MaxFill_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1925);
      List<Integer> list0 = List.of(integer0, integer0, integer0, integer0, integer1, integer1);
      List<List<Integer>> list1 = List.of(list0, list0, list0, list0, list0);
      int int0 = MaxFill.maxFill(list1, 0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(1925);
      List<Integer> list0 = List.of(integer0, integer0, integer0, integer0, integer1, integer1);
      List<List<Integer>> list1 = List.of(list0, list0, list0, list0, list0);
      int int0 = MaxFill.maxFill(list1, (-1766));
      assertEquals((-10), int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        MaxFill.maxFill((List<List<Integer>>) null, (-678));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.MaxFill", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer(0);
      List<Integer> list0 = List.of(integer0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      List<List<Integer>> list1 = List.of(list0, (List<Integer>) linkedList0, (List<Integer>) linkedList0, (List<Integer>) linkedList0, (List<Integer>) linkedList0, list0);
      int int0 = MaxFill.maxFill(list1, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MaxFill maxFill0 = new MaxFill();
  }
}
