/*
 * This file was automatically generated by EvoSuite
 * Wed May 14 21:47:52 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.FilterByPrefix;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FilterByPrefix_ESTest extends FilterByPrefix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-669487340));
      linkedList0.add((Object) integer0);
      List<Object> list0 = linkedList0.subList(1, 1);
      linkedList0.add((Object) integer0);
      // Undeclared exception!
      try { 
        FilterByPrefix.filterByPrefix(list0, "uRO9!");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      List<Object> list0 = List.of((Object) "");
      List<Object> list1 = FilterByPrefix.filterByPrefix(list0, "");
      assertTrue(list1.contains(""));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      List<Object> list0 = List.of((Object) "i");
      List<Object> list1 = FilterByPrefix.filterByPrefix(list0, "i");
      assertFalse(list1.contains("i"));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FilterByPrefix filterByPrefix0 = new FilterByPrefix();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) filterByPrefix0;
      objectArray0[1] = (Object) filterByPrefix0;
      objectArray0[2] = (Object) filterByPrefix0;
      objectArray0[3] = (Object) filterByPrefix0;
      objectArray0[4] = (Object) filterByPrefix0;
      objectArray0[5] = (Object) filterByPrefix0;
      objectArray0[6] = (Object) filterByPrefix0;
      objectArray0[7] = (Object) filterByPrefix0;
      List<Object> list0 = List.of(objectArray0);
      // Undeclared exception!
      try { 
        FilterByPrefix.filterByPrefix(list0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
