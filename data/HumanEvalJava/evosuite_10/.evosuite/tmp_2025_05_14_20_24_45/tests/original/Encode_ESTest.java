/*
 * This file was automatically generated by EvoSuite
 * Wed May 14 19:30:44 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Encode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Encode_ESTest extends Encode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String string0 = Encode.encode("Bq8Z6{(<");
      assertEquals("bQ8z6{(<", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String string0 = Encode.encode("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        Encode.encode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Encode", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = Encode.encode("oim(x[-wl~f");
      assertEquals("QKM(X[-WL~F", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = Encode.encode("sl>`e&P9");
      assertEquals("SL>`G&p9", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String string0 = Encode.encode("x8}VicL6bSq65acU");
      assertEquals("X8}vKCl6BsQ65CCw", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String string0 = Encode.encode(".&kc=kI PDw~Auu'");
      assertEquals(".&KC=Kk pdW~cWW'", string0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String string0 = Encode.encode("L=/(TuzxE+_6?n1");
      assertEquals("l=/(tWZXg+_6?N1", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      String string0 = Encode.encode("dOI5_:3v");
      assertEquals("Dqk5_:3V", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Encode encode0 = new Encode();
  }
}
