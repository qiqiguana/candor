/*
 * This file was automatically generated by EvoSuite
 * Wed May 14 22:19:31 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.SumSquares;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SumSquares_ESTest extends SumSquares_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Double double0 = Double.valueOf((-550.9530295));
      List<Number> list0 = List.of((Number) double0, (Number) double0);
      int int0 = SumSquares.sumSquares(list0);
      assertEquals(605000, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Number> linkedList0 = new LinkedList<Number>();
      Byte byte0 = Byte.valueOf((byte)1);
      linkedList0.addFirst(byte0);
      List<Number> list0 = linkedList0.subList((byte)1, (byte)1);
      linkedList0.remove(0);
      // Undeclared exception!
      try { 
        SumSquares.sumSquares(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        SumSquares.sumSquares((List<Number>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.SumSquares", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Number> linkedList0 = new LinkedList<Number>();
      linkedList0.add((Number) 0);
      int int0 = SumSquares.sumSquares(linkedList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SumSquares sumSquares0 = new SumSquares();
  }
}
