/*
 * This file was automatically generated by EvoSuite
 * Wed May 14 21:32:49 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.MakeAPile;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class MakeAPile_ESTest extends MakeAPile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MakeAPile.makeAPile(2774);
      MakeAPile.makeAPile(2774);
      MakeAPile.makeAPile(2774);
      // Undeclared exception!
      MakeAPile.makeAPile(2774);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      List<Integer> list0 = MakeAPile.makeAPile(3295);
      assertEquals(3295, list0.size());
      assertTrue(list0.contains(3295));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MakeAPile makeAPile0 = new MakeAPile();
      MakeAPile.makeAPile(1396);
      MakeAPile.makeAPile(1241);
      int int0 = 2502;
      MakeAPile.makeAPile(2502);
      MakeAPile.makeAPile(0);
      MakeAPile.makeAPile(2426);
      MakeAPile.makeAPile(1560);
      // Undeclared exception!
      MakeAPile.makeAPile(3389);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      List<Integer> list0 = MakeAPile.makeAPile(430);
      assertTrue(list0.contains(430));
      assertEquals(430, list0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      List<Integer> list0 = MakeAPile.makeAPile(0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      List<Integer> list0 = MakeAPile.makeAPile(1);
      MakeAPile.makeAPile(0);
      MakeAPile makeAPile0 = new MakeAPile();
      MakeAPile.makeAPile((-1098));
      MakeAPile.makeAPile(0);
      List<Integer> list1 = MakeAPile.makeAPile(0);
      assertFalse(list1.equals((Object)list0));
      
      List<Integer> list2 = MakeAPile.makeAPile(1994);
      MakeAPile.makeAPile(0);
      List<Integer> list3 = MakeAPile.makeAPile(1290);
      assertTrue(list3.contains(1994));
      assertEquals(1290, list3.size());
      
      MakeAPile.makeAPile(0);
      MakeAPile.makeAPile((-1));
      MakeAPile.makeAPile(0);
      MakeAPile.makeAPile(0);
      List<Integer> list4 = MakeAPile.makeAPile(0);
      assertFalse(list4.equals((Object)list2));
  }
}
