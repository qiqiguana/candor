/*
 * This file was automatically generated by EvoSuite
 * Wed May 14 20:02:45 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.LargestSmallestIntegers;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class LargestSmallestIntegers_ESTest extends LargestSmallestIntegers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(180);
      Integer integer1 = new Integer(Integer.MAX_VALUE);
      Object object0 = new Object();
      List<Object> list0 = List.of((Object) integer0, (Object) integer1, object0, object0, object0, object0);
      // Undeclared exception!
      try { 
        LargestSmallestIntegers.largestSmallestIntegers(list0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.lang.Integer (java.lang.Object and java.lang.Integer are in module java.base of loader 'bootstrap')
         //
         verifyException("original.LargestSmallestIntegers", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(163);
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer((-25));
      List<Object> list0 = List.of((Object) integer0, (Object) integer0, (Object) integer1, (Object) integer2, (Object) integer0, (Object) integer1);
      List<Integer> list1 = LargestSmallestIntegers.largestSmallestIntegers(list0);
      assertTrue(list1.contains((-1)));
      assertFalse(list1.contains((-25)));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        LargestSmallestIntegers.largestSmallestIntegers((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.LargestSmallestIntegers", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Integer integer0 = new Integer(0);
      List<Object> list0 = List.of((Object) integer0, (Object) integer0, (Object) integer0, (Object) integer0, (Object) integer0, (Object) integer0);
      List<Integer> list1 = LargestSmallestIntegers.largestSmallestIntegers(list0);
      assertFalse(list1.contains(0));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LargestSmallestIntegers largestSmallestIntegers0 = new LargestSmallestIntegers();
      List<Object> list0 = List.of((Object) largestSmallestIntegers0, (Object) largestSmallestIntegers0, (Object) largestSmallestIntegers0, (Object) largestSmallestIntegers0, (Object) largestSmallestIntegers0);
      // Undeclared exception!
      try { 
        LargestSmallestIntegers.largestSmallestIntegers(list0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class original.LargestSmallestIntegers cannot be cast to class java.lang.Integer (original.LargestSmallestIntegers is in unnamed module of loader org.evosuite.instrumentation.InstrumentingClassLoader @5cb468b1; java.lang.Integer is in module java.base of loader 'bootstrap')
         //
         verifyException("original.LargestSmallestIntegers", e);
      }
  }
}
