/*
 * This file was automatically generated by EvoSuite
 * Wed May 14 21:55:01 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.SumProduct;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class SumProduct_ESTest extends SumProduct_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = linkedList0.subList(0, 0);
      List<Integer> list1 = SumProduct.sumProduct(linkedList0);
      linkedList0.push(list1);
      // Undeclared exception!
      try { 
        SumProduct.sumProduct(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        SumProduct.sumProduct((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.SumProduct", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Integer> list0 = SumProduct.sumProduct(linkedList0);
      List<Object> list1 = List.copyOf((Collection<?>) list0);
      List<Integer> list2 = SumProduct.sumProduct(list1);
      assertFalse(list2.equals((Object)list0));
      assertEquals(2, list1.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SumProduct sumProduct0 = new SumProduct();
      List<Object> list0 = List.of((Object) sumProduct0);
      // Undeclared exception!
      try { 
        SumProduct.sumProduct(list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid number type
         //
         verifyException("original.SumProduct", e);
      }
  }
}
