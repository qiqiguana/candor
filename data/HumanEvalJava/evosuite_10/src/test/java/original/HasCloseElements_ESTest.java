/*
 * This file was automatically generated by EvoSuite
 * Wed May 14 21:15:16 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.HasCloseElements;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class HasCloseElements_ESTest extends HasCloseElements_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(178.3699767);
      linkedList0.addLast(double0);
      linkedList0.add(double0);
      Double double1 = new Double(0.0);
      Boolean boolean0 = HasCloseElements.hasCloseElements(linkedList0, double1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(178.3699767);
      linkedList0.addLast(double0);
      Double double1 = new Double((-1.0));
      linkedList0.add(double1);
      Boolean boolean0 = HasCloseElements.hasCloseElements(linkedList0, double0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        HasCloseElements.hasCloseElements((List<Double>) null, (Double) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.HasCloseElements", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(178.3699767);
      linkedList0.addLast(double0);
      linkedList0.add(double0);
      Boolean boolean0 = HasCloseElements.hasCloseElements(linkedList0, double0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HasCloseElements hasCloseElements0 = new HasCloseElements();
  }
}
