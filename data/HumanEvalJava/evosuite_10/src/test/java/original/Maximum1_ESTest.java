/*
 * This file was automatically generated by EvoSuite
 * Wed May 14 19:58:07 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Maximum1;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class Maximum1_ESTest extends Maximum1_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-1268));
      List<Integer> list0 = List.of(integer1, integer1, integer0, integer1, integer0, integer1, integer1, integer1);
      List<Object> list1 = Maximum1.maximum(list0, 3);
      assertTrue(list1.contains(1));
      assertEquals(3, list1.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-1268));
      List<Integer> list0 = List.of(integer0, integer1, integer0, integer0, integer0, integer1, integer0, integer0);
      List<Object> list1 = Maximum1.maximum(list0, 3);
      assertFalse(list1.contains((-1268)));
      assertEquals(3, list1.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      List<Object> list0 = Maximum1.maximum(linkedList0, 4);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      List<Integer> list0 = linkedList0.subList(1, 1);
      linkedList0.add(1, integer0);
      // Undeclared exception!
      try { 
        Maximum1.maximum(list0, 1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(3621);
      List<Integer> list0 = List.of(integer0, integer0);
      // Undeclared exception!
      try { 
        Maximum1.maximum(list0, 3621);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ImmutableCollections", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        Maximum1.maximum((List<Integer>) null, 879);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Maximum1", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        Maximum1.maximum(linkedList0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Integer integer0 = new Integer(0);
      List<Integer> list0 = List.of(integer0, integer0);
      List<Object> list1 = Maximum1.maximum(list0, 0);
      assertFalse(list1.contains(0));
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      List<Object> list0 = Maximum1.maximum(linkedList0, 2332);
      assertFalse(list0.contains(2332));
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Maximum1 maximum1_0 = new Maximum1();
  }
}
