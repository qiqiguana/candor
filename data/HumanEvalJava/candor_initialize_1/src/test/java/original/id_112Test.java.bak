package original;

import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
/**
* Test class of ReverseDelete.
*/
class ReverseDeleteTest {
    @Test
    void testReverseDelete() {
        String s = "abcde";
        String c = "ae";
        List<Object> result = ReverseDelete.reverseDelete(s, c);
        assertTrue((boolean)result.get(1) == false);
    }
    @Test
    void testReverseDeleteWithValidInputs() {
        List<Object> result = ReverseDelete.reverseDelete("abcde", "ae");
        assertEquals(Arrays.asList("bcd", false), result);
    }
    @Test
    void testReverseDeleteWithSingleCharacterInput() {
        List<Object> result = ReverseDelete.reverseDelete("a", "a");
        assertEquals(Arrays.asList("", true), result);
    }
    @Test
    void testReverseDeleteWithEmptyStringInput() {
        List<Object> result = ReverseDelete.reverseDelete("abcdedcba", "");
        assertEquals(Arrays.asList("abcdedcba", true), result);
    }
    @Test
    void testReverseDeleteWithNoMatchingCharacters() {
        List<Object> result = ReverseDelete.reverseDelete("abcdedcba", "v");
        assertEquals(Arrays.asList("abcdedcba", true), result);
    }
    @Test
    void testReverseDeleteWithAllMatchingCharacters() {
        List<Object> result = ReverseDelete.reverseDelete("mamma", "mia");
        assertEquals(Arrays.asList("", true), result);
    }
    @Test
    public void test_reverse_delete_with_empty_strings() {
        List<Object> result = ReverseDelete.reverseDelete("", "");
        assertEquals(Arrays.asList("", true), result);
    }
    @Test
    public void test_reverse_delete_with_non_empty_strings() {
        List<Object> result = ReverseDelete.reverseDelete("hello", "");
        assertEquals(Arrays.asList("hello", false), result);
    }
    @Test
    public void test_reverse_delete_with_palindrome_string() {
        List<Object> result = ReverseDelete.reverseDelete("madam", "");
        assertEquals(Arrays.asList("madam", true), result);
    }
    @Test
    public void test_reverse_delete_with_non_palindrome_string() {
        List<Object> result = ReverseDelete.reverseDelete("hello", "");
        assertEquals(Arrays.asList("hello", false), result);
    }
    @Test
    public void test_reverse_delete_with_multiple_character_deletion_string_containing_all_characters_1() {
        List<Object> result = ReverseDelete.reverseDelete("abcdefghi", "abcdefghi");
        assertEquals(Arrays.asList("", true), result);
    }
    @Test
    public void test_reverse_delete_with_palindrome_string_and_multiple_character_deletion_string() {
        List<Object> result = ReverseDelete.reverseDelete("abcdedcba", "abc");
        assertEquals(Arrays.asList("ded", true), result);
    }
    @Test
    public void test_reverse_delete_with_palindrome_string_and_multiple_character_deletion_string_containing_all_characters_1() {
        List<Object> result = ReverseDelete.reverseDelete("abcdedcba", "abcdefghi");
        assertEquals(2, result.size());
        assertTrue(((String)result.get(0)).isEmpty());
        assertTrue((Boolean) result.get(1));
    }
    @Test
    public void test_reverse_delete_with_non_palindrome_string_and_multiple_character_deletion_string_containing_all_characters_2() {
        List<Object> result = ReverseDelete.reverseDelete("abcdefghi", "abcdefghi");
        assertEquals(Arrays.asList("").toArray()[0], result.toArray()[0]);
        assertTrue((Boolean)result.toArray()[1]);
    }
    @Test
    public void testReverseDelete_WithEmptyStrings() {
        List<Object> result = ReverseDelete.reverseDelete("", "");
        assertEquals(Arrays.asList("", true), result);
    }
    @Test
    public void testReverseDelete_WithSingleCharacter() {
        List<Object> result = ReverseDelete.reverseDelete("a", "");
        assertEquals(Arrays.asList("a", true), result);
    }
    @Test
    public void testReverseDelete_WithSameCharacters() {
        List<Object> result = ReverseDelete.reverseDelete("abc", "abc");
        assertEquals(Arrays.asList("", true), result);
    }
    @Test
    public void testReverseDelete_WithDifferentCharacters() {
        List<Object> result = ReverseDelete.reverseDelete("abcd", "efg");
        assertEquals(Arrays.asList("abcd", false), result);
    }
    @Test
    public void testReverseDelete_WithPalindrome() {
        List<Object> result = ReverseDelete.reverseDelete("aba", "");
        assertEquals(Arrays.asList("aba", true), result);
    }
    @Test
    public void testReverseDelete_WithNull() {
        assertThrows(NullPointerException.class, () -> ReverseDelete.reverseDelete(null, ""));
    }
}