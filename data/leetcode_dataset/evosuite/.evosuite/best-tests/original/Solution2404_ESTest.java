/*
 * This file was automatically generated by EvoSuite
 * Sat May 24 18:51:58 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Solution2404;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution2404_ESTest extends Solution2404_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Solution2404 solution2404_0 = new Solution2404();
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = 1;
      intArray0[2] = (-1);
      intArray0[3] = 446;
      intArray0[4] = 2088;
      intArray0[5] = (-1);
      intArray0[6] = (-93);
      int int0 = solution2404_0.mostFrequentEven(intArray0);
      assertEquals(446, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Solution2404 solution2404_0 = new Solution2404();
      // Undeclared exception!
      try { 
        solution2404_0.mostFrequentEven((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Solution2404", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Solution2404 solution2404_0 = new Solution2404();
      int[] intArray0 = new int[2];
      intArray0[0] = (-146);
      int int0 = solution2404_0.mostFrequentEven(intArray0);
      assertEquals((-146), int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Solution2404 solution2404_0 = new Solution2404();
      int[] intArray0 = new int[8];
      intArray0[4] = 3062;
      int int0 = solution2404_0.mostFrequentEven(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Solution2404 solution2404_0 = new Solution2404();
      int[] intArray0 = new int[2];
      intArray0[1] = 2;
      int int0 = solution2404_0.mostFrequentEven(intArray0);
      assertEquals(0, int0);
  }
}
