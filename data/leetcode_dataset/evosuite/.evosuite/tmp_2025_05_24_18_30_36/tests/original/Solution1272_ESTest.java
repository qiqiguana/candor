/*
 * This file was automatically generated by EvoSuite
 * Sat May 24 19:02:26 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Solution1272;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution1272_ESTest extends Solution1272_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Solution1272 solution1272_0 = new Solution1272();
      int[][] intArray0 = new int[9][1];
      int[] intArray1 = new int[4];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[1] = 601;
      intArray0[1] = intArray2;
      intArray0[2] = intArray0[1];
      intArray0[3] = intArray0[0];
      intArray0[4] = intArray0[3];
      intArray0[5] = intArray0[1];
      int[] intArray3 = new int[5];
      intArray3[1] = 3786;
      intArray0[6] = intArray3;
      // Undeclared exception!
      try { 
        solution1272_0.removeInterval(intArray0, intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("original.Solution1272", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Solution1272 solution1272_0 = new Solution1272();
      int[][] intArray0 = new int[4][8];
      int[] intArray1 = new int[6];
      intArray1[1] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      intArray2[1] = 2684;
      List<List<Integer>> list0 = solution1272_0.removeInterval(intArray0, intArray2);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Solution1272 solution1272_0 = new Solution1272();
      int[][] intArray0 = new int[9][1];
      int[] intArray1 = new int[4];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[1] = 601;
      intArray0[1] = intArray2;
      intArray0[2] = intArray0[1];
      intArray0[3] = intArray0[0];
      int[] intArray3 = new int[2];
      intArray3[0] = (-1356);
      intArray3[1] = 601;
      intArray0[4] = intArray3;
      // Undeclared exception!
      try { 
        solution1272_0.removeInterval(intArray0, intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("original.Solution1272", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Solution1272 solution1272_0 = new Solution1272();
      int[][] intArray0 = new int[3][2];
      int[] intArray1 = new int[9];
      intArray1[0] = (-735);
      int[] intArray2 = new int[7];
      intArray2[0] = (-85);
      intArray0[1] = intArray2;
      List<List<Integer>> list0 = solution1272_0.removeInterval(intArray0, intArray1);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Solution1272 solution1272_0 = new Solution1272();
      int[][] intArray0 = new int[6][9];
      int[] intArray1 = new int[2];
      int[] intArray2 = new int[4];
      intArray2[0] = (-1660);
      intArray2[1] = (-2968);
      intArray0[3] = intArray2;
      List<List<Integer>> list0 = solution1272_0.removeInterval(intArray0, intArray1);
      assertEquals(6, list0.size());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Solution1272 solution1272_0 = new Solution1272();
      int[][] intArray0 = new int[3][2];
      int[] intArray1 = new int[9];
      int[] intArray2 = new int[9];
      intArray2[0] = 1;
      intArray0[2] = intArray2;
      List<List<Integer>> list0 = solution1272_0.removeInterval(intArray0, intArray1);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Solution1272 solution1272_0 = new Solution1272();
      int[][] intArray0 = new int[1][6];
      int[] intArray1 = new int[8];
      intArray1[1] = 3924;
      intArray0[0] = intArray1;
      List<List<Integer>> list0 = solution1272_0.removeInterval(intArray0, intArray1);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Solution1272 solution1272_0 = new Solution1272();
      // Undeclared exception!
      try { 
        solution1272_0.removeInterval((int[][]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Solution1272", e);
      }
  }
}
