/*
 * This file was automatically generated by EvoSuite
 * Sat May 24 18:39:18 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Solution1899;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution1899_ESTest extends Solution1899_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Solution1899 solution1899_0 = new Solution1899();
      int[][] intArray0 = new int[3][8];
      int[] intArray1 = new int[7];
      intArray1[1] = 1099;
      boolean boolean0 = solution1899_0.mergeTriplets(intArray0, intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Solution1899 solution1899_0 = new Solution1899();
      int[][] intArray0 = new int[3][0];
      int[] intArray1 = new int[6];
      intArray1[1] = 3572;
      intArray0[0] = intArray1;
      intArray0[1] = intArray0[0];
      intArray0[2] = intArray0[1];
      boolean boolean0 = solution1899_0.mergeTriplets(intArray0, intArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Solution1899 solution1899_0 = new Solution1899();
      int[][] intArray0 = new int[0][5];
      int[] intArray1 = new int[4];
      intArray1[0] = 1;
      boolean boolean0 = solution1899_0.mergeTriplets(intArray0, intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Solution1899 solution1899_0 = new Solution1899();
      int[][] intArray0 = new int[3][0];
      int[] intArray1 = new int[6];
      intArray1[0] = 7;
      intArray0[0] = intArray1;
      intArray0[1] = intArray0[0];
      intArray0[2] = intArray0[1];
      boolean boolean0 = solution1899_0.mergeTriplets(intArray0, intArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Solution1899 solution1899_0 = new Solution1899();
      int[][] intArray0 = new int[5][8];
      int[] intArray1 = new int[7];
      intArray1[2] = 1088;
      boolean boolean0 = solution1899_0.mergeTriplets(intArray0, intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Solution1899 solution1899_0 = new Solution1899();
      int[][] intArray0 = new int[3][0];
      int[] intArray1 = new int[6];
      intArray1[2] = (-14);
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        solution1899_0.mergeTriplets(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("original.Solution1899", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Solution1899 solution1899_0 = new Solution1899();
      int[][] intArray0 = new int[3][0];
      int[] intArray1 = new int[6];
      intArray1[0] = 7;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      intArray0[1] = intArray2;
      // Undeclared exception!
      try { 
        solution1899_0.mergeTriplets(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("original.Solution1899", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Solution1899 solution1899_0 = new Solution1899();
      int[][] intArray0 = new int[0][5];
      // Undeclared exception!
      try { 
        solution1899_0.mergeTriplets(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Solution1899", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      Solution1899 solution1899_0 = new Solution1899();
      int[] intArray1 = new int[5];
      intArray1[2] = (-4007);
      boolean boolean0 = solution1899_0.mergeTriplets(intArray0, intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Solution1899 solution1899_0 = new Solution1899();
      int[][] intArray0 = new int[3][4];
      int[] intArray1 = new int[5];
      intArray1[1] = (-1490);
      boolean boolean0 = solution1899_0.mergeTriplets(intArray0, intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      Solution1899 solution1899_0 = new Solution1899();
      int[] intArray1 = new int[5];
      intArray1[0] = (-4007);
      boolean boolean0 = solution1899_0.mergeTriplets(intArray0, intArray1);
      assertFalse(boolean0);
  }
}
