/*
 * This file was automatically generated by EvoSuite
 * Sat May 24 17:51:30 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Solution1001;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution1001_ESTest extends Solution1001_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Solution1001 solution1001_0 = new Solution1001();
      int[][] intArray0 = new int[3][5];
      int[] intArray1 = new int[7];
      intArray1[0] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      intArray2[0] = 1;
      intArray2[1] = (-1);
      intArray0[1] = intArray2;
      int[] intArray3 = solution1001_0.gridIllumination(1, intArray0, intArray0);
      assertArrayEquals(new int[] {1, 1, 0}, intArray3);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Solution1001 solution1001_0 = new Solution1001();
      int[][] intArray0 = new int[0][3];
      int[] intArray1 = solution1001_0.gridIllumination(0, intArray0, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Solution1001 solution1001_0 = new Solution1001();
      // Undeclared exception!
      try { 
        solution1001_0.gridIllumination((-1), (int[][]) null, (int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Solution1001", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Solution1001 solution1001_0 = new Solution1001();
      int[][] intArray0 = new int[3][3];
      int[] intArray1 = new int[0];
      intArray0[2] = intArray1;
      // Undeclared exception!
      try { 
        solution1001_0.gridIllumination(0, intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("original.Solution1001", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int[][] intArray0 = new int[2][8];
      int[] intArray1 = new int[3];
      intArray1[1] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[20];
      intArray2[0] = 1;
      intArray0[1] = intArray2;
      Solution1001 solution1001_0 = new Solution1001();
      int[] intArray3 = solution1001_0.gridIllumination(1, intArray0, intArray0);
      assertArrayEquals(new int[] {1, 1}, intArray3);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int[][] intArray0 = new int[2][2];
      Solution1001 solution1001_0 = new Solution1001();
      int[] intArray1 = solution1001_0.gridIllumination(0, intArray0, intArray0);
      assertArrayEquals(new int[] {1, 1}, intArray1);
      
      int[][] intArray2 = new int[1][0];
      intArray2[0] = intArray1;
      int[] intArray3 = solution1001_0.gridIllumination(0, intArray2, intArray0);
      assertArrayEquals(new int[] {1, 1}, intArray3);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      int[][] intArray0 = new int[8][2];
      Solution1001 solution1001_0 = new Solution1001();
      int[] intArray1 = solution1001_0.gridIllumination(1312, intArray0, intArray0);
      assertArrayEquals(new int[] {1, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      
      int[][] intArray2 = new int[1][3];
      intArray2[0] = intArray1;
      int[] intArray3 = solution1001_0.gridIllumination(1312, intArray2, intArray0);
      assertArrayEquals(new int[] {1, 0, 0, 0, 0, 0, 0, 0}, intArray3);
  }
}
