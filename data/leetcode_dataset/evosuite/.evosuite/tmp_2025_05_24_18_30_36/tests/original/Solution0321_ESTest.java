/*
 * This file was automatically generated by EvoSuite
 * Sat May 24 17:58:03 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Solution0321;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution0321_ESTest extends Solution0321_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[2];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = 1997;
      intArray0[1] = 1997;
      int[] intArray1 = solution0321_0.maxNumber(intArray0, intArray0, 0);
      int[] intArray2 = solution0321_0.maxNumber(intArray1, intArray0, 1997);
      int[] intArray3 = solution0321_0.maxNumber(intArray2, intArray0, 1997);
      solution0321_0.maxNumber(intArray0, intArray3, 0);
      int int2 = (-2951);
      // Undeclared exception!
      try { 
        solution0321_0.maxNumber(intArray1, intArray1, (-2951));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2951
         //
         verifyException("original.Solution0321", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[0];
      int int0 = 0;
      int[] intArray1 = solution0321_0.maxNumber(intArray0, intArray0, 0);
      int[] intArray2 = solution0321_0.maxNumber(intArray0, intArray1, 1414);
      int[] intArray3 = solution0321_0.maxNumber(intArray2, intArray1, 0);
      int[] intArray4 = new int[4];
      intArray4[0] = 0;
      intArray4[1] = 1414;
      intArray4[2] = 1414;
      intArray4[3] = 1414;
      int int1 = 0;
      int[] intArray5 = solution0321_0.maxNumber(intArray0, intArray4, 0);
      int[] intArray6 = solution0321_0.maxNumber(intArray1, intArray0, 1414);
      int int2 = 1;
      int[] intArray7 = solution0321_0.maxNumber(intArray1, intArray3, 1);
      int int3 = 0;
      solution0321_0.maxNumber(intArray1, intArray7, 0);
      solution0321_0.maxNumber(intArray5, intArray1, 1414);
      solution0321_0.maxNumber(intArray3, intArray6, 1414);
      // Undeclared exception!
      try { 
        solution0321_0.maxNumber(intArray7, intArray5, (-2615));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2615
         //
         verifyException("original.Solution0321", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[7];
      intArray0[1] = 1997;
      int[] intArray1 = solution0321_0.maxNumber(intArray0, intArray0, 1997);
      // Undeclared exception!
      solution0321_0.maxNumber(intArray1, intArray0, 1997);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[6];
      intArray0[0] = 2181;
      int[] intArray1 = solution0321_0.maxNumber(intArray0, intArray0, 2181);
      // Undeclared exception!
      solution0321_0.maxNumber(intArray1, intArray0, 104);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[7];
      intArray0[1] = 1997;
      int[] intArray1 = solution0321_0.maxNumber(intArray0, intArray0, 1997);
      // Undeclared exception!
      solution0321_0.maxNumber(intArray1, intArray0, 1665);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      // Undeclared exception!
      try { 
        solution0321_0.maxNumber((int[]) null, (int[]) null, (-345));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Solution0321", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int[] intArray1 = solution0321_0.maxNumber(intArray0, intArray0, 1151);
      int[] intArray2 = solution0321_0.maxNumber(intArray1, intArray1, 0);
      int[] intArray3 = solution0321_0.maxNumber(intArray1, intArray1, 0);
      int[] intArray4 = solution0321_0.maxNumber(intArray3, intArray0, 0);
      int[] intArray5 = solution0321_0.maxNumber(intArray4, intArray3, 0);
      int[] intArray6 = solution0321_0.maxNumber(intArray3, intArray1, 1);
      solution0321_0.maxNumber(intArray4, intArray5, 0);
      solution0321_0.maxNumber(intArray0, intArray6, 0);
      solution0321_0.maxNumber(intArray0, intArray2, 0);
      solution0321_0.maxNumber(intArray2, intArray5, 0);
      // Undeclared exception!
      try { 
        solution0321_0.maxNumber(intArray5, (int[]) null, 1101);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Solution0321", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[2];
      solution0321_0.maxNumber(intArray0, intArray0, 1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[6];
      intArray0[0] = 2181;
      intArray0[1] = 377;
      intArray0[2] = 0;
      intArray0[3] = 2380;
      intArray0[4] = 883;
      intArray0[5] = 0;
      solution0321_0.maxNumber(intArray0, intArray0, 12);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[4];
      intArray0[0] = (-2901);
      intArray0[1] = 0;
      intArray0[2] = 1348;
      intArray0[3] = (-1463);
      solution0321_0.maxNumber(intArray0, intArray0, 1348);
      int[] intArray1 = new int[8];
      intArray1[0] = (-1463);
      intArray1[1] = 1348;
      intArray1[2] = 0;
      intArray1[3] = (-2901);
      intArray1[4] = (-1463);
      intArray1[5] = 1348;
      intArray1[6] = 1348;
      intArray1[7] = (-1463);
      int[] intArray2 = solution0321_0.maxNumber(intArray1, intArray1, 1348);
      int[] intArray3 = solution0321_0.maxNumber(intArray0, intArray0, 0);
      solution0321_0.maxNumber(intArray2, intArray3, 1348);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[6];
      int[] intArray1 = solution0321_0.maxNumber(intArray0, intArray0, 0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-341);
      intArray0[2] = (-496);
      intArray0[3] = 0;
      intArray0[4] = (-1051);
      intArray0[5] = 3034;
      int int0 = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-420);
      int int1 = 718;
      intArray0[8] = 718;
      int[] intArray1 = solution0321_0.maxNumber(intArray0, intArray0, 718);
      int[] intArray2 = solution0321_0.maxNumber(intArray1, intArray0, 0);
      // Undeclared exception!
      try { 
        solution0321_0.maxNumber(intArray2, intArray2, (-1438));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1438
         //
         verifyException("original.Solution0321", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = (-6391);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 130;
      intArray0[5] = (-1799);
      int[] intArray1 = solution0321_0.maxNumber(intArray0, intArray0, 1);
      solution0321_0.maxNumber(intArray1, intArray0, 130);
      int[] intArray2 = new int[4];
      intArray2[0] = 1;
      intArray2[1] = (-1799);
      intArray2[2] = 0;
      intArray2[3] = 0;
      // Undeclared exception!
      try { 
        solution0321_0.maxNumber(intArray0, intArray2, (-6391));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -6391
         //
         verifyException("original.Solution0321", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[0];
      int[] intArray1 = solution0321_0.maxNumber(intArray0, intArray0, 0);
      assertNotSame(intArray1, intArray0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[9];
      intArray0[0] = (-1786);
      int int0 = 0;
      intArray0[1] = 0;
      int int1 = (-4568);
      intArray0[2] = (-4568);
      intArray0[3] = 613;
      intArray0[4] = (-594);
      intArray0[5] = 0;
      intArray0[6] = 2245;
      intArray0[7] = (-422);
      intArray0[8] = 0;
      int[] intArray1 = solution0321_0.maxNumber(intArray0, intArray0, 1367);
      // Undeclared exception!
      try { 
        solution0321_0.maxNumber(intArray1, intArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1
         //
         verifyException("original.Solution0321", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[1];
      intArray0[0] = 1753;
      int[] intArray1 = new int[9];
      intArray1[0] = 1753;
      intArray1[1] = 0;
      intArray1[2] = 1753;
      intArray1[3] = 1753;
      intArray1[4] = 1753;
      intArray1[5] = 1753;
      intArray1[6] = 1753;
      intArray1[7] = 1753;
      intArray1[8] = 1753;
      // Undeclared exception!
      try { 
        solution0321_0.maxNumber(intArray0, intArray1, (-30));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -30
         //
         verifyException("original.Solution0321", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        solution0321_0.maxNumber(intArray0, intArray0, (-3363));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3363
         //
         verifyException("original.Solution0321", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[5];
      intArray0[0] = (-82);
      int int0 = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-144);
      int int1 = 0;
      intArray0[3] = 0;
      int int2 = (-2121);
      intArray0[4] = (-2121);
      // Undeclared exception!
      try { 
        solution0321_0.maxNumber(intArray0, intArray0, (-144));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -144
         //
         verifyException("original.Solution0321", e);
      }
  }
}
