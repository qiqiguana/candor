/*
 * This file was automatically generated by EvoSuite
 * Sat May 24 19:11:22 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Solution2912;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class Solution2912_ESTest extends Solution2912_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Solution2912 solution2912_0 = new Solution2912();
      assertNotNull(solution2912_0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-683);
      intArray0[1] = (-683);
      intArray0[2] = (-683);
      int int0 = solution2912_0.numberOfWays((-683), (-683), (-683), intArray0, intArray0);
      assertEquals(1, int0);
      assertArrayEquals(new int[] {(-683), (-683), (-683)}, intArray0);
      assertEquals(3, intArray0.length);
      
      int int1 = solution2912_0.numberOfWays(2143, (-683), (-1), intArray0, intArray0);
      assertEquals(1, int1);
      assertArrayEquals(new int[] {(-683), (-683), (-683)}, intArray0);
      assertEquals(3, intArray0.length);
      
      int int2 = solution2912_0.numberOfWays(0, (-3091), (-1297), intArray0, intArray0);
      assertEquals(1, int2);
      assertArrayEquals(new int[] {(-683), (-683), (-683)}, intArray0);
      assertEquals(3, intArray0.length);
      
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 1;
      intArray1[4] = 1;
      intArray1[5] = 1;
      intArray1[6] = 1;
      intArray1[7] = 1;
      intArray1[8] = (-1297);
      int int3 = solution2912_0.numberOfWays((-3091), 1, 2143, intArray1, intArray0);
      assertEquals((-553930247), int3);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-683), (-683), (-683)}, intArray0);
      assertArrayEquals(new int[] {1, 0, 0, 1, 1, 1, 1, 1, (-1297)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(9, intArray1.length);
      
      // Undeclared exception!
      solution2912_0.numberOfWays(1, 1, 1000000007, intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Solution2912 solution2912_0 = new Solution2912();
      assertNotNull(solution2912_0);
      
      int int0 = 0;
      int[] intArray0 = new int[2];
      intArray0[0] = 1560;
      intArray0[1] = 0;
      int int1 = solution2912_0.numberOfWays(0, 0, 0, intArray0, intArray0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {1560, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      int int2 = 0;
      int int3 = 0;
      int int4 = solution2912_0.numberOfWays(0, 0, 0, intArray0, intArray0);
      assertEquals(1, int4);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertArrayEquals(new int[] {1560, 0}, intArray0);
      assertEquals(2, intArray0.length);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-409);
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 1;
      int int5 = solution2912_0.numberOfWays(953, 1, 0, intArray0, intArray1);
      assertEquals(0, int5);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertArrayEquals(new int[] {1560, 0}, intArray0);
      assertArrayEquals(new int[] {(-409), 0, 0, 0, 1}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(5, intArray1.length);
      
      int int6 = 0;
      int[] intArray2 = null;
      // Undeclared exception!
      try { 
        solution2912_0.numberOfWays(0, 1, 0, (int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Solution2912", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Solution2912 solution2912_0 = new Solution2912();
      assertNotNull(solution2912_0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-683);
      intArray0[1] = (-683);
      intArray0[2] = (-683);
      int int0 = solution2912_0.numberOfWays((-683), (-683), (-683), intArray0, intArray0);
      assertEquals(1, int0);
      assertArrayEquals(new int[] {(-683), (-683), (-683)}, intArray0);
      assertEquals(3, intArray0.length);
      
      int int1 = solution2912_0.numberOfWays(2143, (-683), (-1), intArray0, intArray0);
      assertEquals(1, int1);
      assertArrayEquals(new int[] {(-683), (-683), (-683)}, intArray0);
      assertEquals(3, intArray0.length);
      
      int int2 = 0;
      int int3 = solution2912_0.numberOfWays(0, (-3091), (-1297), intArray0, intArray0);
      assertEquals(1, int3);
      assertFalse(int3 == int2);
      assertArrayEquals(new int[] {(-683), (-683), (-683)}, intArray0);
      assertEquals(3, intArray0.length);
      
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[4] = 1;
      intArray1[1] = (-683);
      intArray1[2] = 1;
      intArray1[3] = 1;
      intArray1[4] = 1;
      intArray1[5] = 1;
      intArray1[6] = 1;
      intArray1[7] = 1;
      intArray1[8] = (-1297);
      int int4 = solution2912_0.numberOfWays((-3091), 1, 2143, intArray1, intArray0);
      assertEquals(281271320, int4);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-683), (-683), (-683)}, intArray0);
      assertArrayEquals(new int[] {0, (-683), 1, 1, 1, 1, 1, 1, (-1297)}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(9, intArray1.length);
      
      int int5 = 1000000007;
      // Undeclared exception!
      solution2912_0.numberOfWays(1, 1, 1000000007, intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Solution2912 solution2912_0 = new Solution2912();
      assertNotNull(solution2912_0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 2873;
      intArray0[1] = 0;
      intArray0[2] = 2873;
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 2873;
      intArray1[1] = 2873;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 1209;
      intArray1[7] = (-1);
      intArray1[8] = 1276;
      int int0 = solution2912_0.numberOfWays(2873, 0, (-1), intArray0, intArray1);
      assertEquals(0, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2873, 0, 2873, (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {2873, 2873, 0, 0, 0, 0, 1209, (-1), 1276}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(9, intArray1.length);
      
      int int1 = solution2912_0.numberOfWays(0, (-3335), 0, intArray1, intArray1);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {2873, 2873, 0, 0, 0, 0, 1209, (-1), 1276}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(9, intArray1.length);
      
      int int2 = solution2912_0.numberOfWays(0, 1, 0, intArray0, intArray0);
      assertEquals(1, int2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int2 == int0);
      assertArrayEquals(new int[] {2873, 0, 2873, (-1), (-1)}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertEquals(5, intArray0.length);
      
      int[] intArray2 = new int[8];
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      
      intArray2[0] = 0;
      intArray2[1] = 1;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 2873;
      intArray2[5] = 1000000007;
      intArray2[6] = 0;
      intArray2[7] = 1276;
      int int3 = solution2912_0.numberOfWays(1000000007, 1209, 929, intArray2, intArray0);
      assertEquals(438508104, int3);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertArrayEquals(new int[] {2873, 0, 2873, (-1), (-1)}, intArray0);
      assertArrayEquals(new int[] {0, 1, 0, 0, 2873, 1000000007, 0, 1276}, intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals(8, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Solution2912 solution2912_0 = new Solution2912();
      assertNotNull(solution2912_0);
      
      int[] intArray0 = new int[7];
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      int int0 = solution2912_0.numberOfWays(0, 0, 0, intArray0, intArray0);
      assertEquals(1, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray1[2] = 0;
      intArray1[3] = 1;
      intArray1[4] = 1;
      int int1 = solution2912_0.numberOfWays(12, (-1106), 0, intArray0, intArray1);
      assertEquals(0, int1);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 1, 0, 1, 1}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(5, intArray1.length);
      
      int int2 = solution2912_0.numberOfWays((-328), 1, 0, intArray1, intArray1);
      assertEquals(1, int2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int2 == int1);
      assertArrayEquals(new int[] {0, 1, 0, 1, 1}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray1.length);
      
      int[] intArray2 = new int[7];
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = 0;
      int int3 = solution2912_0.numberOfWays(1, (-1806), 1, intArray1, intArray1);
      assertEquals(0, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 1, 0, 1, 1}, intArray1);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertEquals(5, intArray1.length);
      
      int int4 = solution2912_0.numberOfWays(12, (-3473), 0, intArray2, intArray0);
      assertEquals(1, int4);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertEquals(7, intArray2.length);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Solution2912 solution2912_0 = new Solution2912();
      assertNotNull(solution2912_0);
      
      int int0 = (-774);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        solution2912_0.numberOfWays(1000000007, (-774), 1, (int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Solution2912", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Solution2912 solution2912_0 = new Solution2912();
      assertNotNull(solution2912_0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 795;
      intArray0[1] = 3504;
      intArray0[2] = (-2515);
      intArray0[3] = (-2515);
      intArray0[4] = 795;
      intArray0[5] = 1;
      intArray0[6] = 795;
      intArray0[7] = 795;
      intArray0[8] = (-2515);
      int[] intArray1 = new int[9];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 3504;
      intArray1[1] = 0;
      intArray1[2] = 795;
      intArray1[3] = 3504;
      intArray1[4] = 795;
      intArray1[5] = 3504;
      intArray1[6] = 795;
      intArray1[7] = 795;
      intArray1[8] = 1;
      int int0 = solution2912_0.numberOfWays(795, 795, (-2515), intArray0, intArray1);
      assertEquals(0, int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {795, 3504, (-2515), (-2515), 795, 1, 795, 795, (-2515)}, intArray0);
      assertArrayEquals(new int[] {3504, 0, 795, 3504, 795, 3504, 795, 795, 1}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(9, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Solution2912 solution2912_0 = new Solution2912();
      assertNotNull(solution2912_0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 3504;
      intArray0[1] = 3504;
      intArray0[2] = 3504;
      int int0 = solution2912_0.numberOfWays(3504, 3504, 3504, intArray0, intArray0);
      assertEquals(500370322, int0);
      assertArrayEquals(new int[] {3504, 3504, 3504}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Solution2912 solution2912_0 = new Solution2912();
      assertNotNull(solution2912_0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        solution2912_0.numberOfWays(1213, 1213, 0, intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("original.Solution2912", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Solution2912 solution2912_0 = new Solution2912();
      assertNotNull(solution2912_0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1357);
      intArray0[1] = (-1357);
      intArray0[2] = (-1357);
      int int0 = solution2912_0.numberOfWays((-1357), (-1357), (-1357), intArray0, intArray0);
      assertEquals(1, int0);
      assertArrayEquals(new int[] {(-1357), (-1357), (-1357)}, intArray0);
      assertEquals(3, intArray0.length);
      
      int int1 = solution2912_0.numberOfWays(1, (-3690), (-1357), intArray0, intArray0);
      assertEquals(1, int1);
      assertArrayEquals(new int[] {(-1357), (-1357), (-1357)}, intArray0);
      assertEquals(3, intArray0.length);
      
      int int2 = solution2912_0.numberOfWays((-1084), 1, 1, intArray0, intArray0);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new int[] {(-1357), (-1357), (-1357)}, intArray0);
      assertEquals(3, intArray0.length);
      
      int int3 = solution2912_0.numberOfWays(0, (-3690), (-605), intArray0, intArray0);
      assertEquals(1, int3);
      assertFalse(int3 == int2);
      assertArrayEquals(new int[] {(-1357), (-1357), (-1357)}, intArray0);
      assertEquals(3, intArray0.length);
      
      int int4 = solution2912_0.numberOfWays((-3690), 1, (-1357), intArray0, intArray0);
      assertEquals(1, int4);
      assertFalse(int4 == int2);
      assertArrayEquals(new int[] {(-1357), (-1357), (-1357)}, intArray0);
      assertEquals(3, intArray0.length);
      
      int int5 = solution2912_0.numberOfWays((-3915), 1, 0, intArray0, intArray0);
      assertEquals(1, int5);
      assertFalse(int5 == int2);
      assertArrayEquals(new int[] {(-1357), (-1357), (-1357)}, intArray0);
      assertEquals(3, intArray0.length);
      
      int int6 = solution2912_0.numberOfWays((-450), 2875, (-1), intArray0, intArray0);
      assertEquals(1, int6);
      assertFalse(int6 == int2);
      assertArrayEquals(new int[] {(-1357), (-1357), (-1357)}, intArray0);
      assertEquals(3, intArray0.length);
      
      int int7 = solution2912_0.numberOfWays(0, 2875, 2, intArray0, intArray0);
      assertEquals(2873, int7);
      assertFalse(int7 == int1);
      assertFalse(int7 == int3);
      assertFalse(int7 == int4);
      assertFalse(int7 == int0);
      assertFalse(int7 == int5);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertArrayEquals(new int[] {(-1357), (-1357), (-1357)}, intArray0);
      assertEquals(3, intArray0.length);
      
      int int8 = solution2912_0.numberOfWays(0, (-1829), 1, intArray0, intArray0);
      assertEquals(0, int8);
      assertFalse(int8 == int6);
      assertFalse(int8 == int5);
      assertFalse(int8 == int0);
      assertFalse(int8 == int4);
      assertFalse(int8 == int1);
      assertFalse(int8 == int3);
      assertFalse(int8 == int7);
      assertArrayEquals(new int[] {(-1357), (-1357), (-1357)}, intArray0);
      assertEquals(3, intArray0.length);
      
      int int9 = solution2912_0.numberOfWays((-1357), (-3915), (-1357), intArray0, intArray0);
      assertEquals(1, int9);
      assertFalse(int9 == int8);
      assertFalse(int9 == int7);
      assertFalse(int9 == int2);
      assertArrayEquals(new int[] {(-1357), (-1357), (-1357)}, intArray0);
      assertEquals(3, intArray0.length);
      
      int int10 = solution2912_0.numberOfWays((-1357), 2873, 2873, intArray0, intArray0);
      assertEquals((-864429729), int10);
      assertFalse(int10 == int9);
      assertFalse(int10 == int2);
      assertFalse(int10 == int3);
      assertFalse(int10 == int7);
      assertFalse(int10 == int0);
      assertFalse(int10 == int1);
      assertFalse(int10 == int4);
      assertFalse(int10 == int8);
      assertFalse(int10 == int6);
      assertFalse(int10 == int5);
      assertArrayEquals(new int[] {(-1357), (-1357), (-1357)}, intArray0);
      assertEquals(3, intArray0.length);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = (-494);
      intArray1[3] = 0;
      intArray1[4] = (-1);
      intArray1[5] = 0;
      intArray1[6] = 1;
      int int11 = solution2912_0.numberOfWays(626, 1, (-494), intArray1, intArray1);
      assertEquals(1, int11);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int11 == int2);
      assertFalse(int11 == int10);
      assertFalse(int11 == int7);
      assertFalse(int11 == int8);
      assertArrayEquals(new int[] {0, 0, (-494), 0, (-1), 0, 1}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Solution2912 solution2912_0 = new Solution2912();
      int[] intArray0 = new int[3];
      intArray0[0] = 3687;
      intArray0[1] = (-2484);
      intArray0[2] = 3687;
      int int0 = solution2912_0.numberOfWays(3687, 0, 3687, intArray0, intArray0);
      assertEquals((-487991012), int0);
      
      int[] intArray1 = new int[8];
      intArray1[0] = (-2152);
      intArray1[1] = 3687;
      intArray1[2] = 0;
      intArray1[3] = (-2484);
      intArray1[4] = (-487991012);
      intArray1[5] = (-487991012);
      intArray1[6] = 0;
      intArray1[7] = (-487991012);
      solution2912_0.numberOfWays((-2484), (-2152), 0, intArray1, intArray1);
      int int1 = solution2912_0.numberOfWays((-1790), (-2152), 1, intArray1, intArray1);
      int[] intArray2 = new int[9];
      intArray2[0] = 0;
      intArray2[1] = (-1790);
      intArray2[2] = 0;
      intArray2[3] = 4;
      intArray2[4] = (-2484);
      intArray2[5] = (-2484);
      intArray2[6] = 0;
      intArray2[7] = (-2484);
      intArray2[8] = (-2484);
      int int2 = solution2912_0.numberOfWays(3687, 4, (-487991012), intArray2, intArray0);
      assertTrue(int2 == int1);
  }
}
