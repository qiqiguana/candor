/*
 * This file was automatically generated by EvoSuite
 * Wed May 14 20:02:49 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.LargestSmallestIntegers;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class LargestSmallestIntegers_ESTest extends LargestSmallestIntegers_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1317);
      List<Integer> list0 = List.of(integer0, integer0, integer1);
      linkedList0.addAll((Collection<?>) list0);
      List<Integer> list1 = LargestSmallestIntegers.largestSmallestIntegers(linkedList0);
      assertEquals(3, linkedList0.size());
      assertTrue(list1.contains(1));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer((-2147483613));
      Integer integer1 = Integer.valueOf((-1963));
      Integer integer2 = Integer.getInteger("XE@u", integer1);
      List<Integer> list0 = List.of(integer0, integer2, integer0);
      linkedList0.addAll((Collection<?>) list0);
      List<Integer> list1 = LargestSmallestIntegers.largestSmallestIntegers(linkedList0);
      assertTrue(list1.contains((-1963)));
      assertEquals(2, list1.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      // Undeclared exception!
      try { 
        LargestSmallestIntegers.largestSmallestIntegers(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.LargestSmallestIntegers", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = List.of((Object) linkedList0, (Object) linkedList0, (Object) linkedList0, (Object) linkedList0, (Object) linkedList0);
      // Undeclared exception!
      try { 
        LargestSmallestIntegers.largestSmallestIntegers(list0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.util.LinkedList cannot be cast to class java.lang.Integer (java.util.LinkedList and java.lang.Integer are in module java.base of loader 'bootstrap')
         //
         verifyException("original.LargestSmallestIntegers", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer((-13));
      List<Object> list0 = List.of((Object) integer0, (Object) integer0);
      List<Integer> list1 = LargestSmallestIntegers.largestSmallestIntegers(list0);
      assertTrue(list1.contains((-13)));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(0);
      List<Object> list0 = List.of((Object) integer0, (Object) integer0);
      List<Integer> list1 = LargestSmallestIntegers.largestSmallestIntegers(list0);
      assertFalse(list1.contains(0));
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LargestSmallestIntegers largestSmallestIntegers0 = new LargestSmallestIntegers();
  }
}
