/*
 * This file was automatically generated by EvoSuite
 * Wed May 14 19:30:42 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Encode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class Encode_ESTest extends Encode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = Encode.encode("Z -csqHfZ4^jX{SQ");
      assertEquals("z -CSQhFz4^Jx{sq", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = Encode.encode("X664m_z");
      assertEquals("x664M_Z", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = Encode.encode("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        Encode.encode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Encode", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = Encode.encode(">r& _vTK,^Y$ua");
      assertEquals(">R& _Vtk,^y$WC", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = Encode.encode("U");
      assertEquals("w", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = Encode.encode("original.Encode");
      assertEquals("QRKGKNCL.gNCQDG", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = Encode.encode("dAD\"7");
      assertEquals("Dcd\"7", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = Encode.encode("f}\"LI#");
      assertEquals("F}\"lk#", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = Encode.encode(" Je'_g&Oi]&");
      assertEquals(" jG'_G&qK]&", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Encode encode0 = new Encode();
  }
}
