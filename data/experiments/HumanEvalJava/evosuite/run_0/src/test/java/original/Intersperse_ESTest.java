/*
 * This file was automatically generated by EvoSuite
 * Wed May 14 22:00:43 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Intersperse;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class Intersperse_ESTest extends Intersperse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = linkedList0.subList(0, 0);
      linkedList0.clear();
      // Undeclared exception!
      try { 
        Intersperse.intersperse(list0, 1340);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        Intersperse.intersperse((List<Object>) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Intersperse", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      List<Object> list0 = Intersperse.intersperse(linkedList0, 0);
      assertFalse(list0.contains(0));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Intersperse intersperse0 = new Intersperse();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) intersperse0;
      objectArray0[1] = (Object) intersperse0;
      objectArray0[2] = (Object) intersperse0;
      objectArray0[3] = (Object) intersperse0;
      objectArray0[4] = (Object) intersperse0;
      List<Object> list0 = List.of(objectArray0);
      List<Object> list1 = Intersperse.intersperse(list0, 0);
      assertTrue(list1.contains(0));
      assertEquals(9, list1.size());
  }
}
