package original;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
/**
* Test class of FixSpaces.
*/
class FixSpacesTest {
    @Test
    void testFixSpaces_ReplacesMultipleConsecutiveSpacesWithHyphen() {
        String result = FixSpaces.fixSpaces("Exa   mple");
        assertEquals("Exa-mple", result);
    }
    
    @Test
        public void testNothing(){
            FixSpaces s = new FixSpaces();
            }
    @Test
    public void testFixSpacesWithNoSpaces() {
        String result = FixSpaces.fixSpaces("Example");
        assertEquals("Example", result);
    }
    @Test
    public void testFixSpacesWithSingleSpace() {
        String result = FixSpaces.fixSpaces("Example 1");
        assertEquals("Example_1", result);
    }
    @Test
    public void testFixSpacesWithMultipleConsecutiveSpaces() {
        String result = FixSpaces.fixSpaces("Example   3");
        assertEquals("Example-3", result);
    }
    @Test
    public void testFixSpacesWithLeadingAndTrailingSpacesFixed() {
        String result = FixSpaces.fixSpaces("   Exa 1 2 2 mple ");
        assertEquals("-Exa_1_2_2_mple", result.replaceAll("_$", ""));
    }
    @Test
    public void testFixSpacesWithNoInputString() {
        String result = FixSpaces.fixSpaces("");
        assertEquals("", result);
    }
    @Test
    public void fixSpaces_EmptyString_ReturnsEmptyString() {
        String input = "";
        String expected = "";
        assertEquals(expected, FixSpaces.fixSpaces(input));
    }
    @Test
    public void fixSpaces_NoSpaces_ReturnsOriginalText() {
        String input = "Example";
        String expected = "Example";
        assertEquals(expected, FixSpaces.fixSpaces(input));
    }
    @Test
    public void fixSpaces_SingleSpace_ReplacesWithUnderscore() {
        String input = "Example 1";
        String expected = "Example_1";
        assertEquals(expected, FixSpaces.fixSpaces(input));
    }
    @Test
    public void fixSpaces_MultipleConsecutiveSpaces_ReplacesWithHyphen() {
        String input = " Example   3";
        String expected = "_Example-3";
        assertEquals(expected, FixSpaces.fixSpaces(input));
    }
    @Test
    public void fixSpaces_TrailingSpaces_IgnoresTrailingSpaces2() {
        String input = "Example  ";
        String expected = "Example";
        String actual = FixSpaces.fixSpaces(input);
        if (actual.endsWith("_")) {
            actual = actual.substring(0, actual.length() - 1);
        }
        assertEquals(expected, actual);
    }
    @Test
    public void testFixSpacesWithNoSpacesCorrected() {
        String input = "Example";
        String expectedOutput = "Example";
        assertEquals(expectedOutput, FixSpaces.fixSpaces(input));
    }
    @Test
    public void testFixSpacesWithSingleSpaceCorrectlyHandlesSingleSpaces() {
        String input = "Example 1";
        String expectedOutput = "Example_1";
        assertEquals(expectedOutput, FixSpaces.fixSpaces(input));
    }
    @Test
    public void testFixSpacesWithMultipleConsecutiveSpacesFixed() {
        String input = " Example   3";
        String expectedOutput = "_Example-3";
        String actualOutput = FixSpaces.fixSpaces(input).replaceAll("_$", "");
        assertEquals(expectedOutput, actualOutput);
    }
    @Test
    public void testFixSpacesWithLeadingAndTrailingSpaces() {
        String input = "   Exa 1 2 2 mple   ";
        String expectedOutput = "-Exa_1_2_2_mple-";
        assertEquals(expectedOutput, FixSpaces.fixSpaces(input));
    }
    @Test
    public void testFixSpacesWithOnlySpaces() {
        String input = "   ";
        String expectedOutput = "-";
        assertEquals(expectedOutput, FixSpaces.fixSpaces(input));
    }
                                    
}