/*
 * This file was automatically generated by EvoSuite
 * Wed May 14 20:25:03 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.SumSquares1;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SumSquares1_ESTest extends SumSquares1_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer((-1056));
      List<Integer> list0 = List.of(integer0, integer0, integer0, integer0, integer0, integer0, integer0, integer0, integer0, integer0);
      List<Object> list1 = List.copyOf((Collection<?>) list0);
      int int0 = SumSquares1.sumSquares(list1);
      assertEquals(1944256384, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(2008);
      List<Integer> list0 = List.of(integer0, integer0, integer0, integer0, integer1, integer0, integer0);
      List<Object> list1 = List.copyOf((Collection<?>) list0);
      int int0 = SumSquares1.sumSquares(list1);
      assertEquals((-493550074), int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Integer integer0 = new Integer(1);
      linkedList0.add((Object) integer0);
      List<Object> list0 = linkedList0.subList(1, 1);
      linkedList0.pollLast();
      // Undeclared exception!
      try { 
        SumSquares1.sumSquares(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        SumSquares1.sumSquares((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.SumSquares1", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Integer integer0 = new Integer(265);
      Object object0 = new Object();
      List<Object> list0 = List.of((Object) integer0, (Object) integer0, (Object) integer0, (Object) integer0, (Object) integer0, object0, object0);
      // Undeclared exception!
      try { 
        SumSquares1.sumSquares(list0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class java.lang.Object cannot be cast to class java.lang.Integer (java.lang.Object and java.lang.Integer are in module java.base of loader 'bootstrap')
         //
         verifyException("original.SumSquares1", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Integer integer0 = new Integer(0);
      List<Object> list0 = List.of((Object) integer0, (Object) integer0, (Object) integer0, (Object) integer0, (Object) integer0, (Object) integer0);
      int int0 = SumSquares1.sumSquares(list0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SumSquares1 sumSquares1_0 = new SumSquares1();
  }
}
