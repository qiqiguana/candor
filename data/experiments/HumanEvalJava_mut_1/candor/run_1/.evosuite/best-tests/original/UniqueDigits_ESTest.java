/*
 * This file was automatically generated by EvoSuite
 * Wed May 14 20:57:58 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.UniqueDigits;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UniqueDigits_ESTest extends UniqueDigits_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer integer0 = new Integer(113);
      Integer integer1 = new Integer(0);
      List<Integer> list0 = List.of(integer0, integer1, integer0, integer0);
      List<Object> list1 = UniqueDigits.uniqueDigits(list0);
      assertTrue(list1.contains(113));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-3159));
      linkedList0.add(integer0);
      List<Object> list0 = UniqueDigits.uniqueDigits(linkedList0);
      assertTrue(list0.contains((-3159)));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(569);
      List<Integer> list0 = List.of(integer0, integer0, integer0, integer0);
      List<Object> list1 = UniqueDigits.uniqueDigits(list0);
      assertFalse(list1.contains(569));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      List<Integer> list0 = linkedList0.subList(0, 0);
      Integer integer0 = new Integer(0);
      linkedList0.add(integer0);
      // Undeclared exception!
      try { 
        UniqueDigits.uniqueDigits(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        UniqueDigits.uniqueDigits((List<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.UniqueDigits", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      UniqueDigits uniqueDigits0 = new UniqueDigits();
  }
}
