/*
 * This file was automatically generated by EvoSuite
 * Wed May 14 19:36:08 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.NumericalLetterGrade;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumericalLetterGrade_ESTest extends NumericalLetterGrade_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Short short0 = new Short((short)4);
      List<Number> list0 = List.of((Number) short0);
      List<String> list1 = NumericalLetterGrade.numericalLetterGrade(list0);
      assertFalse(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Number> linkedList0 = new LinkedList<Number>();
      List<String> list0 = NumericalLetterGrade.numericalLetterGrade(linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Number> linkedList0 = new LinkedList<Number>();
      Integer integer0 = new Integer((-2808));
      linkedList0.add((Number) integer0);
      List<Number> list0 = linkedList0.subList(1, 1);
      linkedList0.offerFirst(integer0);
      // Undeclared exception!
      try { 
        NumericalLetterGrade.numericalLetterGrade(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumericalLetterGrade.numericalLetterGrade((List<Number>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.NumericalLetterGrade", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Long long0 = new Long(1L);
      List<Number> list0 = List.of((Number) long0, (Number) long0, (Number) long0, (Number) long0, (Number) long0, (Number) long0, (Number) long0, (Number) long0, (Number) long0);
      List<String> list1 = NumericalLetterGrade.numericalLetterGrade(list0);
      assertEquals(9, list1.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double double0 = new Double(1.21077513399293);
      List<Number> list0 = List.of((Number) double0, (Number) double0, (Number) double0, (Number) double0, (Number) double0, (Number) double0, (Number) double0, (Number) double0, (Number) double0);
      List<String> list1 = NumericalLetterGrade.numericalLetterGrade(list0);
      assertEquals(9, list1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Double double0 = Double.valueOf(1.7);
      List<Number> list0 = List.of((Number) double0, (Number) double0, (Number) double0, (Number) double0);
      List<String> list1 = NumericalLetterGrade.numericalLetterGrade(list0);
      assertFalse(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = Integer.valueOf(2);
      List<Number> list0 = List.of((Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0);
      List<String> list1 = NumericalLetterGrade.numericalLetterGrade(list0);
      assertEquals(9, list1.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Double double0 = Double.valueOf(2.3);
      List<Number> list0 = List.of((Number) double0, (Number) double0, (Number) double0, (Number) double0, (Number) double0, (Number) double0, (Number) double0, (Number) double0, (Number) double0);
      List<String> list1 = NumericalLetterGrade.numericalLetterGrade(list0);
      assertEquals(9, list1.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = Integer.decode("3");
      Double double0 = Double.valueOf(3.7);
      Double double1 = Double.valueOf(2.7);
      Byte byte0 = new Byte((byte)127);
      List<Number> list0 = List.of((Number) double0, (Number) byte0, (Number) double1, (Number) byte0, (Number) byte0, (Number) integer0, (Number) double1, (Number) byte0, (Number) double1);
      List<String> list1 = NumericalLetterGrade.numericalLetterGrade(list0);
      assertEquals(9, list1.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-5));
      Double double0 = Double.valueOf(3.3);
      List<Number> list0 = List.of((Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) double0, (Number) double0, (Number) double0);
      List<String> list1 = NumericalLetterGrade.numericalLetterGrade(list0);
      assertEquals(9, list1.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Double double0 = Double.valueOf(3.82503440099);
      List<Number> list0 = List.of((Number) double0, (Number) double0, (Number) double0, (Number) double0, (Number) double0);
      List<String> list1 = NumericalLetterGrade.numericalLetterGrade(list0);
      assertEquals(5, list1.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Double double0 = Double.valueOf(0.7);
      List<Number> list0 = List.of((Number) double0, (Number) double0, (Number) double0);
      List<String> list1 = NumericalLetterGrade.numericalLetterGrade(list0);
      assertEquals(3, list1.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NumericalLetterGrade numericalLetterGrade0 = new NumericalLetterGrade();
  }
}
