package original;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
/**
* Test class of Solution2928.
*/
class Solution2928Test {
    @Test
    void testDistributeCandiesWhenNIsGreaterThan3TimesLimit() {
        // Arrange
        Solution2928 solution = new Solution2928();
        int n = 10;
        int limit = 2;

        // Act
        int result = solution.distributeCandies(n, limit);

        // Assert
        assertEquals(0, result);
    }
    
    @Test
        public void testNothing(){
            Solution2928 s = new Solution2928();
            }
    @Test
    public void TestDistributeCandies_NLessThan3Limit() {
    	Solution2928 solution = new Solution2928();
    	int result = solution.distributeCandies(5, 2);
    	assertEquals(3, result);
    }
    @Test
    public void TestDistributeCandies_NGreaterThan3Limit() {
        Solution2928 solution = new Solution2928();
        int result = solution.distributeCandies(10, 3);
        assertEquals(0, result);
    }
    @Test
    public void testDistributeCandies_n_minus_2_greater_than_or_equal_to_2_times_limit_fix1() {
        Solution2928 solution = new Solution2928();
        int n = 10;
        int limit = 3;
        long expected = comb2(n + 2) - 3 * comb2(n - limit + 1) + 3 * comb2(n - 2 * limit);
        assertEquals(expected, solution.distributeCandies(n, limit));
    }
    @Test
    public void testDistributeCandies_n_less_than_or_equal_to_limit_and_n_greater_than_3_times_limit_false() {
        Solution2928 solution = new Solution2928();
        int n = 4;
        int limit = 2;
        int expected = 6;
        assertEquals(expected, solution.distributeCandies(n, limit));
    }
    @Test
    public void testDistributeCandies_EdgeCaseNMinus2Equals2Limit_Fixed() {
        Solution2928 solution = new Solution2928();
        int actual = solution.distributeCandies(202, 100);
        long expected = (long)1 * 201 * 200 / 2 - (3 * ((long)1 * (101) * 100 / 2)) + (3 * ((long)1 * 1 * 0 / 2));
        assertEquals(expected, actual);
    }
    @Test
    public void testDistributeCandiesWithNLessThanOrEqualToLimitFixed() {
        Solution2928 solution = new Solution2928();
        int[] input = {3, 2};
        long expected = (long) ((input[0] + 2) * (input[0] + 1)) / 2;
        if (input[0] > input[1]) {
            expected -= 3L * ((input[0] - input[1] + 1) * (input[0] - input[1])) / 2;
        }
        if (input[0] - 2 >= 2 * input[1]) {
            expected += 3L * ((input[0] - 2 * input[1]) * (input[0] - 2 * input[1] - 1)) / 2;
        }
        assertEquals(expected, solution.distributeCandies(input[0], input[1]));
    }
    @Test
    public void test_distributeCandies_with_n_greater_than_limit() {
        Solution2928 solution = new Solution2928();
        int[] input = {10, 3};
        int expectedResult = 0;
        int actualResult = solution.distributeCandies(input[0], input[1]);
        assertEquals(expectedResult, actualResult);
    }
    @Test
    public void test_distributeCandies_with_n_less_than_or_equal_to_limit_and_n_minus_2_greater_than_or_equal_to_2_times_limit_4() {
        Solution2928 solution = new Solution2928();
        int[] input = {6, 3};
        int expectedResult = 10;
        int actualResult = solution.distributeCandies(input[0], input[1]);
        assertEquals(expectedResult, actualResult);
    }
    
    private long comb2(int n) {
        return 1L * n * (n - 1) / 2;
    }
                                    
}