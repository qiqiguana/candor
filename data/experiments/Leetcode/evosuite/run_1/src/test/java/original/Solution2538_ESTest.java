/*
 * This file was automatically generated by EvoSuite
 * Thu May 29 02:08:17 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Solution2538;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution2538_ESTest extends Solution2538_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Solution2538 solution2538_0 = new Solution2538();
      assertNotNull(solution2538_0);
      
      int[][] intArray0 = new int[3][2];
      int[] intArray1 = new int[4];
      intArray1[1] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 2;
      intArray2[1] = 4;
      intArray2[2] = 2;
      intArray0[1] = intArray2;
      long long0 = solution2538_0.maxOutput(2534, intArray0, intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(3, intArray0.length);
      assertEquals(6, intArray2.length);
      assertArrayEquals(new int[] {2, 4, 2, 0, 0, 0}, intArray2);
      assertNotSame(intArray2, intArray1);
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Solution2538 solution2538_0 = new Solution2538();
      assertNotNull(solution2538_0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      int[][] intArray1 = new int[1][4];
      long long0 = solution2538_0.maxOutput(166, intArray1, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(1, intArray1.length);
      assertArrayEquals(new int[] {1, 0, 0, 0}, intArray0);
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Solution2538 solution2538_0 = new Solution2538();
      assertNotNull(solution2538_0);
      
      // Undeclared exception!
      try { 
        solution2538_0.maxOutput(170, (int[][]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Solution2538", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Solution2538 solution2538_0 = new Solution2538();
      assertNotNull(solution2538_0);
      
      int[][] intArray0 = new int[6][8];
      // Undeclared exception!
      try { 
        solution2538_0.maxOutput((-16), intArray0, intArray0[1]);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -16
         //
         verifyException("original.Solution2538", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Solution2538 solution2538_0 = new Solution2538();
      int[][] intArray0 = new int[3][2];
      int[] intArray1 = new int[4];
      int[] intArray2 = new int[6];
      intArray2[1] = 4;
      intArray0[1] = intArray2;
      // Undeclared exception!
      try { 
        solution2538_0.maxOutput(2534, intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 4 out of bounds for length 4
         //
         verifyException("original.Solution2538", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Solution2538 solution2538_0 = new Solution2538();
      int[][] intArray0 = new int[3][2];
      int[] intArray1 = new int[4];
      intArray1[1] = 2;
      intArray0[0] = intArray1;
      long long0 = solution2538_0.maxOutput(2534, intArray0, intArray1);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Solution2538 solution2538_0 = new Solution2538();
      int[][] intArray0 = new int[56][8];
      // Undeclared exception!
      solution2538_0.maxOutput(4, intArray0, intArray0[1]);
  }
}
