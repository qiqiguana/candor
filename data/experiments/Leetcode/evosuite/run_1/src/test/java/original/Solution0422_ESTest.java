/*
 * This file was automatically generated by EvoSuite
 * Thu May 29 01:29:26 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Solution0422;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution0422_ESTest extends Solution0422_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Solution0422 solution0422_0 = new Solution0422();
      List<String> list0 = List.of("48~D1,Y6$", "48~D1,Y6$", "", "", "", "", "Ank.mJ~|*v");
      boolean boolean0 = solution0422_0.validWordSquare(list0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Solution0422 solution0422_0 = new Solution0422();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      linkedList0.add("original.Solution0422");
      boolean boolean0 = solution0422_0.validWordSquare(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Solution0422 solution0422_0 = new Solution0422();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("I`H)q:c/YV 15QM");
      List<String> list0 = linkedList0.subList(1, 1);
      linkedList0.add("}");
      // Undeclared exception!
      try { 
        solution0422_0.validWordSquare(list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList$SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Solution0422 solution0422_0 = new Solution0422();
      // Undeclared exception!
      try { 
        solution0422_0.validWordSquare((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Solution0422", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Solution0422 solution0422_0 = new Solution0422();
      List<String> list0 = List.of(" B0Fq{M", "}c", "}c", "eDm", " B0Fq{M");
      boolean boolean0 = solution0422_0.validWordSquare(list0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Solution0422 solution0422_0 = new Solution0422();
      List<String> list0 = List.of("B.22z");
      boolean boolean0 = solution0422_0.validWordSquare(list0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Solution0422 solution0422_0 = new Solution0422();
      List<String> list0 = List.of("UkI=&^", "", "", "", "aTUD=ZC;O", "WBsy", "original.Solution0422", "", "");
      boolean boolean0 = solution0422_0.validWordSquare(list0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Solution0422 solution0422_0 = new Solution0422();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      boolean boolean0 = solution0422_0.validWordSquare(linkedList0);
      assertTrue(boolean0);
  }
}
