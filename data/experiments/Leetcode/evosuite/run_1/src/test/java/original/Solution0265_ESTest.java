/*
 * This file was automatically generated by EvoSuite
 * Thu May 29 01:52:45 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Solution0265;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution0265_ESTest extends Solution0265_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Solution0265 solution0265_0 = new Solution0265();
      int[][] intArray0 = new int[3][1];
      int int0 = solution0265_0.minCostII(intArray0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Solution0265 solution0265_0 = new Solution0265();
      int[][] intArray0 = new int[2][9];
      int[] intArray1 = new int[4];
      intArray1[0] = (-1);
      intArray0[0] = intArray1;
      int int0 = solution0265_0.minCostII(intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Solution0265 solution0265_0 = new Solution0265();
      int[][] intArray0 = new int[3][0];
      // Undeclared exception!
      try { 
        solution0265_0.minCostII(intArray0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // No value present
         //
         verifyException("java.util.OptionalInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Solution0265 solution0265_0 = new Solution0265();
      // Undeclared exception!
      try { 
        solution0265_0.minCostII((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Solution0265", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int[][] intArray0 = new int[2][7];
      Solution0265 solution0265_0 = new Solution0265();
      int int0 = solution0265_0.minCostII(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Solution0265 solution0265_0 = new Solution0265();
      int[][] intArray0 = new int[3][1];
      int[] intArray1 = new int[7];
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        solution0265_0.minCostII(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("original.Solution0265", e);
      }
  }
}
