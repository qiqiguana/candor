/*
 * This file was automatically generated by EvoSuite
 * Thu May 29 00:20:57 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Solution0321;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution0321_ESTest extends Solution0321_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[7];
      int[] intArray1 = solution0321_0.maxNumber(intArray0, intArray0, 260);
      // Undeclared exception!
      solution0321_0.maxNumber(intArray1, intArray0, 260);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2441;
      intArray0[3] = 263;
      intArray0[4] = 0;
      intArray0[5] = 4341;
      intArray0[6] = 1286;
      int[] intArray1 = solution0321_0.maxNumber(intArray0, intArray0, 4341);
      // Undeclared exception!
      solution0321_0.maxNumber(intArray1, intArray0, 2629);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[6];
      intArray0[0] = (-1091);
      int int0 = (-1919);
      intArray0[1] = (-1919);
      int int1 = 4;
      intArray0[2] = 4;
      intArray0[3] = 1843;
      int int2 = 0;
      intArray0[4] = 0;
      int int3 = 0;
      intArray0[5] = 0;
      int int4 = 301;
      int[] intArray1 = solution0321_0.maxNumber(intArray0, intArray0, 301);
      solution0321_0.maxNumber(intArray1, intArray0, 301);
      int int5 = (-361);
      // Undeclared exception!
      try { 
        solution0321_0.maxNumber(intArray1, intArray0, (-361));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -361
         //
         verifyException("original.Solution0321", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[3];
      intArray0[0] = 464;
      int int0 = (-1977);
      intArray0[1] = (-1977);
      int int1 = 0;
      intArray0[2] = 0;
      int[] intArray1 = solution0321_0.maxNumber(intArray0, intArray0, 464);
      int[] intArray2 = solution0321_0.maxNumber(intArray0, intArray1, 464);
      int[] intArray3 = new int[5];
      intArray3[0] = 0;
      intArray3[1] = (-5365);
      intArray3[2] = (-1977);
      int int2 = 1;
      intArray3[3] = 1;
      intArray3[4] = 0;
      solution0321_0.maxNumber(intArray2, intArray3, 1);
      // Undeclared exception!
      try { 
        solution0321_0.maxNumber(intArray3, intArray1, (-1977));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -1977
         //
         verifyException("original.Solution0321", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[2];
      intArray0[0] = 1411;
      intArray0[1] = 0;
      int[] intArray1 = solution0321_0.maxNumber(intArray0, intArray0, 1411);
      int int0 = 3085;
      int[] intArray2 = solution0321_0.maxNumber(intArray1, intArray1, 3085);
      int int1 = 0;
      int[] intArray3 = solution0321_0.maxNumber(intArray1, intArray1, 0);
      int[] intArray4 = solution0321_0.maxNumber(intArray3, intArray0, 0);
      int int2 = 0;
      int[] intArray5 = solution0321_0.maxNumber(intArray1, intArray0, 0);
      int int3 = 2196;
      int[] intArray6 = solution0321_0.maxNumber(intArray5, intArray2, int3);
      int int4 = 0;
      int[] intArray7 = solution0321_0.maxNumber(intArray2, intArray5, int4);
      int int5 = 54;
      int[] intArray8 = solution0321_0.maxNumber(intArray3, intArray4, int5);
      int int6 = (-1);
      int[] intArray9 = solution0321_0.maxNumber(intArray0, intArray2, int6);
      solution0321_0.maxNumber(intArray8, intArray5, int0);
      int[] intArray10 = solution0321_0.maxNumber(intArray0, intArray7, int5);
      int int7 = 0;
      int[] intArray11 = solution0321_0.maxNumber(intArray8, intArray8, int7);
      solution0321_0.maxNumber(intArray9, intArray8, int2);
      solution0321_0.maxNumber(intArray6, intArray9, intArray0[0]);
      solution0321_0.maxNumber(intArray10, intArray5, int1);
      int int8 = 54;
      int[] intArray12 = solution0321_0.maxNumber(intArray7, intArray10, int8);
      int int9 = 1;
      int[] intArray13 = solution0321_0.maxNumber(intArray2, intArray5, int9);
      solution0321_0.maxNumber(intArray3, intArray12, int7);
      int int10 = 0;
      int[] intArray14 = solution0321_0.maxNumber(intArray13, intArray7, int10);
      solution0321_0.maxNumber(intArray11, intArray14, int3);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[5];
      // Undeclared exception!
      try { 
        solution0321_0.maxNumber(intArray0, intArray0, (-2410));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -2410
         //
         verifyException("original.Solution0321", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[7];
      intArray0[1] = (-1959);
      int[] intArray1 = solution0321_0.maxNumber(intArray0, intArray0, 260);
      int[] intArray2 = solution0321_0.maxNumber(intArray1, intArray0, 260);
      assertEquals(260, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[4];
      intArray0[0] = 781;
      intArray0[1] = 0;
      intArray0[2] = 1048;
      intArray0[3] = (-1);
      int[] intArray1 = solution0321_0.maxNumber(intArray0, intArray0, 0);
      int[] intArray2 = solution0321_0.maxNumber(intArray0, intArray0, 1);
      assertArrayEquals(new int[] {1048}, intArray2);
      
      int[] intArray3 = solution0321_0.maxNumber(intArray1, intArray1, 1);
      assertEquals(1, intArray3.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (-850);
      intArray0[2] = 3411;
      int[] intArray1 = solution0321_0.maxNumber(intArray0, intArray0, 1);
      assertArrayEquals(new int[] {3411}, intArray1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      int[] intArray1 = solution0321_0.maxNumber(intArray0, intArray0, 0);
      int[] intArray2 = solution0321_0.maxNumber(intArray0, intArray0, 1);
      int[] intArray3 = solution0321_0.maxNumber(intArray0, intArray2, 773);
      int[] intArray4 = solution0321_0.maxNumber(intArray3, intArray0, 0);
      int[] intArray5 = solution0321_0.maxNumber(intArray1, intArray3, 0);
      int[] intArray6 = solution0321_0.maxNumber(intArray1, intArray0, 0);
      solution0321_0.maxNumber(intArray6, intArray4, 0);
      int[] intArray7 = solution0321_0.maxNumber(intArray6, intArray6, 0);
      solution0321_0.maxNumber(intArray4, intArray7, 1);
      solution0321_0.maxNumber(intArray5, intArray7, 1);
      solution0321_0.maxNumber(intArray5, intArray4, 1);
      assertEquals(0, intArray5.length);
      assertArrayEquals(new int[] {1}, intArray2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[2];
      int[] intArray1 = solution0321_0.maxNumber(intArray0, intArray0, 1);
      assertArrayEquals(new int[] {0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[2];
      int[] intArray1 = solution0321_0.maxNumber(intArray0, intArray0, 0);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      // Undeclared exception!
      try { 
        solution0321_0.maxNumber((int[]) null, (int[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Solution0321", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Solution0321 solution0321_0 = new Solution0321();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 2540;
      intArray0[2] = 0;
      intArray0[3] = (-4295);
      intArray0[4] = (-1034);
      intArray0[5] = (-1684);
      intArray0[6] = 1;
      // Undeclared exception!
      try { 
        solution0321_0.maxNumber(intArray0, (int[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Solution0321", e);
      }
  }
}
