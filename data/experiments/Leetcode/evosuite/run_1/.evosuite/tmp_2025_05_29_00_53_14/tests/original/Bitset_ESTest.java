/*
 * This file was automatically generated by EvoSuite
 * Thu May 29 01:45:00 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Bitset;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Bitset_ESTest extends Bitset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Bitset bitset0 = new Bitset(3124);
      bitset0.fix(889);
      bitset0.fix(48);
      bitset0.unfix(48);
      assertTrue(bitset0.one());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Bitset bitset0 = new Bitset(49);
      String string0 = bitset0.toString();
      assertEquals("0000000000000000000000000000000000000000000000000", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Bitset bitset0 = new Bitset(10);
      bitset0.flip();
      bitset0.flip();
      bitset0.flip();
      int int0 = bitset0.count();
      assertTrue(bitset0.one());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Bitset bitset0 = new Bitset(10);
      // Undeclared exception!
      try { 
        bitset0.unfix(10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 10 out of bounds for length 10
         //
         verifyException("original.Bitset", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Bitset bitset0 = new Bitset(3124);
      // Undeclared exception!
      try { 
        bitset0.fix(3124);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3124 out of bounds for length 3124
         //
         verifyException("original.Bitset", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Bitset bitset0 = null;
      try {
        bitset0 = new Bitset((-705));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -705
         //
         verifyException("original.Bitset", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Bitset bitset0 = new Bitset(1363);
      bitset0.flip();
      boolean boolean0 = bitset0.one();
      assertTrue(bitset0.all());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Bitset bitset0 = new Bitset(0);
      boolean boolean0 = bitset0.one();
      assertEquals("", bitset0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Bitset bitset0 = new Bitset(3113);
      boolean boolean0 = bitset0.all();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Bitset bitset0 = new Bitset(3112);
      bitset0.unfix(0);
      assertEquals(0, bitset0.count());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Bitset bitset0 = new Bitset(10);
      int int0 = bitset0.count();
      assertEquals("0000000000", bitset0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Bitset bitset0 = new Bitset(0);
      String string0 = bitset0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Bitset bitset0 = new Bitset(10);
      bitset0.flip();
      boolean boolean0 = bitset0.all();
      assertTrue(bitset0.one());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Bitset bitset0 = new Bitset(3112);
      bitset0.flip();
      bitset0.fix(48);
      assertTrue(bitset0.one());
  }
}
