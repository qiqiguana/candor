/*
 * This file was automatically generated by EvoSuite
 * Wed May 28 23:59:12 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Solution3235;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution3235_ESTest extends Solution3235_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Solution3235 solution3235_0 = new Solution3235();
      int[] intArray0 = new int[8];
      intArray0[1] = 2;
      int[][] intArray1 = new int[3][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[19];
      intArray2[0] = 2;
      intArray1[2] = intArray2;
      boolean boolean0 = solution3235_0.canReachCorner(224, 224, intArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Solution3235 solution3235_0 = new Solution3235();
      int[] intArray0 = new int[19];
      intArray0[0] = 2;
      intArray0[1] = 224;
      intArray0[2] = 224;
      int[][] intArray1 = new int[6][4];
      intArray1[0] = intArray0;
      boolean boolean0 = solution3235_0.canReachCorner(2, 3259, intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Solution3235 solution3235_0 = new Solution3235();
      int[] intArray0 = new int[8];
      intArray0[1] = 2;
      int[][] intArray1 = new int[3][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[19];
      intArray2[1] = 224;
      intArray2[2] = 224;
      intArray1[2] = intArray2;
      boolean boolean0 = solution3235_0.canReachCorner(224, 224, intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Solution3235 solution3235_0 = new Solution3235();
      // Undeclared exception!
      try { 
        solution3235_0.canReachCorner((-854), (-854), (int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Solution3235", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Solution3235 solution3235_0 = new Solution3235();
      int[][] intArray0 = new int[2][2];
      int[] intArray1 = new int[5];
      intArray1[1] = (-2834);
      intArray1[2] = 2830;
      intArray0[0] = intArray1;
      intArray0[1] = intArray1;
      boolean boolean0 = solution3235_0.canReachCorner(2830, (-3696), intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Solution3235 solution3235_0 = new Solution3235();
      int[][] intArray0 = new int[1][3];
      int[] intArray1 = new int[3];
      intArray1[0] = 634;
      intArray1[1] = 634;
      intArray1[2] = 634;
      intArray0[0] = intArray1;
      boolean boolean0 = solution3235_0.canReachCorner((-1), 634, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Solution3235 solution3235_0 = new Solution3235();
      int[][] intArray0 = new int[2][9];
      int[] intArray1 = new int[3];
      intArray1[0] = (-1);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      intArray2[0] = (-1);
      intArray2[1] = 2;
      intArray2[2] = 2;
      intArray0[1] = intArray2;
      boolean boolean0 = solution3235_0.canReachCorner(2, 2, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Solution3235 solution3235_0 = new Solution3235();
      int[][] intArray0 = new int[1][3];
      int[] intArray1 = new int[6];
      intArray1[0] = 2;
      intArray1[1] = 1633;
      intArray1[2] = 1633;
      intArray0[0] = intArray1;
      boolean boolean0 = solution3235_0.canReachCorner(1633, 2, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Solution3235 solution3235_0 = new Solution3235();
      int[][] intArray0 = new int[1][3];
      int[] intArray1 = new int[3];
      intArray1[1] = 634;
      intArray0[0] = intArray1;
      boolean boolean0 = solution3235_0.canReachCorner((-1), 634, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Solution3235 solution3235_0 = new Solution3235();
      int[][] intArray0 = new int[2][2];
      int[] intArray1 = new int[5];
      intArray1[1] = (-2834);
      intArray1[2] = 2830;
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        solution3235_0.canReachCorner(2830, (-3696), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("original.Solution3235", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Solution3235 solution3235_0 = new Solution3235();
      int[] intArray0 = new int[8];
      intArray0[1] = 2;
      int[][] intArray1 = new int[12][9];
      intArray1[0] = intArray0;
      boolean boolean0 = solution3235_0.canReachCorner(3822, (-2148), intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Solution3235 solution3235_0 = new Solution3235();
      int[] intArray0 = new int[8];
      intArray0[1] = 2;
      int[][] intArray1 = new int[3][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[19];
      intArray2[2] = 224;
      intArray1[2] = intArray2;
      boolean boolean0 = solution3235_0.canReachCorner(224, 224, intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[2] = 1;
      int[][] intArray1 = new int[6][8];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray0[1] = 3;
      Solution3235 solution3235_0 = new Solution3235();
      boolean boolean0 = solution3235_0.canReachCorner(2147483645, 3011, intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Solution3235 solution3235_0 = new Solution3235();
      int[][] intArray0 = new int[2][2];
      int[] intArray1 = new int[5];
      intArray1[0] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      intArray2[0] = (-2834);
      intArray2[2] = 2830;
      intArray0[1] = intArray2;
      boolean boolean0 = solution3235_0.canReachCorner((-2834), 1, intArray0);
      assertFalse(boolean0);
  }
}
