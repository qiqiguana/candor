/*
 * This file was automatically generated by EvoSuite
 * Thu May 29 00:23:06 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Solution0593;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution0593_ESTest extends Solution0593_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[7];
      Solution0593 solution0593_0 = new Solution0593();
      int[] intArray1 = new int[6];
      intArray1[0] = 14731592;
      intArray1[1] = (-1);
      int[] intArray2 = new int[9];
      intArray2[0] = 1;
      intArray2[1] = 14731592;
      boolean boolean0 = solution0593_0.validSquare(intArray2, intArray0, intArray1, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[7];
      Solution0593 solution0593_0 = new Solution0593();
      int[] intArray1 = new int[6];
      intArray1[0] = 14731592;
      boolean boolean0 = solution0593_0.validSquare(intArray1, intArray0, intArray1, intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[5];
      Solution0593 solution0593_0 = new Solution0593();
      int[] intArray1 = new int[2];
      intArray1[1] = 7203856;
      int[] intArray2 = new int[6];
      intArray2[0] = 7203856;
      boolean boolean0 = solution0593_0.validSquare(intArray0, intArray1, intArray2, intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Solution0593 solution0593_0 = new Solution0593();
      int[] intArray0 = new int[5];
      // Undeclared exception!
      try { 
        solution0593_0.validSquare(intArray0, intArray0, (int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Solution0593", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[19];
      Solution0593 solution0593_0 = new Solution0593();
      int[] intArray1 = new int[8];
      intArray1[0] = 2705;
      boolean boolean0 = solution0593_0.validSquare(intArray0, intArray0, intArray1, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[19];
      Solution0593 solution0593_0 = new Solution0593();
      int[] intArray1 = new int[8];
      intArray1[0] = 2705;
      boolean boolean0 = solution0593_0.validSquare(intArray0, intArray1, intArray0, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[19];
      Solution0593 solution0593_0 = new Solution0593();
      int[] intArray1 = new int[4];
      intArray1[0] = (-1);
      intArray1[1] = (-1);
      int[] intArray2 = new int[4];
      intArray2[0] = 1;
      intArray2[1] = (-1);
      int[] intArray3 = new int[4];
      intArray3[0] = 1;
      intArray3[1] = 1;
      boolean boolean0 = solution0593_0.validSquare(intArray2, intArray0, intArray3, intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[19];
      Solution0593 solution0593_0 = new Solution0593();
      int[] intArray1 = new int[5];
      intArray1[1] = 2705;
      int[] intArray2 = new int[2];
      intArray2[0] = 2705;
      int[] intArray3 = new int[7];
      intArray3[0] = 2705;
      intArray3[1] = 2705;
      boolean boolean0 = solution0593_0.validSquare(intArray3, intArray1, intArray0, intArray2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[19];
      Solution0593 solution0593_0 = new Solution0593();
      int[] intArray1 = new int[5];
      intArray1[1] = 2705;
      int[] intArray2 = new int[7];
      intArray2[0] = 2705;
      boolean boolean0 = solution0593_0.validSquare(intArray2, intArray1, intArray0, intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[19];
      Solution0593 solution0593_0 = new Solution0593();
      int[] intArray1 = new int[5];
      intArray1[1] = 2705;
      int[] intArray2 = new int[7];
      intArray2[0] = 2705;
      boolean boolean0 = solution0593_0.validSquare(intArray2, intArray1, intArray0, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[19];
      Solution0593 solution0593_0 = new Solution0593();
      boolean boolean0 = solution0593_0.validSquare(intArray0, intArray0, intArray0, intArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Solution0593 solution0593_0 = new Solution0593();
      int[] intArray0 = new int[4];
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        solution0593_0.validSquare(intArray0, intArray1, intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 0 out of bounds for length 0
         //
         verifyException("original.Solution0593", e);
      }
  }
}
