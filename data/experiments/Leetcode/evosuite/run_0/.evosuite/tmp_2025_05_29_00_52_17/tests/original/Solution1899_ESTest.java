/*
 * This file was automatically generated by EvoSuite
 * Thu May 29 01:01:05 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Solution1899;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution1899_ESTest extends Solution1899_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Solution1899 solution1899_0 = new Solution1899();
      int[] intArray0 = new int[9];
      int[][] intArray1 = new int[8][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      int[] intArray2 = new int[6];
      intArray2[2] = 1184;
      boolean boolean0 = solution1899_0.mergeTriplets(intArray1, intArray2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Solution1899 solution1899_0 = new Solution1899();
      int[][] intArray0 = new int[0][8];
      int[] intArray1 = new int[7];
      intArray1[1] = 444;
      boolean boolean0 = solution1899_0.mergeTriplets(intArray0, intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Solution1899 solution1899_0 = new Solution1899();
      int[][] intArray0 = new int[9][1];
      int[] intArray1 = new int[9];
      intArray1[1] = 1207;
      intArray0[0] = intArray1;
      intArray0[1] = intArray0[0];
      intArray0[2] = intArray1;
      intArray0[3] = intArray0[0];
      intArray0[4] = intArray0[2];
      intArray0[5] = intArray0[2];
      intArray0[6] = intArray0[4];
      intArray0[7] = intArray0[6];
      intArray0[8] = intArray1;
      boolean boolean0 = solution1899_0.mergeTriplets(intArray0, intArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Solution1899 solution1899_0 = new Solution1899();
      int[][] intArray0 = new int[2][6];
      int[] intArray1 = new int[4];
      intArray1[0] = (-1836);
      boolean boolean0 = solution1899_0.mergeTriplets(intArray0, intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Solution1899 solution1899_0 = new Solution1899();
      int[][] intArray0 = new int[1][9];
      int[] intArray1 = new int[4];
      intArray1[0] = 2;
      intArray0[0] = intArray1;
      boolean boolean0 = solution1899_0.mergeTriplets(intArray0, intArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Solution1899 solution1899_0 = new Solution1899();
      int[][] intArray0 = new int[9][1];
      int[] intArray1 = new int[9];
      intArray1[2] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      intArray0[1] = intArray2;
      // Undeclared exception!
      try { 
        solution1899_0.mergeTriplets(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("original.Solution1899", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Solution1899 solution1899_0 = new Solution1899();
      int[][] intArray0 = new int[9][1];
      int[] intArray1 = new int[9];
      intArray1[1] = 1207;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      intArray0[1] = intArray2;
      // Undeclared exception!
      try { 
        solution1899_0.mergeTriplets(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("original.Solution1899", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Solution1899 solution1899_0 = new Solution1899();
      int[][] intArray0 = new int[9][1];
      int[] intArray1 = new int[9];
      intArray0[0] = intArray1;
      intArray0[1] = intArray1;
      intArray0[2] = intArray0[0];
      int[] intArray2 = new int[6];
      intArray2[0] = (-3147);
      intArray0[3] = intArray2;
      intArray0[4] = intArray0[0];
      // Undeclared exception!
      try { 
        solution1899_0.mergeTriplets(intArray0, intArray0[4]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("original.Solution1899", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Solution1899 solution1899_0 = new Solution1899();
      int[][] intArray0 = new int[0][7];
      // Undeclared exception!
      try { 
        solution1899_0.mergeTriplets(intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Solution1899", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Solution1899 solution1899_0 = new Solution1899();
      int[][] intArray0 = new int[1][9];
      int[] intArray1 = new int[4];
      intArray1[0] = 2;
      boolean boolean0 = solution1899_0.mergeTriplets(intArray0, intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Solution1899 solution1899_0 = new Solution1899();
      int[][] intArray0 = new int[13][4];
      int[] intArray1 = new int[3];
      intArray1[2] = (-1598);
      boolean boolean0 = solution1899_0.mergeTriplets(intArray0, intArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Solution1899 solution1899_0 = new Solution1899();
      int[][] intArray0 = new int[10][7];
      int[] intArray1 = new int[9];
      intArray1[1] = (-33);
      boolean boolean0 = solution1899_0.mergeTriplets(intArray0, intArray1);
      assertFalse(boolean0);
  }
}
