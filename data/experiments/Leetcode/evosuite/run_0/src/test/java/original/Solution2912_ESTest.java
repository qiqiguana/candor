/*
 * This file was automatically generated by EvoSuite
 * Thu May 29 01:33:24 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Solution2912;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution2912_ESTest extends Solution2912_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Solution2912 solution2912_0 = new Solution2912();
      assertNotNull(solution2912_0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-4003);
      intArray0[1] = 0;
      intArray0[2] = (-159);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-4003);
      intArray0[6] = 0;
      intArray0[7] = 0;
      int int0 = solution2912_0.numberOfWays(0, 0, (-4003), intArray0, intArray0);
      assertArrayEquals(new int[] {(-4003), 0, (-159), 0, 0, (-4003), 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(1, int0);
      
      int int1 = solution2912_0.numberOfWays((-159), 0, 0, intArray0, intArray0);
      assertArrayEquals(new int[] {(-4003), 0, (-159), 0, 0, (-4003), 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(1, int1);
      
      int int2 = solution2912_0.numberOfWays(0, (-159), (-1), intArray0, intArray0);
      assertArrayEquals(new int[] {(-4003), 0, (-159), 0, 0, (-4003), 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(1, int2);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1;
      intArray1[1] = 0;
      intArray1[2] = (-159);
      intArray1[3] = (-159);
      intArray1[4] = 0;
      intArray1[5] = 1160;
      intArray1[6] = 1160;
      int int3 = solution2912_0.numberOfWays(1160, 0, (-4003), intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-4003), 0, (-159), 0, 0, (-4003), 0, 0}, intArray0);
      assertArrayEquals(new int[] {1, 0, (-159), (-159), 0, 1160, 1160}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, int3);
      
      int int4 = solution2912_0.numberOfWays((-4003), 1129, 0, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {(-4003), 0, (-159), 0, 0, (-4003), 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int4 == int3);
      assertEquals(1, int4);
      
      int int5 = solution2912_0.numberOfWays(1538, 1, (-1456), intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-4003), 0, (-159), 0, 0, (-4003), 0, 0}, intArray0);
      assertArrayEquals(new int[] {1, 0, (-159), (-159), 0, 1160, 1160}, intArray1);
      assertEquals(8, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, int5);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Solution2912 solution2912_0 = new Solution2912();
      assertNotNull(solution2912_0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1305;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      int int0 = solution2912_0.numberOfWays(0, 0, 0, intArray0, intArray0);
      assertArrayEquals(new int[] {0, 1305, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(1, int0);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 1;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 1305;
      intArray1[6] = 0;
      intArray1[7] = 1305;
      int int1 = solution2912_0.numberOfWays(1305, 1, 0, intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 1305, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 1, 0, 0, 1305, 0, 1305}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int1 == int0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, int1);
      
      int int2 = solution2912_0.numberOfWays(0, 0, 0, intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 1305, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 1, 0, 0, 1305, 0, 1305}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int2 == int0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, int2);
      
      int int3 = solution2912_0.numberOfWays(0, 851, 0, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 1305, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      
      int int4 = solution2912_0.numberOfWays(0, (-2508), 0, intArray1, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 1, 0, 0, 1305, 0, 1305}, intArray1);
      assertEquals(8, intArray1.length);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, int4);
      
      int int5 = solution2912_0.numberOfWays(1, 0, 0, intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 1305, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 1, 0, 0, 1305, 0, 1305}, intArray1);
      assertEquals(9, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, int5);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Solution2912 solution2912_0 = new Solution2912();
      assertNotNull(solution2912_0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[2] = 1325;
      intArray0[3] = (-1);
      intArray0[4] = 1516;
      intArray0[5] = 0;
      intArray0[6] = 1325;
      int int0 = solution2912_0.numberOfWays(1325, 1325, 0, intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 1325, (-1), 1516, 0, 1325}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(1, int0);
      
      int int1 = solution2912_0.numberOfWays((-1), 1325, 0, intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 1325, (-1), 1516, 0, 1325}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(1, int1);
      
      int int2 = solution2912_0.numberOfWays(1325, 1, 1, intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 1325, (-1), 1516, 0, 1325}, intArray0);
      assertEquals(7, intArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = solution2912_0.numberOfWays(0, 1325, 0, intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 1325, (-1), 1516, 0, 1325}, intArray0);
      assertEquals(7, intArray0.length);
      assertFalse(int3 == int2);
      assertEquals(1, int3);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray1[2] = 1;
      intArray1[3] = 1325;
      intArray1[4] = 0;
      intArray1[5] = 1;
      int int4 = solution2912_0.numberOfWays(1325, 0, 1516, intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 1325, (-1), 1516, 0, 1325}, intArray0);
      assertArrayEquals(new int[] {0, 1, 1, 1325, 0, 1}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(421877718, int4);
      
      int int5 = solution2912_0.numberOfWays(19, 0, (-63), intArray1, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 1, 1, 1325, 0, 1}, intArray1);
      assertEquals(6, intArray1.length);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, int5);
      
      int int6 = solution2912_0.numberOfWays(2681, 983, (-1757), intArray1, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 1, 1, 1325, 0, 1}, intArray1);
      assertEquals(6, intArray1.length);
      assertFalse(int6 == int4);
      assertFalse(int6 == int2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, int6);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Solution2912 solution2912_0 = new Solution2912();
      assertNotNull(solution2912_0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        solution2912_0.numberOfWays(0, (-463), (-463), intArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Solution2912", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Solution2912 solution2912_0 = new Solution2912();
      assertNotNull(solution2912_0);
      
      int int0 = 3136;
      int[] intArray0 = new int[8];
      intArray0[0] = 3136;
      int int1 = solution2912_0.numberOfWays(3136, 3136, 3136, intArray0, intArray0);
      assertArrayEquals(new int[] {3136, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(int1 == int0);
      assertEquals(395994908, int1);
      
      // Undeclared exception!
      solution2912_0.numberOfWays(3136, 3136, 395994908, intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Solution2912 solution2912_0 = new Solution2912();
      assertNotNull(solution2912_0);
      
      int int0 = 3136;
      int[] intArray0 = new int[1];
      intArray0[0] = 3136;
      // Undeclared exception!
      try { 
        solution2912_0.numberOfWays(3136, 3136, 3136, intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 1 out of bounds for length 1
         //
         verifyException("original.Solution2912", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Solution2912 solution2912_0 = new Solution2912();
      assertNotNull(solution2912_0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      int int0 = solution2912_0.numberOfWays(0, 0, 0, intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(1, int0);
      
      int int1 = solution2912_0.numberOfWays(0, 0, 0, intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(1, int1);
      
      int int2 = solution2912_0.numberOfWays(0, 0, 0, intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(1, int2);
      
      int int3 = solution2912_0.numberOfWays(1166, 1, 4203, intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(953538645, int3);
      
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1166;
      intArray1[1] = 1166;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 1;
      intArray1[6] = 0;
      intArray1[7] = 0;
      int int4 = solution2912_0.numberOfWays(3758, 0, 0, intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1166, 1166, 0, 0, 0, 1, 0, 0}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(8, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, int4);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Solution2912 solution2912_0 = new Solution2912();
      assertNotNull(solution2912_0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 1;
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray1[2] = 0;
      intArray1[3] = 1;
      intArray1[4] = 1441;
      intArray1[5] = 1;
      int int0 = solution2912_0.numberOfWays(1, 1, 1, intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 1}, intArray0);
      assertArrayEquals(new int[] {1, 1, 0, 1, 1441, 1}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, int0);
      
      int int1 = solution2912_0.numberOfWays(1, 1441, 1, intArray0, intArray0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 1}, intArray0);
      assertEquals(2, intArray0.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = solution2912_0.numberOfWays(0, (-1977), (-1587), intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 1}, intArray0);
      assertArrayEquals(new int[] {1, 1, 0, 1, 1441, 1}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(6, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = solution2912_0.numberOfWays(17, (-720), 1, intArray1, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1, 1, 0, 1, 1441, 1}, intArray1);
      assertEquals(6, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(int3 == int0);
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Solution2912 solution2912_0 = new Solution2912();
      assertNotNull(solution2912_0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-2927);
      intArray0[1] = 5760;
      intArray0[2] = 5760;
      intArray0[3] = (-2927);
      intArray0[4] = (-2927);
      int int0 = solution2912_0.numberOfWays(5760, (-2927), 5760, intArray0, intArray0);
      assertArrayEquals(new int[] {(-2927), 5760, 5760, (-2927), (-2927)}, intArray0);
      assertEquals(5, intArray0.length);
      assertEquals((-701577567), int0);
      
      int int1 = solution2912_0.numberOfWays((-2927), (-2927), 0, intArray0, intArray0);
      assertArrayEquals(new int[] {(-2927), 5760, 5760, (-2927), (-2927)}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = solution2912_0.numberOfWays((-1), 5760, (-2927), intArray0, intArray0);
      assertArrayEquals(new int[] {(-2927), 5760, 5760, (-2927), (-2927)}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      int int3 = solution2912_0.numberOfWays(1, (-701577567), 1330, intArray0, intArray0);
      assertArrayEquals(new int[] {(-2927), 5760, 5760, (-2927), (-2927)}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-628842745), int3);
      
      int int4 = solution2912_0.numberOfWays((-777), 0, 3, intArray0, intArray0);
      assertArrayEquals(new int[] {(-2927), 5760, 5760, (-2927), (-2927)}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals(606064, int4);
      
      int int5 = solution2912_0.numberOfWays((-1), 0, 0, intArray0, intArray0);
      assertArrayEquals(new int[] {(-2927), 5760, 5760, (-2927), (-2927)}, intArray0);
      assertEquals(5, intArray0.length);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertEquals(1, int5);
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = (-2927);
      intArray1[2] = 606064;
      intArray1[3] = 1330;
      intArray1[4] = (-1);
      intArray1[5] = 0;
      intArray1[6] = 3;
      int int6 = solution2912_0.numberOfWays((-666), 606064, (-2927), intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {(-2927), 5760, 5760, (-2927), (-2927)}, intArray0);
      assertArrayEquals(new int[] {0, (-2927), 606064, 1330, (-1), 0, 3}, intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(7, intArray1.length);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(int6 == int0);
      assertFalse(int6 == int1);
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      assertFalse(int6 == int5);
      assertFalse(int6 == int2);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, int6);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Solution2912 solution2912_0 = new Solution2912();
      assertNotNull(solution2912_0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 1000000007;
      int int0 = solution2912_0.numberOfWays(3, 2901, 3, intArray0, intArray0);
      assertArrayEquals(new int[] {0, 1000000007}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(8407102, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Solution2912 solution2912_0 = new Solution2912();
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-1);
      solution2912_0.numberOfWays((-1), 0, 0, intArray0, intArray0);
      solution2912_0.numberOfWays(0, (-270), (-207), intArray0, intArray0);
      int int0 = solution2912_0.numberOfWays(3, 1, 1228, intArray0, intArray0);
      assertEquals(876888733, int0);
      
      solution2912_0.numberOfWays((-270), 0, (-1), intArray0, intArray0);
      solution2912_0.numberOfWays(0, 1299, 0, intArray0, intArray0);
      solution2912_0.numberOfWays(5460, 0, 0, intArray0, intArray0);
      solution2912_0.numberOfWays(1228, 0, 0, intArray0, intArray0);
      int int1 = solution2912_0.numberOfWays(1, (-1), 1228, intArray0, intArray0);
      assertEquals((-630666181), int1);
  }
}
