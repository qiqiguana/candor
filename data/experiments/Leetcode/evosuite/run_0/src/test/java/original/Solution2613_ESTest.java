/*
 * This file was automatically generated by EvoSuite
 * Thu May 29 00:04:48 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Solution2613;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution2613_ESTest extends Solution2613_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Solution2613 solution2613_0 = new Solution2613();
      assertNotNull(solution2613_0);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = solution2613_0.beautifulPair(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      intArray0[0] = 2;
      int[] intArray2 = solution2613_0.beautifulPair(intArray0, intArray0);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {2}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      
      int[] intArray3 = solution2613_0.beautifulPair(intArray0, intArray2);
      assertNotNull(intArray3);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertArrayEquals(new int[] {2}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertArrayEquals(new int[] {0, 0}, intArray3);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      assertEquals(2, intArray3.length);
      
      int[] intArray4 = new int[3];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = 2;
      int[] intArray5 = solution2613_0.beautifulPair(intArray2, intArray4);
      assertNotNull(intArray5);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray5);
      assertNotSame(intArray0, intArray4);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray4);
      assertNotSame(intArray2, intArray5);
      assertNotSame(intArray4, intArray2);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray5);
      assertNotSame(intArray5, intArray2);
      assertNotSame(intArray5, intArray4);
      assertNotSame(intArray5, intArray3);
      assertNotSame(intArray5, intArray1);
      assertNotSame(intArray5, intArray0);
      assertArrayEquals(new int[] {2}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertArrayEquals(new int[] {2, 0, 0}, intArray4);
      assertArrayEquals(new int[] {0, 1}, intArray5);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray4));
      assertFalse(intArray2.equals((Object)intArray3));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray4));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      assertEquals(3, intArray4.length);
      assertEquals(2, intArray5.length);
      
      int[] intArray6 = solution2613_0.beautifulPair(intArray5, intArray4);
      assertNotNull(intArray6);
      assertNotSame(intArray0, intArray6);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray5);
      assertNotSame(intArray0, intArray4);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray6);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray4);
      assertNotSame(intArray2, intArray5);
      assertNotSame(intArray4, intArray2);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray5);
      assertNotSame(intArray4, intArray6);
      assertNotSame(intArray5, intArray2);
      assertNotSame(intArray5, intArray4);
      assertNotSame(intArray5, intArray3);
      assertNotSame(intArray5, intArray6);
      assertNotSame(intArray5, intArray1);
      assertNotSame(intArray5, intArray0);
      assertNotSame(intArray6, intArray0);
      assertNotSame(intArray6, intArray3);
      assertNotSame(intArray6, intArray2);
      assertNotSame(intArray6, intArray1);
      assertNotSame(intArray6, intArray5);
      assertNotSame(intArray6, intArray4);
      assertArrayEquals(new int[] {2}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertArrayEquals(new int[] {2, 0, 0}, intArray4);
      assertArrayEquals(new int[] {0, 1}, intArray5);
      assertArrayEquals(new int[] {0, 0}, intArray6);
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray5));
      assertFalse(intArray0.equals((Object)intArray4));
      assertFalse(intArray2.equals((Object)intArray3));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray4));
      assertFalse(intArray2.equals((Object)intArray5));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray5));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray0));
      assertFalse(intArray6.equals((Object)intArray0));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray1));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray4));
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      assertEquals(3, intArray4.length);
      assertEquals(2, intArray5.length);
      assertEquals(2, intArray6.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Solution2613 solution2613_0 = new Solution2613();
      assertNotNull(solution2613_0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = solution2613_0.beautifulPair(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, intArray0.length);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Solution2613 solution2613_0 = new Solution2613();
      assertNotNull(solution2613_0);
      
      // Undeclared exception!
      try { 
        solution2613_0.beautifulPair((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Solution2613", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Solution2613 solution2613_0 = new Solution2613();
      assertNotNull(solution2613_0);
      
      int[] intArray0 = new int[4];
      int[] intArray1 = solution2613_0.beautifulPair(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 1}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
      
      // Undeclared exception!
      try { 
        solution2613_0.beautifulPair(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("original.Solution2613", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Solution2613 solution2613_0 = new Solution2613();
      assertNotNull(solution2613_0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1718;
      intArray0[1] = 2309;
      int[] intArray1 = solution2613_0.beautifulPair(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {1718, 2309, 0}, intArray0);
      assertArrayEquals(new int[] {0, 1}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      
      int[] intArray2 = solution2613_0.beautifulPair(intArray0, intArray0);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {1718, 2309, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray2.length);
      
      int[] intArray3 = solution2613_0.beautifulPair(intArray1, intArray1);
      assertNotNull(intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray3, intArray2);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray0);
      assertArrayEquals(new int[] {1718, 2309, 0}, intArray0);
      assertArrayEquals(new int[] {0, 1}, intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray3);
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray2));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(2, intArray3.length);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Solution2613 solution2613_0 = new Solution2613();
      assertNotNull(solution2613_0);
      
      int[] intArray0 = new int[1];
      int[] intArray1 = solution2613_0.beautifulPair(intArray0, intArray0);
      assertNotNull(intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      intArray0[0] = 2;
      int[] intArray2 = solution2613_0.beautifulPair(intArray0, intArray0);
      assertNotNull(intArray2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {2}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      
      int[] intArray3 = solution2613_0.beautifulPair(intArray0, intArray2);
      assertNotNull(intArray3);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray3, intArray0);
      assertNotSame(intArray3, intArray1);
      assertNotSame(intArray3, intArray2);
      assertArrayEquals(new int[] {2}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertArrayEquals(new int[] {0, 0}, intArray3);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray0));
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      assertEquals(2, intArray3.length);
      
      int[] intArray4 = new int[3];
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray0));
      
      intArray4[0] = 2;
      int[] intArray5 = solution2613_0.beautifulPair(intArray2, intArray4);
      assertNotNull(intArray5);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray4);
      assertNotSame(intArray0, intArray5);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray3);
      assertNotSame(intArray2, intArray4);
      assertNotSame(intArray2, intArray5);
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray2);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray5);
      assertNotSame(intArray5, intArray3);
      assertNotSame(intArray5, intArray0);
      assertNotSame(intArray5, intArray1);
      assertNotSame(intArray5, intArray2);
      assertNotSame(intArray5, intArray4);
      assertArrayEquals(new int[] {2}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertArrayEquals(new int[] {2, 0, 0}, intArray4);
      assertArrayEquals(new int[] {0, 1}, intArray5);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray4));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray3));
      assertFalse(intArray2.equals((Object)intArray4));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray0));
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray2));
      assertFalse(intArray5.equals((Object)intArray4));
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray2.length);
      assertEquals(3, intArray4.length);
      assertEquals(2, intArray5.length);
      
      int[] intArray6 = solution2613_0.beautifulPair(intArray1, intArray4);
      assertNotNull(intArray6);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray0, intArray3);
      assertNotSame(intArray0, intArray4);
      assertNotSame(intArray0, intArray6);
      assertNotSame(intArray0, intArray5);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray1, intArray2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray1, intArray3);
      assertNotSame(intArray1, intArray6);
      assertNotSame(intArray1, intArray4);
      assertNotSame(intArray1, intArray5);
      assertNotSame(intArray4, intArray6);
      assertNotSame(intArray4, intArray1);
      assertNotSame(intArray4, intArray3);
      assertNotSame(intArray4, intArray2);
      assertNotSame(intArray4, intArray0);
      assertNotSame(intArray4, intArray5);
      assertNotSame(intArray6, intArray2);
      assertNotSame(intArray6, intArray4);
      assertNotSame(intArray6, intArray5);
      assertNotSame(intArray6, intArray3);
      assertNotSame(intArray6, intArray0);
      assertNotSame(intArray6, intArray1);
      assertArrayEquals(new int[] {2}, intArray0);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray1);
      assertArrayEquals(new int[] {2, 0, 0}, intArray4);
      assertArrayEquals(new int[] {0, 1}, intArray6);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray0.equals((Object)intArray3));
      assertFalse(intArray0.equals((Object)intArray4));
      assertFalse(intArray0.equals((Object)intArray5));
      assertFalse(intArray0.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray1.equals((Object)intArray3));
      assertFalse(intArray1.equals((Object)intArray4));
      assertFalse(intArray1.equals((Object)intArray5));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray0));
      assertFalse(intArray4.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray0));
      assertFalse(intArray6.equals((Object)intArray1));
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      assertEquals(3, intArray4.length);
      assertEquals(2, intArray6.length);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Solution2613 solution2613_0 = new Solution2613();
      int[] intArray0 = new int[4];
      intArray0[0] = 5491;
      intArray0[1] = 4741;
      int[] intArray1 = new int[6];
      intArray1[2] = 5491;
      int[] intArray2 = solution2613_0.beautifulPair(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 1}, intArray2);
      
      int[] intArray3 = solution2613_0.beautifulPair(intArray0, intArray0);
      int[] intArray4 = solution2613_0.beautifulPair(intArray3, intArray3);
      int[] intArray5 = solution2613_0.beautifulPair(intArray4, intArray0);
      assertArrayEquals(new int[] {0, 2}, intArray5);
      assertArrayEquals(new int[] {2, 3}, intArray3);
      
      intArray0[2] = (-1);
      int[] intArray6 = solution2613_0.beautifulPair(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray6);
  }
}
