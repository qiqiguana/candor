/*
 * This file was automatically generated by EvoSuite
 * Thu May 29 00:54:25 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Solution2093;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution2093_ESTest extends Solution2093_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Solution2093 solution2093_0 = new Solution2093();
      int[][] intArray0 = new int[1][1];
      int[] intArray1 = new int[21];
      intArray1[2] = 2565;
      intArray0[0] = intArray1;
      int int0 = solution2093_0.minimumCost(2565, intArray0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Solution2093 solution2093_0 = new Solution2093();
      int[][] intArray0 = new int[1][1];
      int[] intArray1 = new int[21];
      intArray1[0] = 879;
      intArray0[0] = intArray1;
      int int0 = solution2093_0.minimumCost(2565, intArray0, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int[][] intArray0 = new int[2][4];
      Solution2093 solution2093_0 = new Solution2093();
      // Undeclared exception!
      solution2093_0.minimumCost(3228, intArray0, 3228);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Solution2093 solution2093_0 = new Solution2093();
      // Undeclared exception!
      try { 
        solution2093_0.minimumCost(196, (int[][]) null, 196);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Solution2093 solution2093_0 = new Solution2093();
      int[][] intArray0 = new int[1][7];
      // Undeclared exception!
      try { 
        solution2093_0.minimumCost((-3678), intArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -3678
         //
         verifyException("original.Solution2093", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Solution2093 solution2093_0 = new Solution2093();
      int[][] intArray0 = new int[0][4];
      int int0 = solution2093_0.minimumCost(1, intArray0, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Solution2093 solution2093_0 = new Solution2093();
      int[][] intArray0 = new int[1][1];
      // Undeclared exception!
      try { 
        solution2093_0.minimumCost(2565, intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
