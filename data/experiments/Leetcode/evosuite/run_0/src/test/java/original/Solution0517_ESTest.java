/*
 * This file was automatically generated by EvoSuite
 * Thu May 29 02:12:49 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Solution0517;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution0517_ESTest extends Solution0517_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Solution0517 solution0517_0 = new Solution0517();
      int[] intArray0 = new int[4];
      intArray0[0] = (-2667);
      intArray0[1] = (-101);
      intArray0[2] = 1223;
      int int0 = solution0517_0.findMinMoves(intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Solution0517 solution0517_0 = new Solution0517();
      int[] intArray0 = new int[9];
      intArray0[3] = (-2440);
      intArray0[4] = 686;
      intArray0[6] = 2536;
      intArray0[7] = (-2296);
      intArray0[8] = 6905;
      int int0 = solution0517_0.findMinMoves(intArray0);
      assertEquals(6306, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Solution0517 solution0517_0 = new Solution0517();
      // Undeclared exception!
      try { 
        solution0517_0.findMinMoves((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Solution0517", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Solution0517 solution0517_0 = new Solution0517();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        solution0517_0.findMinMoves(intArray0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("original.Solution0517", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Solution0517 solution0517_0 = new Solution0517();
      int[] intArray0 = new int[2];
      intArray0[1] = 1;
      int int0 = solution0517_0.findMinMoves(intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Solution0517 solution0517_0 = new Solution0517();
      int[] intArray0 = new int[2];
      int int0 = solution0517_0.findMinMoves(intArray0);
      assertEquals(0, int0);
  }
}
