/*
 * This file was automatically generated by EvoSuite
 * Thu May 29 01:24:52 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Solution3219;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution3219_ESTest extends Solution3219_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Solution3219 solution3219_0 = new Solution3219();
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = 2;
      long long0 = solution3219_0.minimumCost(2, 2, intArray0, intArray0);
      assertEquals(6L, long0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Solution3219 solution3219_0 = new Solution3219();
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        solution3219_0.minimumCost(2, 2840, intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2838 out of bounds for length 4
         //
         verifyException("original.Solution3219", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Solution3219 solution3219_0 = new Solution3219();
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try { 
        solution3219_0.minimumCost(3496, 2, intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 3494 out of bounds for length 8
         //
         verifyException("original.Solution3219", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Solution3219 solution3219_0 = new Solution3219();
      int[] intArray0 = new int[8];
      int[] intArray1 = new int[8];
      intArray1[0] = 2;
      intArray1[1] = 2;
      intArray1[2] = 2;
      intArray1[3] = 1541;
      intArray1[4] = 2;
      intArray1[5] = 2;
      intArray1[6] = 2;
      intArray1[7] = 2;
      long long0 = solution3219_0.minimumCost(2, 2, intArray0, intArray1);
      assertArrayEquals(new int[] {2, 2, 2, 2, 2, 2, 2, 1541}, intArray1);
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[0];
      Solution3219 solution3219_0 = new Solution3219();
      // Undeclared exception!
      try { 
        solution3219_0.minimumCost(1172, 248, (int[]) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Solution3219 solution3219_0 = new Solution3219();
      int[] intArray0 = new int[9];
      // Undeclared exception!
      try { 
        solution3219_0.minimumCost((-1), 68, intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 66 out of bounds for length 9
         //
         verifyException("original.Solution3219", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Solution3219 solution3219_0 = new Solution3219();
      int[] intArray0 = new int[9];
      int[] intArray1 = new int[7];
      intArray1[2] = (-426);
      long long0 = solution3219_0.minimumCost(2, 2, intArray0, intArray1);
      assertEquals((-852L), long0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Solution3219 solution3219_0 = new Solution3219();
      int[] intArray0 = new int[9];
      long long0 = solution3219_0.minimumCost(2, 2, intArray0, intArray0);
      assertEquals(0L, long0);
  }
}
