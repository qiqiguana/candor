/*
 * This file was automatically generated by EvoSuite
 * Thu May 29 00:49:47 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.MyCircularDeque;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class MyCircularDeque_ESTest extends MyCircularDeque_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MyCircularDeque myCircularDeque0 = new MyCircularDeque(2342);
      myCircularDeque0.insertFront((-1344));
      myCircularDeque0.insertFront(0);
      int int0 = myCircularDeque0.getRear();
      assertFalse(myCircularDeque0.isEmpty());
      assertEquals((-1344), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MyCircularDeque myCircularDeque0 = new MyCircularDeque(2342);
      myCircularDeque0.insertFront((-1344));
      myCircularDeque0.insertFront(0);
      boolean boolean0 = myCircularDeque0.deleteLast();
      assertEquals(0, myCircularDeque0.getFront());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MyCircularDeque myCircularDeque0 = new MyCircularDeque(2342);
      myCircularDeque0.insertFront((-1344));
      boolean boolean0 = myCircularDeque0.insertLast((-1));
      assertFalse(myCircularDeque0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MyCircularDeque myCircularDeque0 = new MyCircularDeque(1512);
      myCircularDeque0.insertFront(0);
      int int0 = myCircularDeque0.getRear();
      assertFalse(myCircularDeque0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MyCircularDeque myCircularDeque0 = new MyCircularDeque(2342);
      myCircularDeque0.insertLast(2342);
      int int0 = myCircularDeque0.getRear();
      assertFalse(myCircularDeque0.isEmpty());
      assertEquals(2342, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MyCircularDeque myCircularDeque0 = new MyCircularDeque(2342);
      myCircularDeque0.insertFront(0);
      myCircularDeque0.insertFront((-1));
      myCircularDeque0.deleteFront();
      int int0 = myCircularDeque0.getFront();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MyCircularDeque myCircularDeque0 = new MyCircularDeque(2050);
      myCircularDeque0.insertFront(5481);
      int int0 = myCircularDeque0.getFront();
      assertFalse(myCircularDeque0.isEmpty());
      assertEquals(5481, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MyCircularDeque myCircularDeque0 = null;
      try {
        myCircularDeque0 = new MyCircularDeque((-779));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // -779
         //
         verifyException("original.MyCircularDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MyCircularDeque myCircularDeque0 = new MyCircularDeque(1199);
      boolean boolean0 = myCircularDeque0.isFull();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MyCircularDeque myCircularDeque0 = new MyCircularDeque(0);
      boolean boolean0 = myCircularDeque0.isFull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MyCircularDeque myCircularDeque0 = new MyCircularDeque(1512);
      boolean boolean0 = myCircularDeque0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MyCircularDeque myCircularDeque0 = new MyCircularDeque(2342);
      myCircularDeque0.insertFront((-1344));
      boolean boolean0 = myCircularDeque0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MyCircularDeque myCircularDeque0 = new MyCircularDeque(1199);
      assertTrue(myCircularDeque0.isEmpty());
      
      int int0 = myCircularDeque0.getRear();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MyCircularDeque myCircularDeque0 = new MyCircularDeque(1199);
      int int0 = myCircularDeque0.getFront();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MyCircularDeque myCircularDeque0 = new MyCircularDeque(1512);
      boolean boolean0 = myCircularDeque0.deleteLast();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MyCircularDeque myCircularDeque0 = new MyCircularDeque(1512);
      boolean boolean0 = myCircularDeque0.deleteFront();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MyCircularDeque myCircularDeque0 = new MyCircularDeque(1512);
      myCircularDeque0.insertFront(0);
      assertEquals(0, myCircularDeque0.getFront());
      
      boolean boolean0 = myCircularDeque0.deleteFront();
      assertEquals((-1), myCircularDeque0.getRear());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MyCircularDeque myCircularDeque0 = new MyCircularDeque(0);
      boolean boolean0 = myCircularDeque0.insertLast(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MyCircularDeque myCircularDeque0 = new MyCircularDeque(0);
      assertTrue(myCircularDeque0.isFull());
      
      boolean boolean0 = myCircularDeque0.insertFront(0);
      assertFalse(boolean0);
  }
}
