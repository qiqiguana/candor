/*
 * This file was automatically generated by EvoSuite
 * Thu May 29 00:06:02 GMT 2025
 */

package original;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import original.Solution2613;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Solution2613_ESTest extends Solution2613_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Solution2613 solution2613_0 = new Solution2613();
      int[] intArray0 = new int[0];
      solution2613_0.beautifulPair(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Solution2613 solution2613_0 = new Solution2613();
      // Undeclared exception!
      try { 
        solution2613_0.beautifulPair((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("original.Solution2613", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Solution2613 solution2613_0 = new Solution2613();
      int[] intArray0 = new int[5];
      int[] intArray1 = solution2613_0.beautifulPair(intArray0, intArray0);
      // Undeclared exception!
      try { 
        solution2613_0.beautifulPair(intArray0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Index 2 out of bounds for length 2
         //
         verifyException("original.Solution2613", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Solution2613 solution2613_0 = new Solution2613();
      int[] intArray0 = new int[8];
      int[] intArray1 = solution2613_0.beautifulPair(intArray0, intArray0);
      intArray0[0] = (-2516);
      solution2613_0.beautifulPair(intArray1, intArray0);
      solution2613_0.beautifulPair(intArray0, intArray0);
      intArray0[1] = 3;
      intArray0[2] = (-1916);
      int[] intArray2 = solution2613_0.beautifulPair(intArray0, intArray0);
      solution2613_0.beautifulPair(intArray2, intArray0);
      solution2613_0.beautifulPair(intArray2, intArray2);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Solution2613 solution2613_0 = new Solution2613();
      int[] intArray0 = new int[8];
      int[] intArray1 = solution2613_0.beautifulPair(intArray0, intArray0);
      intArray0[0] = (-2516);
      solution2613_0.beautifulPair(intArray1, intArray0);
      solution2613_0.beautifulPair(intArray0, intArray0);
      intArray0[1] = 3;
      intArray0[2] = (-1916);
      intArray0[3] = (-2343);
      intArray0[4] = (-698);
      int[] intArray2 = solution2613_0.beautifulPair(intArray0, intArray0);
      solution2613_0.beautifulPair(intArray2, intArray0);
      int[] intArray3 = solution2613_0.beautifulPair(intArray2, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray3);
      
      int[] intArray4 = solution2613_0.beautifulPair(intArray2, intArray2);
      assertArrayEquals(new int[] {0, 0}, intArray4);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Solution2613 solution2613_0 = new Solution2613();
      int[] intArray0 = new int[8];
      int[] intArray1 = solution2613_0.beautifulPair(intArray0, intArray0);
      intArray0[0] = (-2516);
      int[] intArray2 = solution2613_0.beautifulPair(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 1}, intArray2);
      
      intArray0[1] = 3;
      intArray0[2] = (-1916);
      intArray0[3] = (-2343);
      int[] intArray3 = solution2613_0.beautifulPair(intArray0, intArray0);
      int[] intArray4 = solution2613_0.beautifulPair(intArray3, intArray0);
      assertArrayEquals(new int[] {1, 1}, intArray4);
      
      int[] intArray5 = solution2613_0.beautifulPair(intArray3, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray5);
      
      solution2613_0.beautifulPair(intArray0, intArray0);
      solution2613_0.beautifulPair(intArray3, intArray1);
      assertArrayEquals(new int[] {4, 5}, intArray3);
      assertArrayEquals(new int[] {0, 1}, intArray1);
  }
}
